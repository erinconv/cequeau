{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CEQUEAU Hydrological Model","text":"<p>Welcome to the official documentation for the CEQUEAU hydrological model. CEQUEAU is a distributed hydrological model designed for simulating watershed hydrology.</p>"},{"location":"#about-cequeau","title":"About CEQUEAU","text":"<p>CEQUEAU is a spatially distributed hydrological model that divides a watershed into square grid cells, called \"carreaux entiers\" (whole squares), which are further divided into \"carreaux partiels\" (partial squares) based on watershed boundaries. The model simulates various hydrological processes including:</p> <ul> <li>Snow accumulation and melt</li> <li>Evapotranspiration</li> <li>Surface and subsurface flow</li> <li>Channel routing</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with CEQUEAU:</p> <ol> <li>How to obtain the physiographic data</li> <li>Basic usage guide</li> </ol>"},{"location":"#api-reference","title":"API Reference","text":"<p>The API reference provides detailed information about the model's classes and functions:</p> <ul> <li>Simulation - The main simulation engine</li> <li>BassinVersant - Watershed representation</li> <li>CarreauEntier - Whole grid cells</li> <li>CarreauPartiel - Partial grid cells</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions to the CEQUEAU model are welcome. Please see our contribution guidelines for more information.</p>"},{"location":"#license","title":"License","text":"<p>CEQUEAU is licensed under [LICENSE]. See the LICENSE file for details. </p>"},{"location":"api/","title":"API Documentation","text":"<p>This section contains documentation for the CEQUEAU codebase, both hand-written overviews and automatically generated API references.</p>"},{"location":"api/#core-classes","title":"Core Classes","text":"<p>The CEQUEAU model consists of several core classes that implement the hydrological and temperature modeling functionality:</p> <ul> <li>BassinVersant: Represents the entire watershed</li> <li>CarreauEntier: Represents whole grid cells in the watershed</li> <li>CarreauPartiel: Represents partial grid cells in the watershed</li> <li>Simulation: Handles the simulation process</li> </ul>"},{"location":"api/#other-key-components","title":"Other Key Components","text":"<p>CEQUEAU includes several other important classes:</p> <ul> <li>Barrage: Manages reservoir operations and water release</li> <li>Meteo: Handles meteorological inputs and processing</li> <li>DateChrono: Provides date and time handling capabilities</li> <li>Parametres: Manages model parameters and configurations</li> </ul>"},{"location":"api/#simulation-modules","title":"Simulation Modules","text":"<p>CEQUEAU implements multiple simulation modules for different processes:</p> <ul> <li>Evapotranspiration Models: Several implementations available</li> <li>EvapoCequeau: The original CEQUEAU evapotranspiration model</li> <li>EvapoPenmanMont: Penman-Monteith evapotranspiration model</li> <li>EvapoPriestleyTaylor: Priestley-Taylor evapotranspiration model</li> <li>EvapoMorton: Morton's evapotranspiration model</li> <li>EvapoKPenman: Modified Penman evapotranspiration model</li> <li> <p>EvapoMcGuinness: McGuinness-Bordne evapotranspiration model</p> </li> <li> <p>Snowmelt Models: Options for different snow accumulation and melt calculations</p> </li> <li>FonteCequeau: Original CEQUEAU snowmelt model</li> <li>FonteUEB: Utah Energy Balance snowmelt model</li> <li> <p>FonteCemaNeige: CemaNeige snowmelt model</p> </li> <li> <p>Solar Radiation:</p> </li> <li>DLI: Direct and diffuse light calculations</li> <li>SolarFunctions: Sun position and solar radiation calculations</li> </ul>"},{"location":"api/#auto-generated-documentation","title":"Auto-Generated Documentation","text":"<p>For complete API details including all classes, methods, and properties, see the Auto-Generated Class List.</p> <p>The auto-generated documentation includes:</p> <ul> <li>Class List: All classes with brief descriptions</li> <li>Class Index: Alphabetical index of all classes</li> <li>Class Hierarchy: Inheritance diagram for class relationships</li> <li>Class Members: Functions, variables, and types for each class</li> <li>File List: Source code files with documentation</li> </ul> <p>When viewing the auto-generated documentation:</p> <ol> <li>Start from the Class List to browse all available classes</li> <li>Use the search function (top-right) to find specific classes or functions</li> <li>Each class page includes properties, methods, inheritance information, and function details </li> </ol>"},{"location":"code_of_conduct/","title":"Code of Conduct for CEQUEAU Development","text":""},{"location":"code_of_conduct/#our-commitment","title":"Our Commitment","text":"<p>We, the CEQUEAU development community, are committed to building high-quality, sustainable hydrological modeling software through collaborative development and transparent practices. This Code of Conduct establishes clear standards for professional behavior and technical integrity that all participants must uphold.</p>"},{"location":"code_of_conduct/#code-quality-and-technical-integrity","title":"Code Quality and Technical Integrity","text":"<p>All contributors must:</p> <ul> <li>Write clean, maintainable, and well-documented code</li> <li>Properly test code contributions and verify functionality before submission</li> <li>Follow established coding standards and architectural patterns</li> <li>Document design decisions and technical implementations thoroughly</li> <li>Maintain comprehensive version control practices</li> <li>Subject all code modifications to appropriate testing and validation</li> </ul>"},{"location":"code_of_conduct/#development-standards","title":"Development Standards","text":"<p>The CEQUEAU development community demands:</p> <ul> <li>Clear, precise, and well-structured code implementations</li> <li>Constructive code reviews focused on technical content rather than attacking individuals</li> <li>Prompt resolution of identified bugs and technical issues</li> <li>Respect for code ownership while encouraging collaborative improvement</li> <li>Adherence to established software engineering best practices</li> <li>Regular participation in code reviews and knowledge sharing</li> </ul>"},{"location":"code_of_conduct/#inclusive-technical-collaboration","title":"Inclusive Technical Collaboration","text":"<p>Software advancement requires diverse perspectives. Therefore, contributors must:</p> <ul> <li>Evaluate all code contributions based solely on their technical merit</li> <li>Actively mentor developers with varying levels of expertise</li> <li>Support internationalization and localization where feasible</li> <li>Provide thorough documentation to accommodate different levels of technical expertise</li> <li>Recognize that programming styles may vary and focus on functionality and performance</li> </ul>"},{"location":"code_of_conduct/#unacceptable-behavior","title":"Unacceptable Behavior","text":"<p>The following actions will not be tolerated:</p> <ul> <li>Introduction of malicious code or security vulnerabilities</li> <li>Copying code without proper attribution or license compliance</li> <li>Deliberate obstruction of software development progress</li> <li>Discrimination based on technical background, programming language preference, or any protected characteristic</li> <li>Harassment or personal attacks in technical discussions</li> <li>Violations of confidentiality regarding proprietary development aspects</li> </ul>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Violations of this Code of Conduct will be addressed through:</p> <ol> <li>Initial notification to the party regarding the specific violation</li> <li>Review by project maintainers with appropriate technical expertise</li> <li>Implementation of proportionate consequences, which may include:</li> <li>Required correction of code issues</li> <li>Temporary restriction from specific project repositories</li> <li>Permanent removal from the project</li> </ol>"},{"location":"code_of_conduct/#reporting","title":"Reporting","text":"<p>Suspected violations should be reported promptly to project maintainers with: - Specific details of the incident - Supporting evidence (code examples, logs, etc.) - Relevant technical context</p> <p>All reports will be handled with appropriate confidentiality while ensuring project integrity.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code applies to all technical spaces associated with CEQUEAU, including but not limited to code repositories, documentation, issue trackers, code reviews, pull requests, and technical communications.</p>"},{"location":"code_of_conduct/#adaptation","title":"Adaptation","text":"<p>This Code of Conduct will evolve as the project and community needs develop. Proposed modifications will undergo review by the core development team to ensure continued relevance and effectiveness.</p> <p>By participating in the CEQUEAU project, you affirm your commitment to these principles and your willingness to uphold the development standards described herein. </p>"},{"location":"contributing/","title":"Contributing to CEQUEAU","text":"<p>Thank you for your interest in contributing to CEQUEAU! This document provides guidelines and instructions for contributing to this project.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project adheres to a Code of Conduct that all contributors are expected to follow. By participating, you are expected to uphold this code.</p>"},{"location":"contributing/#how-can-i-contribute","title":"How Can I Contribute?","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<ul> <li>Ensure the bug was not already reported by searching on GitHub under Issues.</li> <li>If you're unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.</li> </ul>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<ul> <li>Open a new issue with a clear title and detailed description.</li> <li>Provide specific examples and use cases for the enhancement.</li> <li>Describe the current behavior and explain what behavior you expected to see instead.</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Fork the repository.</li> <li>Create a new branch (<code>git checkout -b feature/amazing-feature</code>).</li> <li>Make your changes.</li> <li>Run tests to ensure your changes don't break existing functionality.</li> <li>Commit your changes (<code>git commit -m 'Add some amazing feature'</code>).</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>).</li> <li>Open a Pull Request.</li> </ol>"},{"location":"contributing/#translating-the-source-code-and-user-manual","title":"Translating the Source Code and User Manual","text":"<ul> <li>We are actively working to translate the source code and user manual from French to English to make it the more more accesible to everyone. If you are fluent in both languages, we would greatly appreciate your help!.</li> <li>The original CEQUEAU user manual can be found here</li> <li>You can contribute by translating code comments, documentation, and any other relevant materials.</li> <li>Please open an issue to discuss the specific parts you would like to translate, or feel free to submit a pull request with your translations.</li> <li>Ensure that your translations maintain the original meaning and context to help future contributors understand the code and documentation better.</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/erinconv/CEQUEAU.git\ncd cequeau\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code># Using pip\npip install -e .\npip install -r requirements-dev.txt\n</code></pre></p> </li> <li> <p>Set up pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"contributing/#c-code-style","title":"C++ Code Style","text":"<ul> <li>Follow the existing code style in the project.</li> <li>Use descriptive variable and function names.</li> <li>Comment your code where necessary, especially for complex algorithms.</li> <li>Use modern C++ features where appropriate.</li> <li>Keep functions small and focused on a single task.</li> <li>Avoid global variables.</li> </ul>"},{"location":"contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Follow PEP 8 guidelines.</li> <li>Use type hints where possible.</li> <li>Document functions and classes using docstrings.</li> <li>Write unit tests for new functionality.</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any changes to public APIs.</li> <li>Document new features, parameters, and error handling.</li> <li>For significant changes, consider updating the examples.</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write unit tests for new functionality.</li> <li>Ensure all tests pass before submitting a pull request.</li> <li>Consider adding integration tests for larger features.</li> </ul>"},{"location":"contributing/#review-process","title":"Review Process","text":"<p>Pull requests will be reviewed by project maintainers. The review process may include:</p> <ul> <li>Code review for style, correctness, and performance.</li> <li>Testing the changes locally.</li> <li>Requesting additional changes or clarification.</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>The project maintainers will handle releases according to the following process:</p> <ol> <li>Update version number in relevant files.</li> <li>Update changelog with notable changes.</li> <li>Create a release tag.</li> <li>Publish the release.</li> </ol>"},{"location":"contributing/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Documentation</li> <li>Git Documentation</li> </ul> <p>Thank you for contributing to CEQUEAU!</p>"},{"location":"development/","title":"Purpose","text":"<p>This guide provides instructions for setting up the development environment for Cequeau.</p>"},{"location":"development/#folder-structure","title":"Folder Structure","text":"<pre><code>cequeau/\n\u251c\u2500\u2500 src/\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 docs/\n\u2514\u2500\u2500 mex/\n</code></pre> <p>The <code>src/</code> folder contains all header and source files for the C++ mex function, and also the matlab and octave compilation files.</p> <p>The <code>tests/</code> folder contains various folders to test functions and features.</p> <p>The <code>docs/</code> folder contains documentation for the development and usage of Cequeau</p> <p>The <code>mex/</code> the compiled mex binaries will be placed within this folder</p>"},{"location":"development/#software-requirements","title":"Software Requirements","text":"<p>The following section outlines the software and tools necessary to develop and compile Cequeau. Cequeau can be compiled using both Matlab and Octave.</p>"},{"location":"development/#c-compiler","title":"C++ Compiler","text":"<p>A C++ compiler that supports at least C++14.</p>"},{"location":"development/#matlab","title":"Matlab","text":"<p> Matlab supports both GCC (MinGW) and MSVC, with different supported compiler versions for each release. The supported compilers can be found here, within the compilers section.</p>"},{"location":"development/#msvc-microsoft-visual-c","title":"MSVC (Microsoft Visual C++)","text":"<p>MSVC is installed by installing Visual Studio with the \"Desktop development with C++\" option enabled. The required Microsoft Visual Studio version will depend on the Matlab version and its supported compilers. For example, when using Matlab R2020b, which supports up to Microsoft Visual C++ 2019, it requires Visual Studio 2019.</p>"},{"location":"development/#gcc-mingw","title":"GCC (MinGW)","text":"<p>MinGW-w64 is a GCC toolchain for the Windows platform. It can be installed by following Mathwork\\'s guide.</p>"},{"location":"development/#octave","title":"Octave","text":"<p>Cequeau v5.0.0 was developed using Octave 9.4, and MinGW 13. A newer version of octave and compiler will also satisfy the requirements and compile the code.</p> <p>The latest version of MinGW-w64 can be installed through MSYS2.</p>"},{"location":"development/#compilation","title":"Compilation","text":""},{"location":"development/#compilation-in-matlab","title":"Compilation in Matlab","text":"<p>The Matlab script to compile the C++ mex function is <code>cequeau/src/compileCequeauMat.m</code>.</p> <p>All relevant <code>.cpp</code> source files are appended to the <code>SOURCES</code> argument, if a new file is to be added, it should be appended in a similar manner.</p> <p>To ensure consistency, the C++ version is specified within the compile arguments. As shown below, the script automatically detects the compiler and sets the flags accordingly. <code>COMPFLAGS</code> is used for MSVC and <code>CXXFLAGS</code> is used for GNU. More information about <code>mex</code> and the compiler flags can be found here (https://www.mathworks.com/help/matlab/ref/mex.html).</p> <p>To enable logging to the <code>.log</code> file, set the <code>log</code> variable to <code>true</code>.</p> <p></p> <p>To enable debugging, the <code>-g</code> flag must be set, to do so, simply set the <code>debug</code> variable to <code>true</code>.</p> <p></p> <p>The output file is specified in the <code>OUTFILE</code> variable, by default the compiled mex will be placed in <code>cequeau/mex/</code>.</p> <p></p>"},{"location":"development/#compilation-in-octave","title":"Compilation in Octave","text":"<p>The compilation for octave is similar to the compilation in Matlab, with only some syntactical differences. As shown below (<code>cequeau/src/compileCequeauOct.m</code>).</p> <p></p> <p>The <code>FLAGS</code> variable contains the custom flag <code>-DENV_OCTAVE</code>, which is used within the cequeau program to detect whether it is the octave version being run. This allows the ability to customize certain elements depending on the environment. For example, it is used to append <code>Oct</code> or <code>Mat</code> at the end of the log file to help the user identify the appropriate log file.</p>"},{"location":"development/#compilation-of-cequeau-interpolation","title":"Compilation of Cequeau Interpolation","text":"<p>The interpolation compilation scripts (<code>compileInterpolationMat.m</code> and <code>compileInterpolationOct.m</code>) are both similar to their respective Cequeau Quantite compilation scripts, except they are targeting the source files relevant for <code>InterpolationMex.cpp</code>.</p>"},{"location":"development/#usage","title":"Usage","text":"<p>Compiling the C++ code using Matlab or Octave mex creates a mex file (<code>.mexw64</code> or <code>.mex</code>). This file is used as a Matlab/Octave function. It takes in various inputs and the order matters, therefore if an input is optional, it is still required to provide an empty array <code>[]</code> within the input list. For detailed explanation about all of the inputs and outputs, please refer to <code>'Intrants -- Extrants v5.docx'</code> and for a more in depth usage guide, follow <code>'Cequeau_Guide.docx'</code>.</p> <p>Here is an example usage:</p> <pre><code>[y.etatsCE, y.etatsCP, y.etatsFonte, y.etatsEvapo, y.etatsBarrage, ...\n y.pasDeTemps, y.avantAssimilationsCE, y.avantAssimilationsFonte, ...\n y.avantAssimilationsEvapo, y.etatsQualCP, y.avAssimQual] = ...\n    cequeauQuantiteMat(struct.execution, struct.parametres, ...\n                       struct.bassinVersant, struct.meteo, ...\n                       struct.etatsPrecedents, struct.assimilations, ...\n                       struct.stations);\n</code></pre> <p>After running this function, all of the outputs will be placed in the variables provided in the left side of the function.</p>"},{"location":"development/#logging-to-log-file","title":"Logging to .log file","text":"<p>A custom logger (<code>log.h</code>) was written to log data to a <code>.log</code> file during testing. This feature is useful for quick testing and ensuring expected functionality. It has various logging levels that can be used to print out the desired type of information.</p> <pre><code>enum TLogLevel {logERROR, logWARNING, logINFO, logDEBUG, logDEBUG1,\n               logDEBUG2, logDEBUG3, logDEBUG4};\n</code></pre> <p>The logLevel is specified within the <code>cequeauQuantiteMex.cpp</code> file:</p> <pre><code>FILELog::ReportingLevel() = logINFO; // or logWarning, logError, logDebug, etc...\n</code></pre>"},{"location":"development/#debugging","title":"Debugging","text":"<p>The most convenient way to debug a mex program is using Visual Studio, by attaching the process to the running matlab instance.</p> <ol> <li> <p>Compile the Mex function with debug enabled</p> <p>Within the appropriate script to compile, set <code>debug</code> to <code>true</code>. After compilation, there should be a <code>.pdb</code> file alongside the <code>.mex</code> file.</p> </li> <li> <p>     Open visual studio and continue without code</p> </li> <li> <p>     Click the <code>Attach to Process...</code> button in the top     toolbar (The exact icon/location might vary slightly)</p> </li> <li> <p>Find and attach to the Matlab process (e.g., <code>MATLAB.exe</code>). You can use the filtering     textbox for quick retrieval.</p> <p></p> </li> <li> <p>     Open the source file <code>cequeauQuantiteMex.cpp</code>. Go to <code>File -&gt; Open -&gt; File</code>, and locate the file that was compiled in the Matlab workspace.</p> </li> <li> <p>Set a breakpoint at the entry point, <code>mexFunction()</code>. Right click on     the line, <code>Breakpoint -&gt; Insert Breakpoint</code>.</p> </li> <li> <p>Now go back to matlab, and run the function.</p> </li> <li> <p>Visual Studio should display the function blocked at the breakpoint.</p> </li> <li> <p>     Disable <code>Access Violation</code> exceptions if they interrupt debugging unnecessarily. (Go to <code>Debug -&gt; Windows -&gt; Exception Settings</code> and uncheck <code>Common Language Runtime Exceptions -&gt; System.AccessViolationException</code> or similar, depending on VS version).</p> </li> <li> <p>The program can now be debugged like any other C++ program, using     <code>Step Into</code> (F11), <code>Step Over</code> (F10), <code>Continue</code> (F5), etc.</p> </li> </ol>"},{"location":"development/#testing-matlab-and-octave","title":"Testing Matlab and Octave","text":"<p>Cequeau v5.0.0 added support for Octave. To validate the octave compiled version, test run files were created to ensure the Octave version produced the same output as the Matlab version. The Matlab and Octave versions are tested with the same inputs, and the outputs are compared to ensure there are no differences.</p> <p>The comparison testing is within <code>Cequeau/tests/testing_octave/</code></p> <p>The <code>testing_octave/scripts/</code> folder contains Matlab and Octave scripts to run the program with various configurations. For example, <code>run_mat_fonte_0_Cequeau.m</code> tests the program with the Cequeau melting module in Matlab. The <code>run_oct_fonte_0_Cequeau.m</code> is the octave equivalent. Each of these files saves an output variable that is saved as <code>.mat</code> files within the <code>testing_octave/outputs/</code> folder. The following image demonstrates an example. The outputs are saved as v7 mat files since that is the highest version supported by Octave.</p> <p></p> <p> Within the <code>testing_octave/</code> folder, the</p>"},{"location":"guide/","title":"Usage","text":"<p>The function is called in the following way:</p> <pre><code>% General form\n[outputs...] = CequeauQuantiteMex(inputs...);\n\n% Specific example\n[etatsCE, etatsCP, etatsFonte, etatsEvapo, etatsBarrage, pasDeTemps, ...\n avantAssimilationsCE, avantAssimilationsFonte, avanAssimilationEvapo, ...\n etatsQualCP, avAssimQual] = ...\n    CequeauQuantiteMex(execution, parametres, bassinVersant, meteo, ...\n                       etatsPrecedents, assimilations, stations);\n</code></pre> <p>Inputs:</p> <ul> <li> <p>execution</p> </li> <li> <p>parametres</p> </li> <li> <p>bassinVersant</p> </li> <li> <p>meteo</p> </li> <li> <p>etatsPrecedents</p> </li> <li> <p>assimilations</p> </li> <li> <p>stations</p> </li> </ul>"},{"location":"guide/#execution","title":"Execution","text":"<p>The execution struct contains the start and end dates for the simulation. These dates can be modified to simulate a specific subset of the overall data range. However, it is important that the input data matches the specified range.</p> <p>This is important for:</p> <ul> <li> <p>All meteo data</p> </li> <li> <p>barrage data (bassinVersant.barrage): debit</p> </li> <li> <p>Puits data (bassinVersant.puits): debitPompage and     niveauxPuits</p> </li> </ul> <p>The intersect function in Matlab/Octave can find the matching date range, which can then be used to extract the relevant dates, as shown below:</p> <pre><code>struct_ex.execution.dateDebut = datenum(2005, 3, 1);\nstruct_ex.execution.dateFin = datenum(2005, 11, 31);\n\ndates.sim = [struct_ex.execution.dateDebut:struct_ex.execution.dateFin]';\n\n[C, I, J] = intersect(struct_ex.meteoPointGrille.t, dates.sim);\nstruct_ex.meteoPointGrille.t = struct_ex.meteoPointGrille.t(I);\nstruct_ex.meteoPointGrille.TMin = struct_ex.meteoPointGrille.TMin(I, :);\n</code></pre>"},{"location":"guide/#dli","title":"DLI","text":"<p>DLI parameters need to be added within the structure in the latest version of Cequeau. The <code>.mat</code> file <code>dli_params.mat</code> is included in the <code>cequeau/tests/mat_files</code> folder.</p> <pre><code>% parametres pour DLI\nload('dli_params.mat');\nstructSMA.parametres.dli = dli_params;\n</code></pre>"},{"location":"guide/#pumping","title":"Pumping","text":""},{"location":"guide/#overview","title":"Overview","text":"<p>The pumping module takes into account the water being pumped out of the ground for each whole square (CE) at each timestep. Pumping data is provided through data about wells located on the river basin.</p> <p>To turn on the pumping module, the option must be set to 1. Setting it to 0 (default) will turn it off.</p> <pre><code>StructFinal.parametres.option.modulePompage = 1; % 0 = off, 1 = on\n</code></pre> <p>Data about water wells is placed within the <code>bassinVersant</code> struct. Each well needs to have the index of the CE, the distance from the well to the river, the initial water level h0, all the water levels and the pumping rate in m^3^ per day. There is also a variable to activate/deactivate the well.</p> <pre><code>% Initialize the structure to hold all wells\nstructPuits = struct();\nnumTimeSteps = size(meteo.dates, 1); % Example: Get number of timesteps\n\nstructPuits(1).idCE = 41; % index of whole square\nstructPuits(1).active = 1; % activate the well\nstructPuits(1).distanceRiviere = 0; % distance between well and river (m)\nstructPuits(1).h0 = 20; % initial water level (m)\nstructPuits(1).niveauxPuits = ones(numTimeSteps, 1) * 20; % water level at each timestep (m)\nstructPuits(1).debitPompage = Debit_Pomp.Well_1; % pumping rate m3/day at each timestep\n\nstructPuits(2).idCE = 1;\nstructPuits(2).active = 0; % deactivate the well\nstructPuits(2).distanceRiviere = 0; % distance between well and river (m)\nstructPuits(2).h0 = 20; % initial water level (m)\nstructPuits(2).niveauxPuits = ones(numTimeSteps, 1) * 20; % water level at each timestep (m)\nstructPuits(2).debitPompage = Debit_Pomp.Well_2; % pumping rate m3/day at each timestep\n\nStructFinal.bassinVersant.puits = structPuits;\n</code></pre> <p>Other parameters are set within the <code>parametres</code> struct.</p> <p>The <code>delai</code> parameter delays the effect of the pumping by the given number of timesteps.</p> <p>The <code>conductiviteHydraulique_s</code> is used to specify the hydraulic conductivity. A single value can be given to assign the same values to all whole squares, or a <code>1 x number of CE</code> array can be provided to assign a value to each CE.</p> <p>The <code>coeffPompage</code> is used to adjust the extracted water from the reservoir (to be calibrated)</p> <pre><code>% creating pumping parameter struct\nStructFinal.parametres.pompage = struct();\nStructFinal.parametres.pompage.delai = 1; % Delay in timesteps\nStructFinal.parametres.pompage.coeffPompage= 0.01; % Calibration coefficient\n\n% Hydraulic conductivity (K) examples:\n% 1) a single value for all CEs\nStructFinal.parametres.pompage.conductiviteHydraulique_s = 1; % m/day\n\n% 2) a value for each CE, the index indicates the idCE [1 x numCE]\nnumCE = numel(StructFinal.bassinVersant.carreauxEntiers);\nStructFinal.parametres.pompage.conductiviteHydraulique_s = ones(1, numCE); % m/day\n</code></pre>"},{"location":"guide/#theory-and-equation","title":"Theory and Equation","text":"<p>To take into account the wells distance from the river, the radius of influence is calculated for each well during pumping. The following variables and units are used:</p> <ul> <li>Pumped discharge: $Q_i$ [m$^3$/day]</li> <li>Hydraulic conductivity: $K$ [m/day]</li> <li>Initial head in the pumping well: $h_0$ [m]</li> <li>Hydraulic gradient: $\\beta$</li> <li>Radius of influence: $r_0$ [m]</li> </ul> <p>$$r_{o} = \\frac{Q_{i}}{2\\pi Kh_{0}\\beta}$$</p> <p>The hydraulic gradient ($\\beta$) is approximated as the mean surface slope of the whole square.</p> <p>To adjust the volume of water removed from the reservoir, <code>coeffPompage</code> ($\\gamma$) is used:</p> <p>$$Q_{extracted} = Q_{i} \\times (1 - e^{- \\gamma r_{o}})$$</p>"},{"location":"guide/#pumping-code","title":"Pumping Code","text":"<p>The core logic for handling well (<code>Puits</code>) data and pumping calculations can be found primarily within the <code>src/Puits.cpp</code> source file, interacting with the main simulation loop.</p>"},{"location":"guide/#shading","title":"Shading","text":""},{"location":"guide/#overview_1","title":"Overview","text":"<p>There are two algorithms used to take into account the effects of shading from trees. To activate and choose the algorithm, the struct.parametres.option.moduleOmbrage option is used:</p> <ul> <li> <p>moduleOmbrage = 0: No shading algorithm is used.</p> </li> <li> <p>moduleOmbrage = 1: Shading algorithm based on tree height is used.</p> </li> <li> <p>moduleOmbrage = 2: Shading algorithm based on leaf area index (LAI)     is used.</p> </li> </ul>"},{"location":"guide/#tree-height-shading-algorithm","title":"Tree Height Shading Algorithm","text":""},{"location":"guide/#usage_1","title":"Usage","text":"<ul> <li> <p>Set <code>moduleOmbrage = 1</code></p> </li> <li> <p>Add average tree height for each CP:     <code>struct.bassinVersant.carreauxPartiels.hautMoyenneArbre</code></p> </li> </ul> <p>The following example shows the average tree height for each CP being set to 12 meters.</p> <pre><code>structSMA.parametres.option.moduleOmbrage = 1;\n\n% Assuming structSMA.bassinVersant.carreauxPartiels is already populated\n% Set average tree height to 12m for all CPs\n[structSMA.bassinVersant.carreauxPartiels(1:end).hautMoyenneArbre] = deal(12);\n\n% Example function call (assuming other structs are defined)\n[structSMA.etatsCE, structSMA.etatsCP, structSMA.etatsFonte, structSMA.etatsEvapo, structSMA.etatsBarrage, ...\n structSMA.pasDeTemps, structSMA.avantAssimilationsCE, structSMA.avantAssimilationsFonte, ...\n structSMA.avantAssimilationsEvapo, structSMA.etatsQualCP, structSMA.avAssimQual] = ...\n    cequeauQuantiteMex(structSMA.execution, structSMA.parametres, ...\n                       structSMA.bassinVersant, structSMA.meteoPointGrille, ...\n                       [], [], [], []); % Assuming no initial states, etc.\n</code></pre>"},{"location":"guide/#algorithm","title":"Algorithm","text":"<p>The following is calculated for each partial square (CP)</p> <ol> <li> <p>Extract data: latitude, longitude, river width, orientation of the     river, tree height, and date.</p> </li> <li> <p>Calculate solar position using SPA algorithm (NREL's Solar Position     Algorithm for Solar Radiations     Applications)</p> </li> <li> <p>Difference between the sun's orientation and the river's orientation</p> </li> </ol> <p>$$\\theta = sun^{'}s\\ azimuth\\ angle\\ (rad) - river^{'}s\\ azimuth\\ angle\\ (rad)$$</p> <ol> <li>Calculate average shadow length based on average tree height</li> </ol> <p>$$\\omega = average\\ shadow\\ length$$</p> <p>$$\\tau = average\\ tree\\ height$$</p> <p>$$\\varphi = solar\\ altitude$$</p> <p>$$\\omega = \\frac{\\tau}{\\tan(\\varphi)}$$</p> <ol> <li>Calculate average shadow length perpendicular to the river</li> </ol> <p>$$\\mu = average\\ perpendicular\\ shadow\\ length\\ $$</p> <p>$$\\mu = sin(\\theta) \\bullet \\omega$$</p> <ol> <li>Shadow ratio covering the river</li> </ol> <p>$$\\rho = shade\\ ratio$$</p> <p>$$\\rho = \\ \\frac{\\mu}{river\\ width}$$</p>"},{"location":"guide/#lai-shading-algorithm","title":"LAI Shading Algorithm","text":""},{"location":"guide/#usage_2","title":"Usage","text":"<ul> <li> <p>Set <code>moduleOmbrage = 2</code></p> </li> <li> <p>Obtain LAI data</p> <ul> <li>Data should be in the same format as weather data: [timesteps x     CE]</li> </ul> </li> <li> <p>Normalize LAI data using the provided normalize_lai MATLAB function</p> </li> <li> <p>Add normalized data into the struct:     <code>struct.meteoPointGrille.lai_norm</code></p> </li> </ul> <pre><code>% normalize LAI values based on given percentile\npercentile = 75;\nstructSMA.meteoPointGrille.lai_norm = normalize_lai(lai_data,\npercentile);\n\nstructSMA.parametres.option.moduleOmbrage = 2;\n\n[structSMA.etatsCE, structSMA.etatsCP, structSMA.etatsFonte, structSMA.etatsEvapo, structSMA.etatsBarrage,\nstructSMA.pasDeTemps,...\nstructSMA.avantAssimilationsCE, structSMA.avantAssimilationsFonte,\nstructSMA.avantAssimilationsEvapo,structSMA.etatsQualCP, structSMA.avAssimQual] = ...\ncequeauQuantiteMex(structSMA.execution, structSMA.parametres,\nstructSMA.bassinVersant, ...\nstructSMA.meteoPointGrille, [], [], [], []);\n</code></pre>"},{"location":"guide/#algorithm_1","title":"Algorithm","text":"<ol> <li> <p>LAI data is normalized in a range from 0 to 1, based on a given     percentile value.</p> </li> <li> <p>The normalized LAI value is used to scale crayso     (<code>struct.parametres.qualite.cequeau.temperat.crayso</code>)</p> </li> <li> <p>The scaled crayso value is used to calculate solar radiation.</p> </li> </ol>"},{"location":"guide/#code","title":"Code","text":"<pre><code>// Example C++ logic snippet (illustrative)\ndouble normalized_lai = meteoPointGrille.lai_norm[i]; // Get normalized LAI for timestep i\n\n// Reduce the maximum effect to avoid excessive reduction\nif (normalized_lai &gt; 0.8) {\n    normalized_lai = 0.8;\n}\n\n// Scale the solar radiation coefficient\ndouble original_crayso = parametres.qualite.cequeau.temperat.crayso;\ndouble scaled_crayso = original_crayso * (1.0 - normalized_lai);\n\n// ... use scaled_crayso in subsequent solar radiation calculations ...\n</code></pre> <p>The normalized LAI value is reduced to a maximum of 0.8 to prevent the <code>scaled_crayso</code> to be reduced to less than 0. The <code>scaled_crayso</code> is then used to calculate the solar radiation.</p>"},{"location":"guide/#qualite-time-steps","title":"Qualite Time Steps","text":""},{"location":"guide/#overview_2","title":"Overview","text":"<p>To use sub-daily time steps with the Cequeau Qualite module, the ipassim variable in the input struct's option must be modified. The value can be set to 1, 2, 3, 4, 6, 8, 12, and 24 (daily). This will change the time steps for both the Quantite and Qualite module.</p> <p>InputStruct.parametres.option.ipassim = 12;</p> <p>Note: data assimilation is only available for daily time steps.</p> <p>The calculQualite option must also be enabled to use the Qualite module.</p> <p>InputStruct.parametres.option.calculQualite = 1;</p> <p>It is also important to match simulated date range (Struct.execution.dateDebut and Struct.execution.dateFin) to align with the number of data points in the input structures, such as for meteorological data and dam (barrage) data.</p>"},{"location":"guide/#example-usage","title":"Example Usage:","text":"<p>The file <code>cequeau/run/runCequeau_Qualite.m</code> demonstrates examples.</p> <p>For now, testing file is linearly interpolating the input data (<code>processInput.m</code>) to match the number of data points to test the sub-daily water temperature model.</p> <pre><code>% Example from testing script\n\n% every 12 hours\nInputStruct12 = processInput(InputStruct, indices, dateDebut, dateFin, 12);\n\n[y12.etatsCE, y12.etatsCP, y12.etatsFonte, y12.etatsEvapo, ...\n y12.etatsBarrage, y12.pasDeTemps,...\n y12.avantAssimilationsCE, y12.avantAssimilationsFonte, ...\n y12.avantAssimilationsEvapo, y12.etatsQualCP, y12.avAssimQual] = ...\n    cequeauQuantiteMex_test(InputStruct12.execution, ...\n                          InputStruct12.parametres, ...\n                          InputStruct12.bassinVersant, ...\n                          InputStruct12.meteoPointGrille, ...\n                          [], [], [], []);\n</code></pre> <p>The same process was used to also simulate using a time step of 6. The following graphs demonstrate the results compared to actual water temperature from stations.</p> <p></p> <p></p>"},{"location":"inputs_outputs/","title":"CEQUEAU MEX Function Inputs and Outputs","text":"<p>Warning</p> <p>THIS DOCUMENTATION IS OUTDATED AND NEEDS CAREFUL REVISION</p>"},{"location":"inputs_outputs/#cequeauquantitemex","title":"<code>CequeauQuantiteMex</code>","text":"<p>This is the main function for running CEQUEAU streamflow and river temperature simulations.</p> <p>Version Note</p> <p>Starting from version 4.x.x, the <code>cequeauQuantiteMex</code> mexfile is used for both streamflow (quantity) and river temperature (quality) simulations. - If <code>parametres.option.calculQualite = 0</code>, only the streamflow simulation is executed. - If <code>parametres.option.calculQualite = 1</code>, the streamflow simulation is executed first, followed by the river temperature simulation.</p>"},{"location":"inputs_outputs/#usage","title":"Usage","text":"<pre><code>[etatsCE, etatsCP, etatsFonte, etatsEvapo, etatsBarrage, pasDeTemps, ...\n avantAssimilationsCE, avantAssimilationsFonte, avantAssimilationsEvapo, ...\n etatsQualCP, avAssimQual] = ...\n    CequeauQuantiteMex(execution, parametres, bassinVersant, meteo, ...\n                       etatsPrecedents, assimilations, stations);\n</code></pre> <p>Note</p> <ul> <li>The <code>stations</code> input was added in v5.0.0.</li> <li>If you do not wish to use <code>etatsPrecedents</code>, <code>assimilations</code>, or <code>stations</code>, provide an empty array (<code>[]</code>) for that input.</li> </ul>"},{"location":"inputs_outputs/#inputs-intrants","title":"Inputs (<code>Intrants</code>)","text":"<p>The required input variables are detailed below.</p>"},{"location":"inputs_outputs/#1-execution-struct","title":"1. <code>execution</code> (<code>struct</code>)","text":"<p>Defines the simulation period and optional output filtering.</p> <ul> <li><code>dateDebut</code>: <code>double</code> - Start date of the simulation (Matlab <code>datenum</code> format).</li> <li><code>dateFin</code>: <code>double</code> - End date of the simulation (Matlab <code>datenum</code> format).</li> <li><code>resultatsIdCE</code> (Optional): <code>[1 x N double]</code> - List of Whole Cell (CE) IDs for which outputs are desired in the <code>etatsCE</code> variable. If omitted, all CEs are output.</li> <li><code>resultatsIdCP</code> (Optional): <code>[1 x M double]</code> - List of Partial Cell (CP) IDs for which outputs are desired in the <code>etatsCP</code> variable. If omitted, all CPs are output.</li> </ul>"},{"location":"inputs_outputs/#2-parametres-struct","title":"2. <code>parametres</code> (<code>struct</code>)","text":"<p>Contains all model parameters. All fields are mandatory. Refer to the main Cequeau User Guide for the physical meaning of these parameters.</p> <pre><code>parametres:\n  .option      % [1x1 struct] General simulation options\n  .sol         % [1x1 struct] Soil parameters\n  .solInitial  % [1x1 struct] Initial soil states\n  .transfert   % [1x1 struct] Transfer parameters\n  .ctp         % [1 x nbCP double] or 0 - CTP parameters (?)\n  .lac         % [1 x nbCP double] or 0 - Lake parameters (?)\n  .surface     % [1 x nbCP double] or 0 - Surface parameters (?)\n  .fonte       % [1x1 struct] Snowmelt module parameters\n  .evapo       % [1x1 struct] Evapotranspiration module parameters\n  .qualite     % [1x1 struct] Water quality (temperature) module parameters\n  .pompage     % [1x1 struct] Pumping module parameters\n  .dli         % [1x1 struct] Downwelling Longwave Irradiation (DLI) parameters\n</code></pre> <p>CTP, Lac, Surface Parameters</p> <p>The original documentation for <code>parametres.ctp</code>, <code>parametres.lac</code>, and <code>parametres.surface</code> does not explicitly define CTP or how these parameters are used. They can be set to <code>0</code> if not used, otherwise, values must be provided for all Partial Cells (CPs).</p>"},{"location":"inputs_outputs/#parametresoption-struct","title":"<code>parametres.option</code> (<code>struct</code>)","text":"<ul> <li><code>ipassim</code>: <code>double</code> - Assimilation time step divisor (e.g., 1 for daily, 12 for 12-hourly). See Quality Time Steps in the User Guide.</li> <li><code>moduleFonte</code>: <code>double</code> - Snowmelt model selection (1 = <code>cequeau</code>, 2 = <code>cemaNeige</code>, 3 = <code>ueb</code>, etc.).</li> <li><code>moduleEvapo</code>: <code>double</code> - Evapotranspiration model selection (1 = <code>cequeau</code>, others...). Needs clarification.</li> <li><code>calculQualite</code>: <code>double</code> - Enable water quality simulation (0 = quantity only, 1 = quantity and quality).</li> <li><code>modulePompage</code>: <code>double</code> - Enable pumping module (0 = off, 1 = on).</li> <li><code>moduleDLI</code>: <code>double</code> - Downwelling Longwave Irradiation model selection (0 to 10).</li> <li><code>moduleOmbrage</code>: <code>double</code> - Shading model selection (0 = no shading, 1 = tree height based, 2 = LAI based).</li> </ul>"},{"location":"inputs_outputs/#parametressol-struct","title":"<code>parametres.sol</code> (<code>struct</code>)","text":"<p>Spatially Variable Parameters (<code>_s</code> suffix)</p> <p>Parameters ending with <code>_s</code> can be spatially variable. You can provide either: 1.  A single <code>double</code> value: Applied uniformly to all Whole Cells (CEs). 2.  A <code>[1 x nbCE double]</code> array: A specific value for each Whole Cell. If an array is provided but its size does not match <code>nbCE</code>, only the first value is used and applied uniformly.</p> <ul> <li><code>cin_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>cvmar</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>cvnb_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>cvnh_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>cvsb</code>: <code>double</code></li> <li><code>cvsi_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>xinfma</code>: <code>double</code></li> <li><code>hinf_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>hint_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>hmar</code>: <code>double</code></li> <li><code>hnap_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>hpot_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>hsol_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>hrimp_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>tri_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>xla</code>: <code>double</code></li> </ul>"},{"location":"inputs_outputs/#parametressolinitial-struct","title":"<code>parametres.solInitial</code> (<code>struct</code>)","text":"<p>Note: These values are not used if initial states are loaded via the <code>etatsPrecedents</code> input.</p> <ul> <li><code>hsini</code>: <code>double</code></li> <li><code>hnini</code>: <code>double</code></li> <li><code>hmini</code>: <code>double</code></li> <li><code>q0</code>: <code>double</code></li> </ul>"},{"location":"inputs_outputs/#parametrestransfert-struct","title":"<code>parametres.transfert</code> (<code>struct</code>)","text":"<ul> <li><code>exxkt</code>: <code>double</code></li> <li><code>zn</code>: <code>double</code></li> </ul>"},{"location":"inputs_outputs/#parametresctp-parametreslac-parametressurface","title":"<code>parametres.ctp</code>, <code>parametres.lac</code>, <code>parametres.surface</code>","text":"<ul> <li>Each is <code>0</code> or <code>[1 x nbCP double]</code>. (See note above regarding their definition).</li> <li>If set to <code>0</code>, the feature is not used. If an array is provided, values must be specified for all Partial Cells (use 0 for CPs where the parameter is not applicable or should be ignored).</li> </ul>"},{"location":"inputs_outputs/#parametresfonte-struct","title":"<code>parametres.fonte</code> (<code>struct</code>)","text":"<p>Contains parameters specific to the selected snowmelt model (<code>moduleFonte</code>). Parameters for each model are nested under a field matching the model name (e.g., <code>parametres.fonte.cequeau</code>).</p>"},{"location":"inputs_outputs/#parametresfontecequeau-struct","title":"<code>parametres.fonte.cequeau</code> (<code>struct</code>)","text":"<p>(Spatially variable parameters (<code>_s</code>) follow the same rules as in <code>parametres.sol</code>)</p> <ul> <li><code>strne_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>tfc_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>tfd_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>tsc_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>tsd_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>ttd</code>: <code>double</code></li> <li><code>tts_s</code>: <code>double</code> or <code>[1 x nbCE double]</code></li> <li><code>jonei</code>: <code>double</code></li> <li><code>tmur</code>: <code>double</code></li> <li><code>tstock</code>: <code>double</code></li> </ul>"},{"location":"inputs_outputs/#parametresevapo-struct","title":"<code>parametres.evapo</code> (<code>struct</code>)","text":"<p>Contains parameters specific to the selected evapotranspiration model (<code>moduleEvapo</code>). Parameters are nested (e.g., <code>parametres.evapo.cequeau</code>).</p>"},{"location":"inputs_outputs/#parametresevapocequeau-struct","title":"<code>parametres.evapo.cequeau</code> (<code>struct</code>)","text":"<ul> <li><code>joeva</code>: <code>double</code></li> <li><code>evnap</code>: <code>double</code></li> <li><code>xaa</code>: <code>double</code></li> <li><code>xit</code>: <code>double</code></li> </ul>"},{"location":"inputs_outputs/#parametresqualite-struct","title":"<code>parametres.qualite</code> (<code>struct</code>)","text":"<p>Parameters specific to the water quality (temperature) simulation.</p>"},{"location":"inputs_outputs/#parametresqualitecequeau-struct","title":"<code>parametres.qualite.cequeau</code> (<code>struct</code>)","text":"<p>See Cequeau Guide</p> <p>Refer to the main Cequeau guide for the physical meaning of quality parameters.</p> <ul> <li><code>paramode</code>: <code>[1 x 1 struct]</code> - Used to determine desired quality simulation types. Currently unused as only temperature is simulated.</li> <li><code>coprom</code>: <code>double</code></li> <li><code>colarg</code>: <code>double</code></li> <li><code>temperat</code>: <code>[1 x 1 struct]</code></li> </ul>"},{"location":"inputs_outputs/#parametresqualitecequeautemperat-struct","title":"<code>parametres.qualite.cequeau.temperat</code> (<code>struct</code>)","text":"<ul> <li><code>crayso</code>: <code>double</code></li> <li><code>crayin</code>: <code>double</code></li> <li><code>cevapo</code>: <code>double</code></li> <li><code>cconve</code>: <code>double</code></li> <li><code>crigel</code>: <code>double</code></li> <li><code>tnap</code>: <code>double</code></li> <li><code>panap</code>: <code>double</code></li> <li><code>tinit</code>: <code>double</code></li> <li><code>bassol</code>: <code>double</code></li> <li><code>corsol</code>: <code>double</code></li> <li><code>radiasol</code>: <code>[1 x 12 double]</code></li> <li><code>nebulosi</code>: <code>[1 x 12 double]</code></li> <li><code>pressvap</code>: <code>[1 x 12 double]</code></li> <li><code>vitesven</code>: <code>[1 x 12 double]</code></li> </ul>"},{"location":"inputs_outputs/#parametresdli-struct","title":"<code>parametres.dli</code> (<code>struct</code>)","text":"<p>Contains parameters for calculating Downwelling Longwave Irradiation (DLI) based on the selected <code>moduleDLI</code>.</p> <ul> <li><code>m1</code>: <code>[1 x 1 struct]</code> (Parameters for model 1)</li> <li><code>m2</code>: <code>[1 x 1 struct]</code> (Parameters for model 2)</li> <li>... (up to <code>m9</code>)</li> </ul>"},{"location":"inputs_outputs/#parametrespompage-struct","title":"<code>parametres.pompage</code> (<code>struct</code>)","text":"<p>Parameters for the groundwater pumping module.</p> <ul> <li><code>delai</code>: <code>double</code> - Delay (in time steps) for the pumping effect.</li> <li><code>conductiviteHydraulique_s</code>: <code>double</code> or <code>[1 x nbCE double]</code> - Hydraulic conductivity (K). Spatially variable (<code>_s</code>).</li> <li><code>coeffPompage</code>: <code>double</code> - Pumping coefficient used to adjust extracted water (for calibration).</li> </ul>"},{"location":"inputs_outputs/#3-bassinversant-struct","title":"3. <code>bassinVersant</code> (<code>struct</code>)","text":"<p>Contains the watershed definition based on prepared physiographic data.</p> <ul> <li><code>nbCpCheminLong</code>: <code>double</code> - Number of CPs in the longest path (? - Needs clarification).</li> <li><code>superficieCE</code>: <code>double</code> - Area of a Whole Cell.</li> <li><code>nomBassinVersant</code>: <code>string</code> - Name of the watershed.</li> <li><code>carreauxEntiers</code>: <code>[1 x nbCE struct]</code> - Structure array for Whole Cells.</li> <li><code>carreauxPartiels</code>: <code>[1 x nbCP struct]</code> - Structure array for Partial Cells.</li> <li><code>barrage</code> (Optional): <code>[1 x nbBarrages struct]</code> - Structure array for dams/reservoirs.</li> <li><code>puits</code>: <code>[1 x nbPuits struct]</code> - Structure array for wells.</li> </ul>"},{"location":"inputs_outputs/#bassinversantcarreauxentiers-struct-array-field","title":"<code>bassinVersant.carreauxEntiers</code> (<code>struct</code> array field)","text":"<ul> <li><code>i</code>: <code>double</code> - Grid column index.</li> <li><code>j</code>: <code>double</code> - Grid row index.</li> <li><code>pctLacRiviere</code>: <code>double</code> - Percentage of lakes/rivers.</li> <li><code>pctForet</code>: <code>double</code> - Percentage of forest.</li> <li><code>pctMarais</code>: <code>double</code> - Percentage of marshland.</li> <li><code>altitude</code>: <code>double</code> - Altitude.</li> <li><code>Latitude</code>: <code>double</code> - Latitude.</li> <li><code>Longitude</code>: <code>double</code> - Longitude.</li> <li><code>meanSlope</code>: <code>double</code> - Mean slope.</li> </ul>"},{"location":"inputs_outputs/#bassinversantcarreauxpartiels-struct-array-field","title":"<code>bassinVersant.carreauxPartiels</code> (<code>struct</code> array field)","text":"<ul> <li><code>i</code>: <code>double</code> - Grid column index.</li> <li><code>j</code>: <code>double</code> - Grid row index.</li> <li><code>code</code>: <code>double</code> - ASCII code (A, B, C, or D).</li> <li><code>pctSurface</code>: <code>double</code> - Percentage of surface area.</li> <li><code>idCPAval</code>: <code>double</code> - ID of the downstream Partial Cell.</li> <li><code>idCPsAmont</code>: <code>[1 x 5 double]</code> - IDs of upstream Partial Cells.</li> <li><code>idCE</code>: <code>double</code> - ID of the corresponding Whole Cell.</li> <li><code>pctEau</code>: <code>double</code> - Percentage of water.</li> <li><code>pctForet</code>: <code>double</code> - Percentage of forest.</li> <li><code>pctMarais</code>: <code>double</code> - Percentage of marshland.</li> <li><code>pctSolNu</code>: <code>double</code> - Percentage of bare soil.</li> <li><code>altitudeMoy</code>: <code>double</code> - Mean altitude.</li> <li><code>profondeurMin</code>: <code>double</code> - Minimum depth (? - Needs clarification).</li> <li><code>longueurCoursEauPrincipal</code>: <code>double</code> - Length of the main watercourse.</li> <li><code>largeurCoursEauPrincipal</code>: <code>double</code> - Width of the main watercourse.</li> <li><code>penteRiviere</code>: <code>double</code> - River slope.</li> <li><code>cumulPctSuperficieCPAmont</code>: <code>double</code> - Cumulative upstream CP area percentage.</li> <li><code>cumulPctSuperficieLacsAmont</code>: <code>double</code> - Cumulative upstream lake area percentage.</li> <li><code>cumulPctSuperficieMaraisAmont</code>: <code>double</code> - Cumulative upstream marsh area percentage.</li> <li><code>cumulPctSuperficieForetAmont</code>: <code>double</code> - Cumulative upstream forest area percentage.</li> <li><code>lat</code>: <code>double</code> - Latitude.</li> <li><code>lon</code>: <code>double</code> - Longitude.</li> <li><code>hautMoyenneArbre</code>: <code>double</code> - Average tree height (used for shading module 1).</li> <li><code>azimutCoursEau</code>: <code>double</code> - Azimuth of the watercourse.</li> </ul>"},{"location":"inputs_outputs/#bassinversantbarrage-struct-array-field","title":"<code>bassinVersant.barrage</code> (<code>struct</code> array field)","text":"<p>Structure varies by dam type.</p> <ul> <li>Type 2:<ul> <li><code>idCP</code>: <code>double</code></li> <li><code>idCPAval</code>: <code>double</code></li> <li><code>type</code>: 2</li> <li><code>volumeInitial</code>: <code>double</code></li> <li><code>niveau</code>: <code>[1 x 7 double]</code></li> <li><code>debit</code>: <code>[1 x 7 double]</code></li> </ul> </li> <li>Type 3:<ul> <li>External dam whose outflows enter a CP within the watershed; outflows are known.</li> <li>Uses the same structure as Type 2, but only the bold fields are required. Other fields can be set to 0.</li> <li><code>idCP</code>: <code>double</code></li> <li><code>idCPAval</code>: <code>double</code></li> <li><code>type</code>: 3</li> <li><code>volumeInitial</code>: <code>double</code></li> <li><code>niveau</code>: <code>[1 x 7 double]</code></li> <li><code>debit</code>: <code>[1 x nbPasDeTemps double]</code> - Known outflow for each time step.</li> </ul> </li> <li>Type 5:<ul> <li><code>idCP</code>: <code>double</code></li> <li><code>idCPAval</code>: <code>double</code></li> <li><code>type</code>: 5</li> <li><code>volumeInitial</code>: <code>double</code></li> <li><code>niveau</code>: <code>[1 x 7 double]</code></li> <li><code>volume</code>: <code>[1 x 7 double]</code></li> <li><code>debitsInterne</code>: <code>[nb internal rules x 7 double]</code></li> <li><code>debitsExterne</code>: <code>[1 x nb external rules struct]</code><ul> <li><code>dateDebut</code>: <code>double</code> (YYYYMMDD format)</li> <li><code>dateFin</code>: <code>double</code> (YYYYMMDD format)</li> <li><code>parametres</code>: <code>[1 x 7 double]</code></li> </ul> </li> </ul> </li> <li>Type 10:<ul> <li>New type (not in original Cequeau) where outflow depends on gate opening and level.</li> <li>Note: Calculations are specific to RTA structures. Use only in an RTA context.</li> <li><code>idCP</code>: <code>double</code></li> <li><code>idCPAval</code>: <code>double</code></li> <li><code>type</code>: 10</li> <li><code>volumeInitial</code>: <code>double</code></li> <li><code>ouverture</code>: <code>[1 x nbPasDeTemps double]</code> - Gate opening at each time step.</li> </ul> </li> </ul>"},{"location":"inputs_outputs/#bassinversantpuits-struct-array-field","title":"<code>bassinVersant.puits</code> (<code>struct</code> array field)","text":"<ul> <li><code>idCE</code>: <code>double</code> - ID of the corresponding Whole Cell.</li> <li><code>distanceRiviere</code>: <code>double</code> - Distance from the well to the river (m).</li> <li><code>debitPompage</code>: <code>[nbPasDeTemps x 1 double]</code> - Pumping rate (m\u00b3/day) for each time step.</li> <li><code>niveauxPuits</code>: <code>[nbPasDeTemps x 1 double]</code> - Water level in the well (m) for each time step.</li> <li><code>h0</code>: <code>double</code> - Initial water level in the well (m).</li> <li><code>active</code>: <code>double</code> - Well status (0 = inactive, 1 = active).</li> </ul>"},{"location":"inputs_outputs/#4-meteo-struct","title":"4. <code>meteo</code> (<code>struct</code>)","text":"<p>Meteorological data for the simulation period. Data for each time step must be ordered consistently with the Whole Cells (<code>carreauxEntiers</code>).</p> <ul> <li><code>tMin</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Minimum temperature.</li> <li><code>tMax</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Maximum temperature.</li> <li><code>pTot</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Total precipitation.</li> <li><code>pluie</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Rainfall.</li> <li><code>neige</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Snowfall.</li> <li><code>rayonnement</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Radiation.</li> <li><code>nebulosite</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Cloud cover.</li> <li><code>pression</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Pressure.</li> <li><code>vitesseVent</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Wind speed.</li> <li><code>t</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Temperature (average?).</li> <li><code>lai</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Leaf Area Index.</li> <li><code>lai_norm</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Normalized LAI.</li> <li><code>dli</code>: <code>[nbPasDeTemps x nbCE double or single]</code> - Downwelling Longwave Irradiation.</li> </ul> <p>Data Types</p> <p>Meteorological data can be provided as <code>double</code> or <code>single</code>, but all fields must use the same type.</p>"},{"location":"inputs_outputs/#5-etatsprecedents-struct-optional","title":"5. <code>etatsPrecedents</code> (<code>struct</code>, Optional)","text":"<p>Allows initializing a simulation with the final states from a previous run. If provided, <code>parametres.solInitial</code> values are ignored.</p> <ul> <li><code>quantite</code>: (<code>struct</code>)<ul> <li><code>etatsCE</code>: State structure for Whole Cells (typically <code>etatsCE(end)</code> from previous run).</li> <li><code>etatsCP</code>: State structure for Partial Cells (typically <code>etatsCP(end)</code> from previous run).</li> <li><code>etatsFonte</code>: Snowmelt states for Whole Cells (typically <code>etatsFonte(end)</code> from previous run).</li> <li><code>etatsEvapo</code>: Evapotranspiration states for Whole Cells (typically <code>etatsEvapo(end)</code> from previous run).</li> <li><code>etatsBarrage</code> (Optional): Dam states (typically <code>etatsBarrage(end)</code> from previous run).</li> </ul> </li> <li><code>qualite</code>: (<code>struct</code>)<ul> <li><code>etatsCP</code>: Water quality states for Partial Cells (typically <code>etatsQualCP(end)</code> from previous run).</li> </ul> </li> </ul> <p>Example initialization: <pre><code>etatsPrecedents.quantite.etatsCE = previous_etatsCE(end);\netatsPrecedents.quantite.etatsCP = previous_etatsCP(end);\netatsPrecedents.quantite.etatsFonte = previous_etatsFonte(end);\netatsPrecedents.quantite.etatsEvapo = previous_etatsEvapo(end);\n% if previous_etatsBarrage exists:\netatsPrecedents.quantite.etatsBarrage = previous_etatsBarrage(end);\n\n% if previous_etatsQualCP exists:\netatsPrecedents.qualite.etatsCP = previous_etatsQualCP(end);\n</code></pre></p>"},{"location":"inputs_outputs/#6-assimilations-struct-optional","title":"6. <code>assimilations</code> (<code>struct</code>, Optional)","text":"<p>Structure for applying data assimilation at specific time steps.</p> <ul> <li><code>quantite</code>: <code>[1 x nAssimSteps struct]</code> - Assimilation data for streamflow variables.<ul> <li><code>pasDeTemps</code>: <code>double</code> - Time step for this assimilation record (<code>datenum</code> format).</li> <li><code>etatsCE</code>: (<code>struct</code>, Optional) - Assimilation values for Whole Cell states. Provide <code>[]</code> if not assimilating CE states at this time step.</li> <li><code>etatsCP</code>: (<code>struct</code>, Optional) - Assimilation values for Partial Cell states. Provide <code>[]</code> if not assimilating CP states at this time step.</li> <li><code>etatsFonte</code>: (<code>struct</code>, Optional) - Assimilation values for snowmelt states. Provide <code>[]</code> if not assimilating snowmelt states at this time step.</li> <li><code>etatsEvapo</code>: (<code>struct</code>, Optional) - Assimilation values for evapotranspiration states. Provide <code>[]</code> if not assimilating ET states at this time step.</li> <li><code>etatsBarrage</code>: (<code>struct</code>, Optional) - Assimilation values for dam states. Provide <code>[]</code> if not assimilating dam states at this time step.</li> </ul> </li> <li><code>qualite</code>: <code>[1 x nAssimStepsQual struct]</code> - Assimilation data for quality variables.<ul> <li><code>pasDeTemps</code>: <code>double</code> - Time step for this assimilation record (<code>datenum</code> format).</li> <li><code>etatsCP</code>: (<code>struct</code>, Optional) - Assimilation values for Partial Cell quality states. Provide <code>[]</code> if not assimilating quality states at this time step.</li> </ul> </li> </ul>"},{"location":"inputs_outputs/#assimilation-state-structures-assimilationsquantiteetats-assimilationsqualiteetatscp","title":"Assimilation State Structures (<code>assimilations.quantite.etats*</code>, <code>assimilations.qualite.etatsCP</code>)","text":"<p>Each state structure (e.g., <code>etatsCE</code>, <code>etatsCP</code>) follows a pattern:</p> <ul> <li><code>id</code>: <code>[1 x nbAssimilations double]</code> - Array of cell/dam IDs to assimilate.</li> <li><code>variableName1</code>: <code>[1 x nbAssimilations double]</code> OR <code>[2 x nbAssimilations double]</code> - Values or factors for the first variable.</li> <li><code>variableName2</code>: <code>[1 x nbAssimilations double]</code> OR <code>[2 x nbAssimilations double]</code> - Values or factors for the second variable.</li> <li>... and so on for other variables within that state category (CE, CP, Fonte, Barrage, QualiteCP).</li> </ul> <p>Assimilation Value Formats:</p> <ol> <li>Direct Value: Provide a <code>[1 x nbAssimilations double]</code> array containing the absolute value to assimilate for each ID. Use <code>NaN</code> for specific IDs if no assimilation is desired for that variable/ID combination.</li> <li>Factor Format: Provide a <code>[2 x nbAssimilations double]</code> array:<ul> <li>Row 1: Multiplicative factors.</li> <li>Row 2: Additive factors. The assimilated value is calculated as: $Assimilated = Calculated   imes Factor_{mult} + Factor_{add}$.</li> <li>Both factors (rows) must be present for this format to be used for a variable.</li> <li>Use <code>NaN</code> in the first row (multiplicative factor) to skip assimilation for specific IDs.</li> </ul> </li> </ol> <p>Mixing Formats</p> <p>You can use the Direct Value format for some variables and the Factor Format for others within the same assimilation time step structure (e.g., use direct values for <code>niveauEauSol</code> and factors for <code>niveauEauNappe</code> in <code>etatsCE</code>), but you cannot mix formats within the same variable array.</p> <p>Specific Assimilation Variables:</p> <ul> <li><code>assimilations.quantite.etatsCE</code>:<ul> <li><code>id</code>: CE IDs.</li> <li><code>niveauEauSol</code>, <code>niveauEauNappe</code>, <code>niveauEauLacsMarais</code>, <code>evapoPotJour</code>, <code>production</code>.</li> </ul> </li> <li><code>assimilations.quantite.etatsCP</code>:<ul> <li><code>id</code>: CP IDs.</li> <li><code>apport</code>, <code>volume</code>, <code>debit</code>.</li> </ul> </li> <li><code>assimilations.quantite.etatsFonte</code> (Depends on <code>moduleFonte</code>, example for Cequeau):<ul> <li><code>id</code>: CE IDs.</li> <li><code>stockNeigeForet</code>, <code>stockNeigeClairiere</code>, <code>indexMurissementNeige</code>, <code>indexTempNeige</code>.</li> </ul> </li> <li><code>assimilations.quantite.etatsEvapo</code>:<ul> <li>Depends on <code>moduleEvapo</code>. (No states for Cequeau model).</li> </ul> </li> <li><code>assimilations.quantite.etatsBarrage</code>:<ul> <li><code>idCarreauPartiel</code>: CP IDs associated with dams.</li> <li><code>volume</code>, <code>niveau</code>.</li> </ul> </li> <li><code>assimilations.qualite.etatsCP</code>:<ul> <li><code>id</code>: CP IDs.</li> <li><code>temperature</code>.</li> </ul> </li> </ul>"},{"location":"inputs_outputs/#7-stations-struct","title":"7. <code>stations</code> (<code>struct</code>)","text":"<p>Information about meteorological stations, used for interpolation if applicable (though interpolation is typically done via <code>CequeauInterpolationMex</code>). Structure details likely match the <code>stations</code> input for the interpolation function (see below).</p>"},{"location":"inputs_outputs/#outputs-extrants","title":"Outputs (<code>Extrants</code>)","text":"<p>The function returns multiple structures containing simulation results for each time step.</p> <p>Log File</p> <p>An execution log file named <code>CequeauQuantite.log</code> may also be produced in the execution directory, depending on compilation options.</p>"},{"location":"inputs_outputs/#1-etatsce-1-x-nbpasdetemps-struct","title":"1. <code>etatsCE</code> <code>[1 x nbPasDeTemps struct]</code>","text":"<p>States for Whole Cells (or subset defined by <code>execution.resultatsIdCE</code>).</p> <ul> <li><code>id</code>: <code>[1 x nbCE double]</code></li> <li><code>iCarreauEntier</code>: <code>[1 x nbCE double]</code></li> <li><code>jCarreauEntier</code>: <code>[1 x nbCE double]</code></li> <li><code>niveauEauSol</code>: <code>[1 x nbCE double]</code> - Soil water level.</li> <li><code>niveauEauNappe</code>: <code>[1 x nbCE double]</code> - Groundwater level.</li> <li><code>niveauEauLacsMarais</code>: <code>[1 x nbCE double]</code> - Lake/marsh water level.</li> <li><code>evapoPotJour</code>: <code>[1 x nbCE double]</code> - Daily potential evapotranspiration.</li> <li><code>production</code>: <code>[1 x nbCE double]</code> - Water production.</li> </ul>"},{"location":"inputs_outputs/#2-etatscp-1-x-nbpasdetemps-struct","title":"2. <code>etatsCP</code> <code>[1 x nbPasDeTemps struct]</code>","text":"<p>States for Partial Cells (or subset defined by <code>execution.resultatsIdCP</code>).</p> <ul> <li><code>id</code>: <code>[1 x nbCP double]</code></li> <li><code>apport</code>: <code>[1 x nbCP double]</code> - Inflow.</li> <li><code>volume</code>: <code>[1 x nbCP double]</code> - Water volume.</li> <li><code>debit</code>: <code>[1 x nbCP double]</code> - Outflow discharge.</li> </ul>"},{"location":"inputs_outputs/#3-etatsfonte-1-x-nbpasdetemps-struct","title":"3. <code>etatsFonte</code> <code>[1 x nbPasDeTemps struct]</code>","text":"<p>Snowmelt states for Whole Cells. Structure depends on the selected <code>moduleFonte</code>.</p> <ul> <li>(For Cequeau model):<ul> <li><code>stockNeigeForet</code>: <code>[1 x nbCE double]</code> - Snowpack in forest.</li> <li><code>stockNeigeClairiere</code>: <code>[1 x nbCE double]</code> - Snowpack in open area.</li> <li><code>indexMurissementNeige</code>: <code>[1 x nbCE double]</code> - Snow ripening index.</li> <li><code>indexTempNeige</code>: <code>[1 x nbCE double]</code> - Snow temperature index.</li> </ul> </li> </ul>"},{"location":"inputs_outputs/#4-etatsevapo-1-x-nbpasdetemps-struct","title":"4. <code>etatsEvapo</code> <code>[1 x nbPasDeTemps struct]</code>","text":"<p>Evapotranspiration states for Whole Cells. Structure depends on the selected <code>moduleEvapo</code>.</p> <p>Note</p> <p>For the Cequeau ET model, the only state variable is <code>evapoPotJour</code>, which is already included in <code>etatsCE</code> for use by the quality module. This output structure might be empty or contain states for other ET models.</p>"},{"location":"inputs_outputs/#5-etatsbarrage-1-x-nbpasdetemps-struct","title":"5. <code>etatsBarrage</code> <code>[1 x nbPasDeTemps struct]</code>","text":"<p>States for dams/reservoirs.</p> <ul> <li><code>idCarreauPartiel</code>: <code>double</code></li> <li><code>volume</code>: <code>double</code></li> <li><code>niveau</code>: <code>double</code> - Water level.</li> <li><code>debitEntrant</code>: <code>double</code> - Inflow.</li> <li><code>debitsSortants</code>: <code>[1 x nbReglesEvacuation double]</code> - Outflows according to evacuation rules.</li> </ul>"},{"location":"inputs_outputs/#6-pasdetemps-nbpasdetemps-x-1-double","title":"6. <code>pasDeTemps</code> <code>[nbPasDeTemps x 1 double]</code>","text":"<p>Array containing the date/time at the end of each simulation time step (Matlab <code>datenum</code> format).</p>"},{"location":"inputs_outputs/#7-etatsqualitecp-1-x-nbpasdetemps-struct","title":"7. <code>etatsQualiteCP</code> <code>[1 x nbPasDeTemps struct]</code>","text":"<p>Water quality (temperature) states for Partial Cells. Contains an empty structure if quality simulation was not run (<code>parametres.option.calculQualite = 0</code>).</p> <ul> <li><code>id</code>: <code>[1 x nbCP double]</code> - Partial Cell ID.</li> <li><code>temperature</code>: <code>[1 x nbCP double]</code> - Water temperature in the CP.</li> <li><code>qruiss</code>: <code>[1 x nbCP double]</code></li> <li><code>qnappe</code>: <code>[1 x nbCP double]</code></li> <li><code>qhypo</code>: <code>[1 x nbCP double]</code></li> <li><code>qlacma</code>: <code>[1 x nbCP double]</code></li> <li><code>qradso</code>: <code>[1 x nbCP double]</code></li> <li><code>qradin</code>: <code>[1 x nbCP double]</code></li> <li><code>qevap</code>: <code>[1 x nbCP double]</code></li> <li><code>qconv</code>: <code>[1 x nbCP double]</code></li> </ul> <p>Quality Energy Fluxes</p> <p>The fields following <code>temperature</code> represent calculated values participating in the thermal balance: *   Advective Energy Inputs:     *   <code>qruiss</code>: Surface runoff.     *   <code>qnappe</code>: Groundwater inflow.     *   <code>qhypo</code>: Hypodermic (subsurface) runoff.     *   <code>qlacma</code>: Lake/marsh overflow. *   Surface Energy Exchanges:     *   <code>qradso</code>: Solar radiation.     *   <code>qradin</code>: Infrared radiation.     *   <code>qevap</code>: Evaporation.     *   <code>qconv</code>: Convection.</p>"},{"location":"inputs_outputs/#8-avantassimilations-struct","title":"8. <code>avantAssimilations*</code> (<code>struct</code>)","text":"<p>These outputs store the model states before assimilation was applied, but only for the time steps where assimilation occurred. They have the same structure as the corresponding <code>assimilations.*</code> input structures.</p> <ul> <li><code>avantAssimilationsCE</code>: Corresponds to <code>assimilations.quantite.etatsCE</code>.</li> <li><code>avantAssimilationsFonte</code>: Corresponds to <code>assimilations.quantite.etatsFonte</code>.</li> <li><code>avantAssimilationsEvapo</code>: Corresponds to <code>assimilations.quantite.etatsEvapo</code>.</li> <li><code>avAssimQual</code> (Note: Name differs slightly): Corresponds to <code>assimilations.qualite.etatsCP</code>.</li> </ul>"},{"location":"inputs_outputs/#cequeauinterpolationmex","title":"<code>CequeauInterpolationMex</code>","text":"<p>This function performs spatial interpolation of meteorological data from stations to the CEQUEAU grid cells.</p>"},{"location":"inputs_outputs/#usage_1","title":"Usage","text":"<pre><code>meteoInterpolee = CequeauInterpolationMex(execution, parametres, ...\n                                        bassinVersant, stations, meteoStations);\n</code></pre>"},{"location":"inputs_outputs/#inputs-intrants_1","title":"Inputs (<code>Intrants</code>)","text":"<p>Reused Input Structures</p> <p>Some input structures from the quantity simulation (<code>parametres</code>, <code>bassinVersant</code>) are reused here for convenience in this initial version of the interpolator. Although the full structures must be provided, only specific fields (detailed below) are actually used by the interpolation function.</p>"},{"location":"inputs_outputs/#1-execution-struct_1","title":"1. <code>execution</code> (<code>struct</code>)","text":"<p>Specifies the period for which data should be interpolated.</p> <ul> <li><code>dateDebut</code>: <code>double</code> - Start date for interpolation (<code>datenum</code> format).</li> <li><code>dateFin</code>: <code>double</code> - End date for interpolation (<code>datenum</code> format).</li> </ul>"},{"location":"inputs_outputs/#2-parametres-struct_1","title":"2. <code>parametres</code> (<code>struct</code>)","text":"<p>Contains interpolation parameters. All fields shown in the <code>CequeauQuantiteMex</code> section must be present, but only the <code>.interpolation</code> sub-structure is used.</p> <pre><code>parametres:\n  % --- Fields required but NOT USED by interpolation --- %\n  .option, .sol, .solInitial, .transfert, .ctp, .lac, .surface, .fonte, .evapo, .qualite, .pompage, .dli\n  % ---------------------------------------------------- %\n\n  .interpolation % [1x1 struct] Interpolation parameters (USED)\n</code></pre>"},{"location":"inputs_outputs/#parametresinterpolation-struct","title":"<code>parametres.interpolation</code> (<code>struct</code>)","text":"<ul> <li><code>type</code>: <code>double</code> - Interpolation method selection:<ul> <li>1: Thiessen polygons.</li> <li>3: Inverse distance weighting using the 3 nearest stations.</li> </ul> </li> <li><code>coep</code>: <code>double</code> - Annual precipitation correction coefficient based on altitude (mm/meter/year).</li> <li><code>coet</code>: <code>double</code> - Temperature correction coefficient based on altitude (\u00b0C / 1000 m).</li> </ul>"},{"location":"inputs_outputs/#3-bassinversant-struct_1","title":"3. <code>bassinVersant</code> (<code>struct</code>)","text":"<p>Watershed definition. Must contain the <code>carreauxEntiers</code> structure, which requires the <code>altitude</code> field for interpolation.</p> <ul> <li>See <code>bassinVersant</code> structure under <code>CequeauQuantiteMex</code> inputs.</li> <li>The essential field used here is <code>bassinVersant.carreauxEntiers.altitude</code>.</li> </ul>"},{"location":"inputs_outputs/#4-stations-1-x-nbstations-struct","title":"4. <code>stations</code> <code>[1 x nbStations struct]</code>","text":"<p>Information about the meteorological stations.</p> <ul> <li><code>id</code>: <code>char</code> - Station identifier.</li> <li><code>nom</code>: <code>char</code> - Station name (not used by the interpolator).</li> <li><code>i</code>: <code>double</code> - Station's x-coordinate (abscissa) in the watershed's \"I, J\" grid system.</li> <li><code>j</code>: <code>double</code> - Station's y-coordinate (ordinate) in the watershed's \"I, J\" grid system.</li> <li><code>tp</code>: <code>double</code> - Mean interannual precipitation at the station (mm).</li> <li><code>altitude</code>: <code>double</code> - Station altitude.</li> </ul>"},{"location":"inputs_outputs/#5-meteostations-struct","title":"5. <code>meteoStations</code> (<code>struct</code>)","text":"<p>Meteorological data recorded at the stations. Must contain fields corresponding to the variables being interpolated (e.g., <code>tMin</code>, <code>tMax</code>, <code>pTot</code>).</p> <ul> <li>Structure is the same as the <code>meteo</code> input for <code>CequeauQuantiteMex</code>, but dimensions are <code>[nbPasDeTemps x nbStations]</code> instead of <code>[nbPasDeTemps x nbCE]</code>.     Example: <code>tMin: [nbPasDeTemps x nbStations double or single]</code></li> </ul> <p>Station Order</p> <p>The order of stations in the <code>meteoStations</code> data arrays must match the order of stations in the <code>stations</code> input structure.</p>"},{"location":"inputs_outputs/#outputs-extrants_1","title":"Outputs (<code>Extrants</code>)","text":""},{"location":"inputs_outputs/#1-meteointerpolee-struct","title":"1. <code>meteoInterpolee</code> (<code>struct</code>)","text":"<p>The interpolated meteorological data on the CEQUEAU Whole Cell (CE) grid.</p> <ul> <li>This output structure has the same format as the <code>meteo</code> input for <code>CequeauQuantiteMex</code> (e.g., <code>tMin: [nbPasDeTemps x nbCE double]</code>).</li> </ul>"},{"location":"license/","title":"License","text":"<p>CEQUEAU is licensed under the MIT License.</p>"},{"location":"license/#summary-of-mit-license","title":"Summary of MIT License","text":"<ul> <li>Permissions: You can use, modify, distribute, and use CEQUEAU for commercial purposes.</li> <li>Conditions: You must include the original copyright notice and license text in all copies or substantial portions of the software.</li> <li>Limitations: The license provides no warranty or liability protection.</li> </ul>"},{"location":"license/#full-license-text","title":"Full License Text","text":"<p>The full text of the MIT License can be found in the LICENSE file in the root directory of this repository.</p>"},{"location":"license/#attribution-for-academic-use","title":"Attribution for Academic Use","text":"<p>If you use CEQUEAU in academic work, please cite the project as follows:</p> <pre><code>Eisinhower Rincon (2025). CEQUEAU\nGitHub repository: https://github.com/erinconv/CEQUEAU\n</code></pre>"},{"location":"octave_notes/","title":"Octave notes","text":""},{"location":"octave_notes/#octave-installations","title":"Octave Installations","text":"<p>The latest version of Octave can be downloaded from: https://octave.org/download</p> <p>The link to download specific versions is at the bottom of the page (https://mirror2.evolution-host.com/gnu/octave/windows/)</p> <p>Cequeau was tested with version 9.1.0 and it should work with newer versions.</p>"},{"location":"octave_notes/#launching-and-using-octave-gui","title":"Launching and Using Octave GUI","text":"<p>Launch GNU Octave GUI to launch the graphical user interface application. As shown below, it is similar to Matlab. To run files, you need to navigate to the appropriate directory.</p> <p></p> <p>The Cequeau Mex program needs to be compiled using Octave for it to be used as a program using Octave. <code>Cequeau/src/</code> contains all of the source files as well as the compilation files for both Matlab (<code>compileCequeauMat.m</code>) and Octave (<code>compileCequeauOct.m</code>).</p> <p></p> <p>The command statement using <code>mkoctfile</code> is the line used to compile the octave mex program. The path <code>\"../mex/cequeauQuantiteOct\"</code> path indicates where to place the mex program and what to name it (<code>cequeauQuantiteOct</code>). Running the file using the green run button at the top will place <code>cequeauQuantiteOct.mex</code> in the <code>mex</code> directory within Cequeau/. This file is portable and can be placed wherever the program needs to be run.</p>"},{"location":"octave_notes/#octave-and-matlab-compatibility","title":"Octave and Matlab Compatibility","text":"<p>Octave syntax is mostly compatible with Matlab, therefore the files can be used with both languages. However, the cequeau program (Octave .mex or Matlab .mexw64) needs to be called from the appropriate program.</p> <p>There are some features that are not fully compatible or need an Octave workaround.</p>"},{"location":"octave_notes/#mat-files","title":".mat files","text":"<p>As of version 9.3.0, Octave does not support saving in Matlab's v7.3 binary format. If files may be used by both Matlab and Octave, it is recommended to save them as v7 using <code>--v7</code> argument.</p> <pre><code>save('myfile.mat', 'myfile', '-v7')\n</code></pre>"},{"location":"octave_notes/#datetime","title":"datetime","text":"<p>Octave does not support Matlab's <code>datetime</code>, therefore it is recommended to use <code>datenum</code> instead.</p> <p>In Octave, to view a date in string format, the <code>datestr()</code> function can be used.</p> <p>When plotting, simply use <code>datenum</code>, and use <code>datetick</code> function as shown below:</p> <pre><code>figure;\nhold on;\n\n% Plotting without pumping\nplot(dates.sim, yNiveauEauNappe(2:end), 'b-', 'LineWidth', 1.5); % Blue line\n\n% Plotting with pumping avec recharge and based on area of influence\nplot(dates.sim, ypAvecR_aire_NiveauEauNappe(2:end), 'k:', 'LineWidth', 1.5);\n\n% Add labels and title\nxlabel('Date');\nylabel('NiveauEauNappe');\ntitle('NiveauEauNappe idCE 51');\nlegend('Without Pumping', 'With Pumping area influence (avec R)');\n\n% Improve date formatting on x-axis\ndatetick('x', 'yyyy-mm-dd', 'keepticks'); % use datetick\ngrid on;\nhold off;\n</code></pre> <p>For a complete overview of all timing functions: https://wiki.octave.org/Date/Time_functions</p>"},{"location":"api/bassin_versant/","title":"BassinVersant Class","text":"<p>The <code>BassinVersant</code> class represents the entire watershed in the CEQUEAU model. It manages all the spatial components, including whole grid cells (CarreauEntier) and partial grid cells (CarreauPartiel), as well as other watershed components like dams and reservoirs.</p>"},{"location":"api/bassin_versant/#overview","title":"Overview","text":"<p>BassinVersant is the core container class for the entire hydrological model. It:</p> <ul> <li>Holds collections of grid cells (CarreauEntier) and drainage cells (CarreauPartiel) </li> <li>Manages dams, reservoirs, and wells in the watershed</li> <li>Provides methods for routing water through the drainage network</li> <li>Implements watershed initialization from input data</li> </ul>"},{"location":"api/bassin_versant/#key-components","title":"Key Components","text":""},{"location":"api/bassin_versant/#spatial-elements","title":"Spatial Elements","text":"<ul> <li>CarreauEntier: Collection of whole grid cells covering the watershed</li> <li>CarreauPartiel: Collection of partial grid cells forming the drainage network</li> <li>Width and Height: Grid dimensions in terms of number of cells</li> </ul>"},{"location":"api/bassin_versant/#water-management-structures","title":"Water Management Structures","text":"<ul> <li>Barrages: Dams/reservoirs within the watershed</li> <li>Puits: Water extraction wells</li> </ul>"},{"location":"api/bassin_versant/#main-methods","title":"Main Methods","text":""},{"location":"api/bassin_versant/#initialization","title":"Initialization","text":"<ul> <li><code>initialiserCarreauxEntiers</code>: Initialize the whole grid cells from input data</li> <li><code>initialiserCarreauxPartiels</code>: Initialize the partial grid cells and drainage network</li> <li><code>initialiserBarrage</code>: Set up dams and reservoirs within the watershed</li> </ul>"},{"location":"api/bassin_versant/#grid-cell-access","title":"Grid Cell Access","text":"<ul> <li><code>trouverCarreauEntierParId</code>: Find a whole grid cell by its ID</li> <li><code>trouverCarreauPartielParId</code>: Find a partial grid cell by its ID</li> <li><code>trouverBarrageParIdCP</code>: Find a dam by its partial grid cell ID</li> </ul>"},{"location":"api/bassin_versant/#water-management","title":"Water Management","text":"<ul> <li><code>possedeBarrage</code>: Check if a specific location has a dam</li> <li><code>puits</code>: Access water extraction wells</li> <li><code>calculerCoeffTransfert</code>: Calculate flow transfer coefficients</li> </ul>"},{"location":"api/bassin_versant/#example-usage","title":"Example Usage","text":"<p>The BassinVersant class is typically used as follows:</p> <pre><code>// Initialize the watershed\nBassinVersant bassinVersant;\nbassinVersant.initialiserCarreauxEntiers(carreauxEntiersData);\nbassinVersant.initialiserCarreauxPartiels(carreauxPartielsData);\n\n// Simulate water flow through the watershed\nfor (auto&amp; cp : bassinVersant.carreauxPartiels()) {\n    // Process each partial grid cell\n}\n\n// Check for dams at a specific location\nif (bassinVersant.possedeBarrage(idCP)) {\n    // Handle dam operations\n}\n</code></pre>"},{"location":"api/carreau_entier/","title":"CarreauEntier Class","text":"<p>The <code>CarreauEntier</code> class represents whole grid cells that make up the spatial foundation of the CEQUEAU model. Each CarreauEntier corresponds to a square geographic area within the watershed.</p>"},{"location":"api/carreau_entier/#overview","title":"Overview","text":"<p>CarreauEntier (whole grid cells) serve as the basic geographic units for modeling hydrological processes. Each cell:</p> <ul> <li>Has a fixed position in the watershed grid (i, j coordinates)</li> <li>Contains physical characteristics relevant to hydrological processes</li> <li>Serves as the spatial unit for meteorological inputs</li> <li>Can contain one or more partial grid cells (CarreauPartiel)</li> </ul>"},{"location":"api/carreau_entier/#key-properties","title":"Key Properties","text":""},{"location":"api/carreau_entier/#identification","title":"Identification","text":"<ul> <li>id_: Unique identifier for the grid cell</li> <li>i_: Row index in the watershed grid</li> <li>j_: Column index in the watershed grid</li> </ul>"},{"location":"api/carreau_entier/#geographic-properties","title":"Geographic Properties","text":"<ul> <li>latitude_: Geographic latitude of the cell center</li> <li>longitude_: Geographic longitude of the cell center</li> <li>altitude_: Average elevation of the cell (meters above sea level)</li> <li>meanSlope_: Average terrain slope within the cell</li> </ul>"},{"location":"api/carreau_entier/#land-cover-properties","title":"Land Cover Properties","text":"<ul> <li>pctForet_: Percentage of the cell covered by forest</li> <li>pctLacRiviere_: Percentage of the cell covered by lakes and rivers</li> <li>pctMarais_: Percentage of the cell covered by marshes/wetlands</li> <li>pctLacExutoire_: Percentage of the cell covered by outlet lakes</li> </ul>"},{"location":"api/carreau_entier/#main-methods","title":"Main Methods","text":""},{"location":"api/carreau_entier/#property-access","title":"Property Access","text":"<ul> <li><code>id()</code>: Get the cell's unique identifier</li> <li><code>i()</code>, <code>j()</code>: Get the cell's grid coordinates</li> <li><code>latitude()</code>, <code>longitude()</code>: Get geographic coordinates</li> <li><code>altitude()</code>: Get the cell's average elevation</li> <li><code>pctForet()</code>, <code>pctMarais()</code>, etc.: Access land cover percentages</li> </ul>"},{"location":"api/carreau_entier/#hydrological-calculations","title":"Hydrological Calculations","text":"<ul> <li><code>pctEau()</code>: Calculate total percentage of water bodies</li> <li><code>pctSol()</code>: Calculate percentage of land areas</li> <li><code>calculerCoeffPonderation()</code>: Calculate weighting coefficients for hydrological processes</li> </ul>"},{"location":"api/carreau_entier/#example-usage","title":"Example Usage","text":"<pre><code>// Access cell properties\nint cellId = carreau.id();\nfloat forestCover = carreau.pctForet();\nfloat elevation = carreau.altitude();\n\n// Calculate derived properties\nfloat waterArea = carreau.pctEau();\nfloat landArea = carreau.pctSol();\n\n// Grid position\nint row = carreau.i();\nint col = carreau.j();\n\n// Geographic coordinates\nfloat lat = carreau.latitude();\nfloat lon = carreau.longitude();\n</code></pre>"},{"location":"api/carreau_partiel/","title":"CarreauPartiel Class","text":"<p>The <code>CarreauPartiel</code> class represents partial grid cells that form the watershed drainage network in the CEQUEAU model. These are sub-units of whole grid cells (CarreauEntier) that define how water flows through the watershed.</p>"},{"location":"api/carreau_partiel/#overview","title":"Overview","text":"<p>CarreauPartiel (partial grid cells) are the fundamental units for streamflow routing in CEQUEAU. Each CarreauPartiel:</p> <ul> <li>Represents a portion of a CarreauEntier with a distinct drainage direction</li> <li>Forms part of the watershed's drainage network</li> <li>Connects to other CarreauPartiel cells in an upstream-downstream relationship</li> <li>Contains physical characteristics relevant to water routing</li> </ul>"},{"location":"api/carreau_partiel/#key-properties","title":"Key Properties","text":""},{"location":"api/carreau_partiel/#identification","title":"Identification","text":"<ul> <li>id_: Unique identifier for the partial grid cell</li> <li>codeCarreauPartiel_: Special code for the partial cell</li> <li>idCarreauEntier_: Reference to the parent whole grid cell</li> <li>iCarreauEntier_, jCarreauEntier_: Grid coordinates of the parent whole grid cell</li> </ul>"},{"location":"api/carreau_partiel/#connectivity","title":"Connectivity","text":"<ul> <li>idCarreauPartielAval_: ID of the downstream partial grid cell</li> <li>idCarreauxPartielsAmont_: IDs of upstream partial grid cells</li> </ul>"},{"location":"api/carreau_partiel/#physical-characteristics","title":"Physical Characteristics","text":"<ul> <li>pctSurface_: Percentage of the parent whole grid cell's area</li> <li>pctEau_: Percentage covered by water bodies</li> <li>pctForet_: Percentage covered by forest</li> <li>pctMarais_: Percentage covered by marshes</li> <li>pctSolNu_: Percentage of bare soil</li> </ul>"},{"location":"api/carreau_partiel/#hydrographic-properties","title":"Hydrographic Properties","text":"<ul> <li>altitudeMoyenne_: Average elevation</li> <li>longueurCoursEauPrincipal_: Length of the main stream</li> <li>largeurCoursEauPrincipal_: Width of the main stream</li> <li>penteRiviere_: River slope</li> <li>azimutCoursEau_: Stream azimuth (direction)</li> </ul>"},{"location":"api/carreau_partiel/#routing-parameters","title":"Routing Parameters","text":"<ul> <li>coeffTransfert_: Water transfer coefficient</li> <li>volumeInitial_: Initial water volume</li> </ul>"},{"location":"api/carreau_partiel/#main-methods","title":"Main Methods","text":""},{"location":"api/carreau_partiel/#property-access","title":"Property Access","text":"<ul> <li><code>id()</code>: Get the cell's unique identifier</li> <li><code>idCarreauEntier()</code>: Get the parent whole grid cell ID</li> <li><code>idCarreauPartielAval()</code>: Get the downstream cell ID</li> <li><code>idCarreauxPartielsAmont()</code>: Get the upstream cells IDs</li> </ul>"},{"location":"api/carreau_partiel/#hydrological-properties","title":"Hydrological Properties","text":"<ul> <li><code>pctSurface()</code>: Get the percentage of whole cell area</li> <li><code>pctEau()</code>, <code>pctForet()</code>, <code>pctMarais()</code>: Get land cover percentages</li> <li><code>altitudeMoyenne()</code>: Get average elevation</li> <li><code>penteRiviere()</code>: Get river slope</li> </ul>"},{"location":"api/carreau_partiel/#routing","title":"Routing","text":"<ul> <li><code>coeffTransfert()</code>: Get/set the water transfer coefficient</li> <li><code>volumeInitial()</code>: Get/set initial water volume</li> <li><code>calculerCorrectionDebit()</code>: Calculate flow correction factors</li> </ul>"},{"location":"api/carreau_partiel/#example-usage","title":"Example Usage","text":"<pre><code>// Access basic properties\nint cpId = carreauPartiel.id();\nint parentCellId = carreauPartiel.idCarreauEntier();\n\n// Check downstream connectivity\nint downstreamId = carreauPartiel.idCarreauPartielAval();\nbool isOutlet = (downstreamId == 0);  // 0 indicates watershed outlet\n\n// Get upstream cells\nconst auto&amp; upstreamIds = carreauPartiel.idCarreauxPartielsAmont();\nbool isHeadwater = upstreamIds.empty();\n\n// Access physical properties\nfloat forestPercentage = carreauPartiel.pctForet();\nfloat streamSlope = carreauPartiel.penteRiviere();\n</code></pre>"},{"location":"api/simulation/","title":"Simulation Class","text":"<p>The <code>Simulation</code> class is the central orchestrator of the hydrological modeling process in CEQUEAU. It coordinates all aspects of the simulation, from input processing to output generation.</p>"},{"location":"api/simulation/#overview","title":"Overview","text":"<p>The Simulation class is responsible for:</p> <ul> <li>Managing the entire hydrological simulation workflow</li> <li>Implementing the water balance and routing algorithms</li> <li>Coordinating the various modeling components (snowmelt, evapotranspiration, etc.)</li> <li>Processing meteorological inputs and generating hydrological outputs</li> <li>Handling the temporal aspects of the simulation (time steps, periods, etc.)</li> </ul>"},{"location":"api/simulation/#key-components","title":"Key Components","text":""},{"location":"api/simulation/#watershed-representation","title":"Watershed Representation","text":"<ul> <li>BassinVersant: The watershed object containing all spatial components</li> <li>Meteo: Meteorological data for the simulation period</li> </ul>"},{"location":"api/simulation/#water-balance-models","title":"Water Balance Models","text":"<ul> <li>Evapotranspiration: Multiple models available (EvapoCequeau, EvapoPenmanMont, etc.)</li> <li>Snowmelt: Multiple models available (FonteCequeau, FonteUEB, FonteCemaNeige)</li> <li>Soil Water Balance: Processes for infiltration, percolation, and subsurface flow</li> </ul>"},{"location":"api/simulation/#time-management","title":"Time Management","text":"<ul> <li>dateDebut_: Start date of the simulation</li> <li>dateFin_: End date of the simulation</li> <li>intervalleCalcul_: Calculation time step (typically days)</li> </ul>"},{"location":"api/simulation/#model-parameters","title":"Model Parameters","text":"<ul> <li>parametres_: Configuration parameters for the flow simulation</li> <li>paramQual_: Parameters for water temperature simulation (if enabled)</li> </ul>"},{"location":"api/simulation/#main-methods","title":"Main Methods","text":""},{"location":"api/simulation/#initialization","title":"Initialization","text":"<ul> <li><code>initialiser()</code>: Set up all components of the simulation</li> <li><code>initialiserSimulationContinue()</code>: Configure for continuous simulation mode</li> </ul>"},{"location":"api/simulation/#simulation-execution","title":"Simulation Execution","text":"<ul> <li><code>simuler()</code>: Execute the complete simulation</li> <li><code>simulerPasDeTemps()</code>: Process a single time step</li> </ul>"},{"location":"api/simulation/#process-modules","title":"Process Modules","text":"<ul> <li><code>simulerProduction()</code>: Calculate water production processes (including snowmelt and evapotranspiration)</li> <li><code>simulerTransfert()</code>: Route water through the watershed network</li> </ul>"},{"location":"api/simulation/#output-handling","title":"Output Handling","text":"<ul> <li><code>calculerDebitExutoire()</code>: Calculate outflow at the watershed outlet</li> <li><code>enregistrerDebitSimule()</code>: Record simulated discharge values</li> </ul>"},{"location":"api/simulation/#example-usage","title":"Example Usage","text":"<pre><code>// Initialize simulation\nSimulation simulation;\nsimulation.initialiser(parametres, donneeMeteo, bassinVersant);\n\n// Run the entire simulation\nsimulation.simuler();\n\n// Access results\nconst auto&amp; results = simulation.resultats();\n\n// Or run step by step\nfor (int step = 0; step &lt; simulation.nbPasDeTemps(); ++step) {\n    simulation.simulerPasDeTemps();\n    // Process intermediate results if needed\n}\n</code></pre>"},{"location":"CEQUEAU/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>namespace AssimilationHelper Fonctions utilitaires pour l'assimilation. </li> <li>class Barrage Definition d'un barrage. </li> <li>class BassinVersant Definition du bassin versant. </li> <li>class CarreauEntier Definition d'un carreau entier. </li> <li>class CarreauPartiel Definition d'un carreau partiel. </li> <li>class DLI </li> <li>class Params </li> <li>class DateChrono </li> <li>class DonneesInterpolation Donnees necessaires pour interpoler la meteo a chaque CE. </li> <li>class DonneesMeteo Ensemble des donnees meteo. </li> <li>class EtatBarrage Classe de donnees de l'etat d'un barrage. </li> <li>class EtatBarrageAssim Classe de donnees pour l'assimilation des etats d'un barrage. </li> <li>class EtatCarreauEntier Classe de donnees de l'etat d'un carreau entier. <ul> <li>class Qualite </li> </ul> </li> <li>class EtatCarreauEntierAssim Classe de donnees pour l'assimilation des etats d'un carreau entier. </li> <li>class EtatCarreauPartiel Classe de donnees de l'etat d'un carreau partiel. <ul> <li>class Qualite </li> </ul> </li> <li>class EtatCarreauPartielAssim Classe de donnees pour l'assimilation des etats d'un carreau partiel. </li> <li>class Evapo Interface module d'evapotranspiration. </li> <li>class EvapoCequeau <ul> <li>class EtatEvapoCE </li> </ul> </li> <li>class EtatEvapoAssimCE </li> <li>class Params </li> <li>class EvapoKPenman </li> <li>class EtatEvapoAssimCE </li> <li>class EtatEvapoCE </li> <li>class Params </li> <li>class EvapoMcGuinness </li> <li>class EtatEvapoAssimCE </li> <li>class EtatEvapoCE </li> <li>class Params </li> <li>class EvapoMorton </li> <li>class EtatEvapoAssimCE </li> <li>class EtatEvapoCE </li> <li>class Params </li> <li>class EvapoPenmanMont </li> <li>class EtatEvapoAssimCE </li> <li>class EtatEvapoCE </li> <li>class Params </li> <li>class EvapoPriestleyTaylor <ul> <li>class EtatEvapoCE </li> </ul> </li> <li>class EtatEvapoAssimCE </li> <li>class Params </li> <li>class EvapoTemplate </li> <li>class EtatEvapoAssimCE </li> <li>class EtatEvapoCE </li> <li>class Params </li> <li>class FILELog </li> <li>class Fonte Interface module de fonte. </li> <li>class FonteCemaNeige <ul> <li>class EtatFonteCE </li> </ul> </li> <li>class EtatFonteAssimCE </li> <li>class Params </li> <li>class FonteCequeau Definition d'une classe de calcul de la fonte. <ul> <li>class EtatFonteCE </li> </ul> </li> <li>class EtatFonteAssimCE </li> <li>class Params Parametres necessaires au module de fonte __    </li> <li>class FonteTemplate </li> <li>class EtatFonteAssimCE </li> <li>class EtatFonteCE </li> <li>class Params </li> <li>class FonteUEB Definition d'une classe de calcul de la fonte. <ul> <li>class EtatFonteCE </li> </ul> </li> <li>class EtatFonteAssimCE </li> <li>class constants </li> <li>class parameters </li> <li>class InfoEvacuationExt </li> <li>class Interpolateur Classe Interpolation. </li> <li>class InterpolateurPolygoneThiessen </li> <li>class InterpolateurPonderationStations </li> <li>class ListeStation Definition d'une liste de stations meteo. </li> <li>class Log </li> <li>class Meteo Definition d'une donnee meteo. </li> <li>namespace MexHelper Fonctions utilitaires pour faciliter l'usage de l'API Matlab. </li> <li>class ModuleBase Classe de base pour les modules de fonte et d'evapotranspiration. </li> <li>namespace ModuleEvapo </li> <li>namespace ModuleFonte </li> <li>class Output2FILE </li> <li>class ParamCE Parametres spatialisables. </li> <li>class ParamFacultatifs Classe de donnees pour les parametres facultatifs. </li> <li>class ParamOption Classe de donnees pour les parametres optionnels. </li> <li>class ParamPompage </li> <li>class ParamSol Classe de donnees des parametres relatifs reservoirs SOL, NAPPE et MARAIS. </li> <li>class ParamSolInitial Classe de donnees pour les valeurs initiales des reservoirs. </li> <li>class ParamTemperature Classe de donnees des parametres qualite relatifs a la temperature de l'eau. </li> <li>class ParamTransfert Classe de donnees pour les parametres relatifs a la fonction de transfert. </li> <li>class Parametres Classe des parametres de la simulation. </li> <li>class ParametresInterpolation Classe des parametres de la simulation. </li> <li>class ParametresQualite Classe des parametres de la simulation. </li> <li>class PositionSolaire Class pour calcul des positions solaires. </li> <li>class Puits </li> <li>namespace Qualite <ul> <li>class EtatCarreauPartiel Etats de la qualite a chaque CP. </li> <li>class EtatCarreauPartielAssim Classe de donnees pour l'assimilation des etats d'un carreau partiel. </li> <li>struct spa_data </li> </ul> </li> <li>class ReleveNeige </li> <li>class Simulation Classe simulation. </li> <li>class SimulationQualite Classe SimulationQualite . </li> <li>class SolarFunctions </li> <li>struct cLocation </li> <li>struct cSunCoordinates </li> <li>struct cTime </li> <li>class Station Definition d'une station meteo. </li> <li>class TrieurCEGrille Classe utilitaire pour le tri des carreaux entiers. </li> <li>class TrieurMeteoId Classe utilitaire pour le tri des donnees meteo. </li> <li>class ValeurZone </li> <li>namespace std STL namespace. </li> </ul>"},{"location":"CEQUEAU/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir src <ul> <li>file AssimilationHelper.hpp </li> <li>file Barrage.cpp </li> <li>file Barrage.h </li> <li>file BassinVersant.cpp </li> <li>file BassinVersant.h </li> <li>file CarreauEntier.cpp </li> <li>file CarreauEntier.h </li> <li>file CarreauPartiel.cpp </li> <li>file CarreauPartiel.h </li> <li>file CequeauQuantiteMex.cpp </li> <li>file DLI.cpp </li> <li>file DLI.h </li> <li>file DateChrono.cpp </li> <li>file DateChrono.h </li> <li>file Defs.h </li> <li>file DonneesMeteo.cpp </li> <li>file DonneesMeteo.h </li> <li>file Evapo.h </li> <li>file EvapoCequeau.cpp </li> <li>file EvapoCequeau.h </li> <li>file EvapoKPenman.cpp </li> <li>file EvapoKPenman.h </li> <li>file EvapoMcGuinness.cpp </li> <li>file EvapoMcGuinness.h </li> <li>file EvapoMorton.cpp </li> <li>file EvapoMorton.h </li> <li>file EvapoPenmanMont.cpp </li> <li>file EvapoPenmanMont.h </li> <li>file EvapoPriestleyTaylor.cpp </li> <li>file EvapoPriestleyTaylor.h </li> <li>file EvapoTemplate.cpp </li> <li>file EvapoTemplate.h </li> <li>file Fonte.h </li> <li>file FonteCemaNeige.cpp </li> <li>file FonteCemaNeige.h </li> <li>file FonteCequeau.cpp </li> <li>file FonteCequeau.h </li> <li>file FonteTemplate.cpp </li> <li>file FonteTemplate.h </li> <li>file FonteUEB.cpp </li> <li>file FonteUEB.h </li> <li>file Interpolateur.cpp </li> <li>file Interpolateur.h </li> <li>file InterpolateurPolygoneThiessen.cpp </li> <li>file InterpolateurPolygoneThiessen.h </li> <li>file InterpolateurPonderationStations.cpp </li> <li>file InterpolateurPonderationStations.h </li> <li>file InterpolationMex.cpp </li> <li>file ListeStation.cpp </li> <li>file ListeStation.h </li> <li>file Meteo.cpp </li> <li>file Meteo.h </li> <li>file MexHelper.hpp </li> <li>file ModuleBase.hpp </li> <li>file Parametres.cpp </li> <li>file Parametres.h </li> <li>file ParametresInterpolation.cpp </li> <li>file ParametresInterpolation.h </li> <li>file ParametresQualite.cpp </li> <li>file ParametresQualite.h </li> <li>file Puits.cpp </li> <li>file Puits.h </li> <li>file Simulation.cpp </li> <li>file Simulation.h </li> <li>file SimulationQualite.cpp </li> <li>file SimulationQualite.h </li> <li>file SimulationQualite_IO.cpp </li> <li>file SimulationQualite_Ombrage.cpp </li> <li>file Simulation_Assimilation.cpp </li> <li>file Simulation_IO.cpp </li> <li>file Simulation_Production.cpp </li> <li>file Simulation_Transfert.cpp </li> <li>file SolarFunctions.cpp </li> <li>file SolarFunctions.h </li> <li>file Station.cpp </li> <li>file Station.h </li> <li>file compileCequeauMat.m </li> <li>file compileCequeauOct.m </li> <li>file compileInterpolationMat.m </li> <li>file compileInterpolationOct.m </li> <li>file conversionParametresV2-V4.m </li> <li>file log.h </li> <li>file stdafx.cpp </li> <li>file stdafx.h </li> <li>file targetver.h </li> </ul> </li> </ul>"},{"location":"CEQUEAU/namespaceAssimilationHelper/","title":"Namespace AssimilationHelper","text":"<p>Namespace List &gt; AssimilationHelper</p> <p>Fonctions utilitaires pour l'assimilation. </p>"},{"location":"CEQUEAU/namespaceAssimilationHelper/#public-functions","title":"Public Functions","text":"Type Name void assimilerValeur (const float valeurAssim, TypeAssim typeAssim, float &amp; valeur) Remplacement d'une valeur par une donnee d'assimilation. TypeAssim obtenirTypeAssim (const mxArray * varAssimilation) Trouver le type d'assimilation pour une variable d'assimilation. void obtenirValeursAssim (const double * valeursAssim, TypeAssim typeAssim, size_t indexCol, float valeurs) Trouver les valeurs d'assimilation pour une variable d'assimilation."},{"location":"CEQUEAU/namespaceAssimilationHelper/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/namespaceAssimilationHelper/#function-assimilervaleur","title":"function assimilerValeur","text":"<p>Remplacement d'une valeur par une donnee d'assimilation. <pre><code>inline void AssimilationHelper::assimilerValeur (\n    const float valeurAssim,\n    TypeAssim typeAssim,\n    float &amp; valeur\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceAssimilationHelper/#function-obtenirtypeassim","title":"function obtenirTypeAssim","text":"<p>Trouver le type d'assimilation pour une variable d'assimilation. <pre><code>inline TypeAssim AssimilationHelper::obtenirTypeAssim (\n    const mxArray * varAssimilation\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceAssimilationHelper/#function-obtenirvaleursassim","title":"function obtenirValeursAssim","text":"<p>Trouver les valeurs d'assimilation pour une variable d'assimilation. <pre><code>inline void AssimilationHelper::obtenirValeursAssim (\n    const double * valeursAssim,\n    TypeAssim typeAssim,\n    size_t indexCol,\n    float valeurs\n) \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/AssimilationHelper.hpp</code></p>"},{"location":"CEQUEAU/classBarrage/","title":"Class Barrage","text":"<p>ClassList &gt; Barrage</p> <p>Definition d'un barrage. </p> <ul> <li><code>#include &lt;Barrage.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classBarrage/#public-functions","title":"Public Functions","text":"Type Name Barrage (int idCP, int idCPAval, float volume, const ParamEquation &amp; paramNiveau, const ParamEquation &amp; paramDebit) Constructeur barrage type 2. Barrage (int idCP, int idCPAval, float volume, const ParamEquation &amp; paramNiveau, const ParamEquation &amp; paramVolume, const std::vector&lt; ParamEquation &gt; &amp; paramDebitInt, const std::vector&lt; InfoEvacuationExt &gt; &amp; paramDebitExt) Constructeur barrage type 5. Barrage (int idCPAval, const std::vector&lt; float &gt; &amp; debitsMesures) Constructeur barrage type 3. float calculerDebitAvecVolume () constCalcul du debit selon le volume du barrage. float calculerDebitAvecVolume (const ParamEquation &amp; paramDebit) constCalcul du debit selon le volume du barrage en specifiant les parametres d'equation. float calculerDebitAvecVolume (float volume, const ParamEquation &amp; paramDebit) constCalcul du debit avec un volume en specifiant les parametres d'equation. float calculerNiveauAvecVolume () constCalcul de la hauteur selon le volume du barrage. float calculerNiveauAvecVolume (float volume) constCalcul de la hauteur avec un volume. float calculerVolumeCpAval (float volumeEntrant, float deltaTemps, float volumeInitialCpAval, const DateChrono &amp; datePasDeTemps, std::vector&lt; float &gt; &amp; volumesSortants) Calcul du volume provenant du barrage sur le CP en aval. const std::vector&lt; float &gt; &amp; debitsMesures () const int idCP () constGetter idCP. int idCPAval () constGetter idCPAval. TypeBarrage typeBarrage () constGetter type barrage. float volume () constGetter volume. void volume (float valeur) Setter volume. ~Barrage ()"},{"location":"CEQUEAU/classBarrage/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classBarrage/#function-barrage-13","title":"function Barrage [1/3]","text":"<p>Constructeur barrage type 2. <pre><code>Barrage::Barrage (\n    int idCP,\n    int idCPAval,\n    float volume,\n    const ParamEquation &amp; paramNiveau,\n    const ParamEquation &amp; paramDebit\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-barrage-23","title":"function Barrage [2/3]","text":"<p>Constructeur barrage type 5. <pre><code>Barrage::Barrage (\n    int idCP,\n    int idCPAval,\n    float volume,\n    const ParamEquation &amp; paramNiveau,\n    const ParamEquation &amp; paramVolume,\n    const std::vector&lt; ParamEquation &gt; &amp; paramDebitInt,\n    const std::vector&lt; InfoEvacuationExt &gt; &amp; paramDebitExt\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-barrage-33","title":"function Barrage [3/3]","text":"<p>Constructeur barrage type 3. <pre><code>Barrage::Barrage (\n    int idCPAval,\n    const std::vector&lt; float &gt; &amp; debitsMesures\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-calculerdebitavecvolume-13","title":"function calculerDebitAvecVolume [1/3]","text":"<p>Calcul du debit selon le volume du barrage. <pre><code>float Barrage::calculerDebitAvecVolume () const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-calculerdebitavecvolume-23","title":"function calculerDebitAvecVolume [2/3]","text":"<p>Calcul du debit selon le volume du barrage en specifiant les parametres d'equation. <pre><code>float Barrage::calculerDebitAvecVolume (\n    const ParamEquation &amp; paramDebit\n) const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-calculerdebitavecvolume-33","title":"function calculerDebitAvecVolume [3/3]","text":"<p>Calcul du debit avec un volume en specifiant les parametres d'equation. <pre><code>float Barrage::calculerDebitAvecVolume (\n    float volume,\n    const ParamEquation &amp; paramDebit\n) const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-calculerniveauavecvolume-12","title":"function calculerNiveauAvecVolume [1/2]","text":"<p>Calcul de la hauteur selon le volume du barrage. <pre><code>float Barrage::calculerNiveauAvecVolume () const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-calculerniveauavecvolume-22","title":"function calculerNiveauAvecVolume [2/2]","text":"<p>Calcul de la hauteur avec un volume. <pre><code>float Barrage::calculerNiveauAvecVolume (\n    float volume\n) const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-calculervolumecpaval","title":"function calculerVolumeCpAval","text":"<p>Calcul du volume provenant du barrage sur le CP en aval. <pre><code>float Barrage::calculerVolumeCpAval (\n    float volumeEntrant,\n    float deltaTemps,\n    float volumeInitialCpAval,\n    const DateChrono &amp; datePasDeTemps,\n    std::vector&lt; float &gt; &amp; volumesSortants\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-debitsmesures","title":"function debitsMesures","text":"<pre><code>const std::vector&lt; float &gt; &amp; Barrage::debitsMesures () const\n</code></pre>"},{"location":"CEQUEAU/classBarrage/#function-idcp","title":"function idCP","text":"<p>Getter idCP. <pre><code>int Barrage::idCP () const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-idcpaval","title":"function idCPAval","text":"<p>Getter idCPAval. <pre><code>int Barrage::idCPAval () const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-typebarrage","title":"function typeBarrage","text":"<p>Getter type barrage. <pre><code>TypeBarrage Barrage::typeBarrage () const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-volume-12","title":"function volume [1/2]","text":"<p>Getter volume. <pre><code>float Barrage::volume () const\n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-volume-22","title":"function volume [2/2]","text":"<p>Setter volume. <pre><code>void Barrage::volume (\n    float valeur\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBarrage/#function-barrage","title":"function ~Barrage","text":"<pre><code>Barrage::~Barrage () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Barrage.h</code></p>"},{"location":"CEQUEAU/classBassinVersant/","title":"Class BassinVersant","text":"<p>ClassList &gt; BassinVersant</p> <p>Definition du bassin versant. More...</p> <ul> <li><code>#include &lt;BassinVersant.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classBassinVersant/#public-functions","title":"Public Functions","text":"Type Name BassinVersant () Constructeur. std::vector&lt; BarragePtr &gt; &amp; barrages () Getter barrage. const std::vector&lt; CarreauEntierPtr &gt; &amp; carreauxEntiers () constGetter liste des carreaux entiers. const std::vector&lt; CarreauPartielPtr &gt; &amp; carreauxPartiels () constGetter liste des carreaux partiels. void initialiser (const mxArray * bassinVersant) Initialisation du bassin versant a partir d'un variable Matlab (mxArray) void initialiserBarrage (int idCP, int idCPAval, float volumeInitial, ParamEquation &amp; coeffNiveau, ParamEquation &amp; coeffDebit) Initialisation barrage type 2. void initialiserBarrage (int idCP, int idCPAval, float volumeInitial, ParamEquation &amp; coeffNiveau, ParamEquation &amp; coeffVolume, std::vector&lt; ParamEquation &gt; &amp; coeffDebitInt, std::vector&lt; InfoEvacuationExt &gt; &amp; coeffDebitExt) Initialisation barrage type 5. void initialiserBarrage (int idCPAval, std::vector&lt; float &gt; &amp; debitsExternesMesures) Initialisation barrage type 3. void initialiserFichier (const std::string nomFichierintrants) Initialisation du bassin versant a partir d'un fichier Matlab. int nbBarrages () constGetter nbBarrages. int nbCarreauxEntiers () constGetter nbCarreauxEntiers. int nbCarreauxPartiels () constGetter nbCarreauxPartiels. int nbCarreauxPartielsCheminLong () constGetter nbCarreauxPartielsCheminLong. std::string nomBassinVersant () constGetter nomBassinVersant. bool possedeBarrage () constLe bassin possede des barrages? bool possedeBarrage (int idCP) constLe CP possede un barrage? const std::map&lt; int, std::vector&lt; PuitsPtr &gt; &gt; &amp; puits () constGetter liste des puits. const std::vector&lt; PuitsPtr &gt; &amp; puitsParIdCE (int idCE) const float superficieCarreauEntier () constGetter superficieCarreauEntier. const BarragePtr trouverBarrageParIdCP (int idCP) constRecherche d'un barrage situe sur ce CP. const BarragePtr trouverBarrageParIdCpAval (int idCP) constRecherche d'un barrage ayant un CP particuler en aval. const CarreauEntierPtr trouverCarreauEntierParId (int id) constObtention d'un carreau entier selon son id. ~BassinVersant ()"},{"location":"CEQUEAU/classBassinVersant/#detailed-description","title":"Detailed Description","text":"<p>Definition du bassin versant. NOTE: Il s'agit de la representation des donnees physiographiques PREPAREES. </p>"},{"location":"CEQUEAU/classBassinVersant/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classBassinVersant/#function-bassinversant","title":"function BassinVersant","text":"<p>Constructeur. <pre><code>BassinVersant::BassinVersant () \n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-barrages","title":"function barrages","text":"<p>Getter barrage. <pre><code>std::vector&lt; BarragePtr &gt; &amp; BassinVersant::barrages () \n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-carreauxentiers","title":"function carreauxEntiers","text":"<p>Getter liste des carreaux entiers. <pre><code>const std::vector&lt; CarreauEntierPtr &gt; &amp; BassinVersant::carreauxEntiers () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-carreauxpartiels","title":"function carreauxPartiels","text":"<p>Getter liste des carreaux partiels. <pre><code>const std::vector&lt; CarreauPartielPtr &gt; &amp; BassinVersant::carreauxPartiels () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-initialiser","title":"function initialiser","text":"<p>Initialisation du bassin versant a partir d'un variable Matlab (mxArray) <pre><code>void BassinVersant::initialiser (\n    const mxArray * bassinVersant\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-initialiserbarrage-13","title":"function initialiserBarrage [1/3]","text":"<p>Initialisation barrage type 2. <pre><code>void BassinVersant::initialiserBarrage (\n    int idCP,\n    int idCPAval,\n    float volumeInitial,\n    ParamEquation &amp; coeffNiveau,\n    ParamEquation &amp; coeffDebit\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-initialiserbarrage-23","title":"function initialiserBarrage [2/3]","text":"<p>Initialisation barrage type 5. <pre><code>void BassinVersant::initialiserBarrage (\n    int idCP,\n    int idCPAval,\n    float volumeInitial,\n    ParamEquation &amp; coeffNiveau,\n    ParamEquation &amp; coeffVolume,\n    std::vector&lt; ParamEquation &gt; &amp; coeffDebitInt,\n    std::vector&lt; InfoEvacuationExt &gt; &amp; coeffDebitExt\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-initialiserbarrage-33","title":"function initialiserBarrage [3/3]","text":"<p>Initialisation barrage type 3. <pre><code>void BassinVersant::initialiserBarrage (\n    int idCPAval,\n    std::vector&lt; float &gt; &amp; debitsExternesMesures\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-initialiserfichier","title":"function initialiserFichier","text":"<p>Initialisation du bassin versant a partir d'un fichier Matlab. <pre><code>void BassinVersant::initialiserFichier (\n    const std::string nomFichierintrants\n) \n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-nbbarrages","title":"function nbBarrages","text":"<p>Getter nbBarrages. <pre><code>int BassinVersant::nbBarrages () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-nbcarreauxentiers","title":"function nbCarreauxEntiers","text":"<p>Getter nbCarreauxEntiers. <pre><code>int BassinVersant::nbCarreauxEntiers () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-nbcarreauxpartiels","title":"function nbCarreauxPartiels","text":"<p>Getter nbCarreauxPartiels. <pre><code>int BassinVersant::nbCarreauxPartiels () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-nbcarreauxpartielscheminlong","title":"function nbCarreauxPartielsCheminLong","text":"<p>Getter nbCarreauxPartielsCheminLong. <pre><code>int BassinVersant::nbCarreauxPartielsCheminLong () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-nombassinversant","title":"function nomBassinVersant","text":"<p>Getter nomBassinVersant. <pre><code>std::string BassinVersant::nomBassinVersant () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-possedebarrage-12","title":"function possedeBarrage [1/2]","text":"<p>Le bassin possede des barrages? <pre><code>bool BassinVersant::possedeBarrage () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-possedebarrage-22","title":"function possedeBarrage [2/2]","text":"<p>Le CP possede un barrage? <pre><code>bool BassinVersant::possedeBarrage (\n    int idCP\n) const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-puits","title":"function puits","text":"<p>Getter liste des puits. <pre><code>const std::map&lt; int, std::vector&lt; PuitsPtr &gt; &gt; &amp; BassinVersant::puits () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-puitsparidce","title":"function puitsParIdCE","text":"<pre><code>const std::vector&lt; PuitsPtr &gt; &amp; BassinVersant::puitsParIdCE (\n    int idCE\n) const\n</code></pre>"},{"location":"CEQUEAU/classBassinVersant/#function-superficiecarreauentier","title":"function superficieCarreauEntier","text":"<p>Getter superficieCarreauEntier. <pre><code>float BassinVersant::superficieCarreauEntier () const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-trouverbarrageparidcp","title":"function trouverBarrageParIdCP","text":"<p>Recherche d'un barrage situe sur ce CP. <pre><code>const BarragePtr BassinVersant::trouverBarrageParIdCP (\n    int idCP\n) const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-trouverbarrageparidcpaval","title":"function trouverBarrageParIdCpAval","text":"<p>Recherche d'un barrage ayant un CP particuler en aval. <pre><code>const BarragePtr BassinVersant::trouverBarrageParIdCpAval (\n    int idCP\n) const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-trouvercarreauentierparid","title":"function trouverCarreauEntierParId","text":"<p>Obtention d'un carreau entier selon son id. <pre><code>const CarreauEntierPtr BassinVersant::trouverCarreauEntierParId (\n    int id\n) const\n</code></pre></p>"},{"location":"CEQUEAU/classBassinVersant/#function-bassinversant_1","title":"function ~BassinVersant","text":"<pre><code>BassinVersant::~BassinVersant () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/BassinVersant.h</code></p>"},{"location":"CEQUEAU/classCarreauEntier/","title":"Class CarreauEntier","text":"<p>ClassList &gt; CarreauEntier</p> <p>Definition d'un carreau entier. More...</p> <ul> <li><code>#include &lt;CarreauEntier.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classCarreauEntier/#public-functions","title":"Public Functions","text":"Type Name CarreauEntier (int id, int pctLacRiviere, int pctForet, int pctMarais, int pctLacExutoire) Constructeur. CarreauEntier (int id, int i, int j) Constructeur. CarreauEntier (int id, int i, int j, int pctLacRiviere, int pctForet, int pctMarais, int pctLacExutoire, float altitude) Constructeur. CarreauEntier (int id, int i, int j, int pctLacRiviere, int pctForet, int pctMarais, int pctLacExutoire, float altitude, float latitude, float longitude) Constructeur. CarreauEntier (int id, int i, int j, int pctLacRiviere, int pctForet, int pctMarais, int pctLacExutoire, float altitude, float latitude, float longitude, float meanSlope) Constructeur. float altitude () const void altitude (float val) Setter altitude. float calculerCoeffPonderation () constCoefficient de ponderation. int i () constGetter i (abscise) du carreau sur la grille. void i (int val) Setter i. int id () constGetter id. int j () constGetter j (ordonnee) du carreau sur la grille. void j (int val) Setter j. float latitude () constGetter latitude. float longitude () constGetter longitude. float meanSlope () constGetter meanSlope. ParamCE &amp; param () Getter/Setter parametres spatialisables. const ParamCE &amp; param () constGetter parametres spatialisables. float pctEau () constObtention du poucentage d'eau sur le carreau entier. float pctForet () constGetter pctForet. void pctForet (int pctForet) Setter pctForet. float pctLacExutoire () constGetter pctLacExutoire. void pctLacExutoire (int pctLacExutoire) Setter pctLacExutoire. float pctLacRiviere () constGetter pctLacRiviere. void pctLacRiviere (int pctLacRiviere) Setter pctLacRiviere. float pctMarais () constGetter pctMarais. void pctMarais (int pctMarais) Setter pctMarais. float pctSol () constObtention du pourcentage de sol sur le carreau entier. ~CarreauEntier ()"},{"location":"CEQUEAU/classCarreauEntier/#detailed-description","title":"Detailed Description","text":"<p>Definition d'un carreau entier selon les donnees physiographiques PREPAREES. </p>"},{"location":"CEQUEAU/classCarreauEntier/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classCarreauEntier/#function-carreauentier-15","title":"function CarreauEntier [1/5]","text":"<p>Constructeur. <pre><code>CarreauEntier::CarreauEntier (\n    int id,\n    int pctLacRiviere,\n    int pctForet,\n    int pctMarais,\n    int pctLacExutoire\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-carreauentier-25","title":"function CarreauEntier [2/5]","text":"<p>Constructeur. <pre><code>CarreauEntier::CarreauEntier (\n    int id,\n    int i,\n    int j\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-carreauentier-35","title":"function CarreauEntier [3/5]","text":"<p>Constructeur. <pre><code>CarreauEntier::CarreauEntier (\n    int id,\n    int i,\n    int j,\n    int pctLacRiviere,\n    int pctForet,\n    int pctMarais,\n    int pctLacExutoire,\n    float altitude\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-carreauentier-45","title":"function CarreauEntier [4/5]","text":"<p>Constructeur. <pre><code>CarreauEntier::CarreauEntier (\n    int id,\n    int i,\n    int j,\n    int pctLacRiviere,\n    int pctForet,\n    int pctMarais,\n    int pctLacExutoire,\n    float altitude,\n    float latitude,\n    float longitude\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-carreauentier-55","title":"function CarreauEntier [5/5]","text":"<p>Constructeur. <pre><code>CarreauEntier::CarreauEntier (\n    int id,\n    int i,\n    int j,\n    int pctLacRiviere,\n    int pctForet,\n    int pctMarais,\n    int pctLacExutoire,\n    float altitude,\n    float latitude,\n    float longitude,\n    float meanSlope\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-altitude-12","title":"function altitude [1/2]","text":"<pre><code>float CarreauEntier::altitude () const\n</code></pre>"},{"location":"CEQUEAU/classCarreauEntier/#function-altitude-22","title":"function altitude [2/2]","text":"<p>Setter altitude. <pre><code>void CarreauEntier::altitude (\n    float val\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-calculercoeffponderation","title":"function calculerCoeffPonderation","text":"<p>Coefficient de ponderation. <pre><code>float CarreauEntier::calculerCoeffPonderation () const\n</code></pre></p> <p>Coefficient de ponderation utilise dans les calculs d'evapotranspiration et d'infiltration. varie de 0.8 si le carreau entier est completement deboise, a 1.0 si la foret recouvre totalement le carreau. </p>"},{"location":"CEQUEAU/classCarreauEntier/#function-i-12","title":"function i [1/2]","text":"<p>Getter i (abscise) du carreau sur la grille. <pre><code>int CarreauEntier::i () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-i-22","title":"function i [2/2]","text":"<p>Setter i. <pre><code>void CarreauEntier::i (\n    int val\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-id","title":"function id","text":"<p>Getter id. <pre><code>int CarreauEntier::id () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-j-12","title":"function j [1/2]","text":"<p>Getter j (ordonnee) du carreau sur la grille. <pre><code>int CarreauEntier::j () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-j-22","title":"function j [2/2]","text":"<p>Setter j. <pre><code>void CarreauEntier::j (\n    int val\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-latitude","title":"function latitude","text":"<p>Getter latitude. <pre><code>float CarreauEntier::latitude () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-longitude","title":"function longitude","text":"<p>Getter longitude. <pre><code>float CarreauEntier::longitude () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-meanslope","title":"function meanSlope","text":"<p>Getter meanSlope. <pre><code>float CarreauEntier::meanSlope () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-param-12","title":"function param [1/2]","text":"<p>Getter/Setter parametres spatialisables. <pre><code>ParamCE &amp; CarreauEntier::param () \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-param-22","title":"function param [2/2]","text":"<p>Getter parametres spatialisables. <pre><code>const ParamCE &amp; CarreauEntier::param () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pcteau","title":"function pctEau","text":"<p>Obtention du poucentage d'eau sur le carreau entier. <pre><code>float CarreauEntier::pctEau () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctforet-12","title":"function pctForet [1/2]","text":"<p>Getter pctForet. <pre><code>float CarreauEntier::pctForet () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctforet-22","title":"function pctForet [2/2]","text":"<p>Setter pctForet. <pre><code>void CarreauEntier::pctForet (\n    int pctForet\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctlacexutoire-12","title":"function pctLacExutoire [1/2]","text":"<p>Getter pctLacExutoire. <pre><code>float CarreauEntier::pctLacExutoire () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctlacexutoire-22","title":"function pctLacExutoire [2/2]","text":"<p>Setter pctLacExutoire. <pre><code>void CarreauEntier::pctLacExutoire (\n    int pctLacExutoire\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctlacriviere-12","title":"function pctLacRiviere [1/2]","text":"<p>Getter pctLacRiviere. <pre><code>float CarreauEntier::pctLacRiviere () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctlacriviere-22","title":"function pctLacRiviere [2/2]","text":"<p>Setter pctLacRiviere. <pre><code>void CarreauEntier::pctLacRiviere (\n    int pctLacRiviere\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctmarais-12","title":"function pctMarais [1/2]","text":"<p>Getter pctMarais. <pre><code>float CarreauEntier::pctMarais () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctmarais-22","title":"function pctMarais [2/2]","text":"<p>Setter pctMarais. <pre><code>void CarreauEntier::pctMarais (\n    int pctMarais\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-pctsol","title":"function pctSol","text":"<p>Obtention du pourcentage de sol sur le carreau entier. <pre><code>float CarreauEntier::pctSol () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauEntier/#function-carreauentier","title":"function ~CarreauEntier","text":"<pre><code>CarreauEntier::~CarreauEntier () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/CarreauEntier.h</code></p>"},{"location":"CEQUEAU/classCarreauPartiel/","title":"Class CarreauPartiel","text":"<p>ClassList &gt; CarreauPartiel</p> <p>Definition d'un carreau partiel. More...</p> <ul> <li><code>#include &lt;CarreauPartiel.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classCarreauPartiel/#public-functions","title":"Public Functions","text":"Type Name CarreauPartiel (int id, char codeCarreauPartiel, int pctSurface, int iCarreauEntier, int jCarreauEntier, int idCarreauPartielAval, int idCarreauxPartielsAmont, int idCarreauEntier, int pctEau, int pctForet, int pctMarais, int pctSolNu, int altitudeMoyenne, int profondeurMinimum, int longueurCoursEauPrincipal, int largeurCoursEauPrincipal, int penteRiviere, int cumulPctSuperficieCPAmont, int cumulPctSuperficieLacsAmont, int cumulPctSuperficieMaraisAmont, int cumulPctSuperficieForetAmont, float superficieCarreauEntier, int pctFermetureFutaie, float indiceFoliaire, float custom_1, float custom_2, int lat, int lon, int pctFeuillu, int pctConifer, double hautMoyenneArbre, int azimutCoursEau) Constructeur. int altitudeMoyenne () constGetter altitude moyenne (metres). int azimutCoursEau () constGetter azimutCoursEau. float calculerCorrectionDebit () const char codeCarreauPartiel () constGetter Code du carreau partiel (A - B - C ou D). double coeffTransfert () constGetter Coefficient de transfert pour le pas de temps d'une journee. void coeffTransfert (double valeur) Setter coefficient de transfert pour le pas de temps d'une journee. int cumulPctSuperficieCPAmont () const int cumulPctSuperficieForetAmont () const int cumulPctSuperficieLacsAmont () const int cumulPctSuperficieMaraisAmont () const float custom_1 () constGetter Custom_1. float custom_2 () constGetter Custom_2. double hautMoyenneArbre () constGetter hautMoy. int iCarreauEntier () constGetter Abscisse I du carreau entier auquel appartient le carreau partiel. int id () constGetter Id du carreau partiel. int idCarreauEntier () constGetter Id du carreau entier auquel il appartient. int idCarreauPartielAval () constGetter Id du carreau partiel dans lequel il se jette. const int * idCarreauxPartielsAmont () Getter Liste des id des cinq carreaux affluents possible. float indiceFoliaire () constGetter Indice foliaire. int jCarreauEntier () constGetter Ordonn\u00ef\u00bf\u00bde J du carreau entier auquel appartient le carreau partiel. int largeurCoursEauPrincipal () constGetter Largeur du cours d'eau principal sur la parcelle (1/10 de metres). int latitude () constGetter latitude. int longitude () constGetter longitude. int longueurCoursEauPrincipal () constGetter Longueur du cours d'eau principal sur la parcelle (1/10 de km). int pctConifer () constGetter pctConifer. float pctEau () constGetter Poucentage d'eau sur le carreau partiel. int pctFermetureFutaie () constGetter Pourcentage fermeture futaie. int pctFeuillu () constGetter pctFeuillu. float pctForet () constGetter Poucentage de foret sur le carreau partiel. float pctMarais () constGetter Poucentage de marais sur le carreau partiel. float pctSolNu () constGetter Poucentage de sol deboise sur le carreau partiel. float pctSurface () constGetter Pourcentage du carreau partiel par rapport au carreau entier (0 a 1). int penteRiviere () constGetter Pente de la riviere sur le carreau partiel (1/1000 de metres/km). int profondeurMinimum () constGetter Profondeur minimum (1/100 de metres). void superficieCPAmontCorrige (float valeur) Setter superficieCPAmontCorrige. float volumeInitial () constGetter Volume d'eau initial. void volumeInitial (float valeur) Setter Volume d'eau initial. ~CarreauPartiel ()"},{"location":"CEQUEAU/classCarreauPartiel/#detailed-description","title":"Detailed Description","text":"<p>Definition d'un carreau partiel</p> <p>selon les donnees physiographiques PREPAREES. </p>"},{"location":"CEQUEAU/classCarreauPartiel/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classCarreauPartiel/#function-carreaupartiel","title":"function CarreauPartiel","text":"<p>Constructeur. <pre><code>CarreauPartiel::CarreauPartiel (\n    int id,\n    char codeCarreauPartiel,\n    int pctSurface,\n    int iCarreauEntier,\n    int jCarreauEntier,\n    int idCarreauPartielAval,\n    int idCarreauxPartielsAmont,\n    int idCarreauEntier,\n    int pctEau,\n    int pctForet,\n    int pctMarais,\n    int pctSolNu,\n    int altitudeMoyenne,\n    int profondeurMinimum,\n    int longueurCoursEauPrincipal,\n    int largeurCoursEauPrincipal,\n    int penteRiviere,\n    int cumulPctSuperficieCPAmont,\n    int cumulPctSuperficieLacsAmont,\n    int cumulPctSuperficieMaraisAmont,\n    int cumulPctSuperficieForetAmont,\n    float superficieCarreauEntier,\n    int pctFermetureFutaie,\n    float indiceFoliaire,\n    float custom_1,\n    float custom_2,\n    int lat,\n    int lon,\n    int pctFeuillu,\n    int pctConifer,\n    double hautMoyenneArbre,\n    int azimutCoursEau\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-altitudemoyenne","title":"function altitudeMoyenne","text":"<p>Getter altitude moyenne (metres). <pre><code>int CarreauPartiel::altitudeMoyenne () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-azimutcourseau","title":"function azimutCoursEau","text":"<p>Getter azimutCoursEau. <pre><code>int CarreauPartiel::azimutCoursEau () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-calculercorrectiondebit","title":"function calculerCorrectionDebit","text":"<pre><code>float CarreauPartiel::calculerCorrectionDebit () const\n</code></pre> <p>Facteur de correction du debit calcule.</p> <p>= cumulPctSuperficieCPAmontCorrige / cumulPctSuperficieCPAmont </p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-codecarreaupartiel","title":"function codeCarreauPartiel","text":"<p>Getter Code du carreau partiel (A - B - C ou D). <pre><code>char CarreauPartiel::codeCarreauPartiel () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-coefftransfert-12","title":"function coeffTransfert [1/2]","text":"<p>Getter Coefficient de transfert pour le pas de temps d'une journee. <pre><code>double CarreauPartiel::coeffTransfert () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-coefftransfert-22","title":"function coeffTransfert [2/2]","text":"<p>Setter coefficient de transfert pour le pas de temps d'une journee. <pre><code>void CarreauPartiel::coeffTransfert (\n    double valeur\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-cumulpctsuperficiecpamont","title":"function cumulPctSuperficieCPAmont","text":"<pre><code>int CarreauPartiel::cumulPctSuperficieCPAmont () const\n</code></pre> <p>Getter Cumul des pourcentages de superficie des carreaux partiels en</p> <p>amont, calcule \u00ef\u00bf\u00bd la sortie du carreau partiel considere. </p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-cumulpctsuperficieforetamont","title":"function cumulPctSuperficieForetAmont","text":"<pre><code>int CarreauPartiel::cumulPctSuperficieForetAmont () const\n</code></pre> <p>Getter Cumul des pourcentages de superficie de foret en amont, calcule</p> <p>a la sortie du carreau partiel considere. </p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-cumulpctsuperficielacsamont","title":"function cumulPctSuperficieLacsAmont","text":"<pre><code>int CarreauPartiel::cumulPctSuperficieLacsAmont () const\n</code></pre> <p>Getter Cumul des pourcentages de superficie des lacs en amont, calcule</p> <p>a la sortie du carreau partiel considere. </p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-cumulpctsuperficiemaraisamont","title":"function cumulPctSuperficieMaraisAmont","text":"<pre><code>int CarreauPartiel::cumulPctSuperficieMaraisAmont () const\n</code></pre> <p>Getter Cumul des pourcentages de superficie des marais en amont, calcule</p> <p>a la sortie du carreau partiel considere. </p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-custom_1","title":"function custom_1","text":"<p>Getter Custom_1. <pre><code>float CarreauPartiel::custom_1 () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-custom_2","title":"function custom_2","text":"<p>Getter Custom_2. <pre><code>float CarreauPartiel::custom_2 () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-hautmoyennearbre","title":"function hautMoyenneArbre","text":"<p>Getter hautMoy. <pre><code>double CarreauPartiel::hautMoyenneArbre () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-icarreauentier","title":"function iCarreauEntier","text":"<p>Getter Abscisse I du carreau entier auquel appartient le carreau partiel. <pre><code>int CarreauPartiel::iCarreauEntier () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-id","title":"function id","text":"<p>Getter Id du carreau partiel. <pre><code>int CarreauPartiel::id () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-idcarreauentier","title":"function idCarreauEntier","text":"<p>Getter Id du carreau entier auquel il appartient. <pre><code>int CarreauPartiel::idCarreauEntier () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-idcarreaupartielaval","title":"function idCarreauPartielAval","text":"<p>Getter Id du carreau partiel dans lequel il se jette. <pre><code>int CarreauPartiel::idCarreauPartielAval () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-idcarreauxpartielsamont","title":"function idCarreauxPartielsAmont","text":"<p>Getter Liste des id des cinq carreaux affluents possible. <pre><code>const int * CarreauPartiel::idCarreauxPartielsAmont () \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-indicefoliaire","title":"function indiceFoliaire","text":"<p>Getter Indice foliaire. <pre><code>float CarreauPartiel::indiceFoliaire () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-jcarreauentier","title":"function jCarreauEntier","text":"<p>Getter Ordonn\u00ef\u00bf\u00bde J du carreau entier auquel appartient le carreau partiel. <pre><code>int CarreauPartiel::jCarreauEntier () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-largeurcourseauprincipal","title":"function largeurCoursEauPrincipal","text":"<p>Getter Largeur du cours d'eau principal sur la parcelle (1/10 de metres). <pre><code>int CarreauPartiel::largeurCoursEauPrincipal () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-latitude","title":"function latitude","text":"<p>Getter latitude. <pre><code>int CarreauPartiel::latitude () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-longitude","title":"function longitude","text":"<p>Getter longitude. <pre><code>int CarreauPartiel::longitude () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-longueurcourseauprincipal","title":"function longueurCoursEauPrincipal","text":"<p>Getter Longueur du cours d'eau principal sur la parcelle (1/10 de km). <pre><code>int CarreauPartiel::longueurCoursEauPrincipal () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-pctconifer","title":"function pctConifer","text":"<p>Getter pctConifer. <pre><code>int CarreauPartiel::pctConifer () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-pcteau","title":"function pctEau","text":"<p>Getter Poucentage d'eau sur le carreau partiel. <pre><code>float CarreauPartiel::pctEau () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-pctfermeturefutaie","title":"function pctFermetureFutaie","text":"<p>Getter Pourcentage fermeture futaie. <pre><code>int CarreauPartiel::pctFermetureFutaie () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-pctfeuillu","title":"function pctFeuillu","text":"<p>Getter pctFeuillu. <pre><code>int CarreauPartiel::pctFeuillu () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-pctforet","title":"function pctForet","text":"<p>Getter Poucentage de foret sur le carreau partiel. <pre><code>float CarreauPartiel::pctForet () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-pctmarais","title":"function pctMarais","text":"<p>Getter Poucentage de marais sur le carreau partiel. <pre><code>float CarreauPartiel::pctMarais () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-pctsolnu","title":"function pctSolNu","text":"<p>Getter Poucentage de sol deboise sur le carreau partiel. <pre><code>float CarreauPartiel::pctSolNu () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-pctsurface","title":"function pctSurface","text":"<p>Getter Pourcentage du carreau partiel par rapport au carreau entier (0 a 1). <pre><code>float CarreauPartiel::pctSurface () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-penteriviere","title":"function penteRiviere","text":"<p>Getter Pente de la riviere sur le carreau partiel (1/1000 de metres/km). <pre><code>int CarreauPartiel::penteRiviere () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-profondeurminimum","title":"function profondeurMinimum","text":"<p>Getter Profondeur minimum (1/100 de metres). <pre><code>int CarreauPartiel::profondeurMinimum () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-superficiecpamontcorrige","title":"function superficieCPAmontCorrige","text":"<p>Setter superficieCPAmontCorrige. <pre><code>void CarreauPartiel::superficieCPAmontCorrige (\n    float valeur\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-volumeinitial-12","title":"function volumeInitial [1/2]","text":"<p>Getter Volume d'eau initial. <pre><code>float CarreauPartiel::volumeInitial () const\n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-volumeinitial-22","title":"function volumeInitial [2/2]","text":"<p>Setter Volume d'eau initial. <pre><code>void CarreauPartiel::volumeInitial (\n    float valeur\n) \n</code></pre></p>"},{"location":"CEQUEAU/classCarreauPartiel/#function-carreaupartiel_1","title":"function ~CarreauPartiel","text":"<pre><code>CarreauPartiel::~CarreauPartiel () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/CarreauPartiel.h</code></p>"},{"location":"CEQUEAU/classDLI/","title":"Class DLI","text":"<p>ClassList &gt; DLI</p> <p>Inherits the following classes: ModuleBase</p>"},{"location":"CEQUEAU/classDLI/#public-functions","title":"Public Functions","text":"Type Name DLI ()  double calculeM1 (double B)  double calculeM2 (double B, double TKR)  double calculeM3 (double B, double TKR)  double calculeM4 (double B, double ea)  double calculeM5 (double B, double TKR, double ea)  double calculeM6 (double B, double TKR, double ea)  double calculeM7 (double B, double TKR, double ea)  double calculeM8 (double B, double TKR, double ea)  double calculeM9 (double B, double ea, double LAI)  double calculeRadiation (double sigma, double ENNUAG, double TKR, double PREVAP, double TKO, double LAI, double DLI)  void initialiser (int moduleDLI, const mxArray * structParamDLI)  void lireParametres (const mxArray * paramSimul, int numParams)  int moduleDLI ()"},{"location":"CEQUEAU/classDLI/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classDLI/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classDLI/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classDLI/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classDLI/#function-dli","title":"function DLI","text":"<pre><code>DLI::DLI () \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem1","title":"function calculeM1","text":"<pre><code>double DLI::calculeM1 (\n    double B\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem2","title":"function calculeM2","text":"<pre><code>double DLI::calculeM2 (\n    double B,\n    double TKR\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem3","title":"function calculeM3","text":"<pre><code>double DLI::calculeM3 (\n    double B,\n    double TKR\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem4","title":"function calculeM4","text":"<pre><code>double DLI::calculeM4 (\n    double B,\n    double ea\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem5","title":"function calculeM5","text":"<pre><code>double DLI::calculeM5 (\n    double B,\n    double TKR,\n    double ea\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem6","title":"function calculeM6","text":"<pre><code>double DLI::calculeM6 (\n    double B,\n    double TKR,\n    double ea\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem7","title":"function calculeM7","text":"<pre><code>double DLI::calculeM7 (\n    double B,\n    double TKR,\n    double ea\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem8","title":"function calculeM8","text":"<pre><code>double DLI::calculeM8 (\n    double B,\n    double TKR,\n    double ea\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculem9","title":"function calculeM9","text":"<pre><code>double DLI::calculeM9 (\n    double B,\n    double ea,\n    double LAI\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-calculeradiation","title":"function calculeRadiation","text":"<pre><code>double DLI::calculeRadiation (\n    double sigma,\n    double ENNUAG,\n    double TKR,\n    double PREVAP,\n    double TKO,\n    double LAI,\n    double DLI\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-initialiser","title":"function initialiser","text":"<pre><code>void DLI::initialiser (\n    int moduleDLI,\n    const mxArray * structParamDLI\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-lireparametres","title":"function lireParametres","text":"<pre><code>void DLI::lireParametres (\n    const mxArray * paramSimul,\n    int numParams\n) \n</code></pre>"},{"location":"CEQUEAU/classDLI/#function-moduledli","title":"function moduleDLI","text":"<pre><code>int DLI::moduleDLI () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/DLI.h</code></p>"},{"location":"CEQUEAU/classDLI_1_1Params/","title":"Class DLI::Params","text":"<p>ClassList &gt; Params</p>"},{"location":"CEQUEAU/classDLI_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name double a double b double c double d double u double v"},{"location":"CEQUEAU/classDLI_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classDLI_1_1Params/#variable-a","title":"variable a","text":"<pre><code>double DLI::Params::a;\n</code></pre>"},{"location":"CEQUEAU/classDLI_1_1Params/#variable-b","title":"variable b","text":"<pre><code>double DLI::Params::b;\n</code></pre>"},{"location":"CEQUEAU/classDLI_1_1Params/#variable-c","title":"variable c","text":"<pre><code>double DLI::Params::c;\n</code></pre>"},{"location":"CEQUEAU/classDLI_1_1Params/#variable-d","title":"variable d","text":"<pre><code>double DLI::Params::d;\n</code></pre>"},{"location":"CEQUEAU/classDLI_1_1Params/#variable-u","title":"variable u","text":"<pre><code>double DLI::Params::u;\n</code></pre>"},{"location":"CEQUEAU/classDLI_1_1Params/#variable-v","title":"variable v","text":"<pre><code>double DLI::Params::v;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/DLI.h</code></p>"},{"location":"CEQUEAU/classDateChrono/","title":"Class DateChrono","text":"<p>ClassList &gt; DateChrono</p>"},{"location":"CEQUEAU/classDateChrono/#public-functions","title":"Public Functions","text":"Type Name DateChrono (int year, int month, int day)  DateChrono (std::chrono::system_clock::time_point timePoint)  DateChrono ()  void display () const int getDay () const int getDayNumber () const int getDayOfYear () const int getJulianDay () const int getMonth () const std::chrono::system_clock::time_point getTimePoint ()  int getYear () const bool operator!= (const DateChrono &amp; other) const DateChrono operator+ (int days) const DateChrono &amp; operator+= (int days)  DateChrono operator- (int days) const bool operator&lt; (const DateChrono &amp; other) const bool operator&lt;= (const DateChrono &amp; other) const bool operator== (const DateChrono &amp; other) const bool operator&gt; (const DateChrono &amp; other) const bool operator&gt;= (const DateChrono &amp; other) const double toMatlabDatenum () const"},{"location":"CEQUEAU/classDateChrono/#public-static-functions","title":"Public Static Functions","text":"Type Name DateChrono fromMatlabDatenum (double matlabDatenum)"},{"location":"CEQUEAU/classDateChrono/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classDateChrono/#function-datechrono-13","title":"function DateChrono [1/3]","text":"<pre><code>DateChrono::DateChrono (\n    int year,\n    int month,\n    int day\n) \n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-datechrono-23","title":"function DateChrono [2/3]","text":"<pre><code>DateChrono::DateChrono (\n    std::chrono::system_clock::time_point timePoint\n) \n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-datechrono-33","title":"function DateChrono [3/3]","text":"<pre><code>DateChrono::DateChrono () \n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-display","title":"function display","text":"<pre><code>void DateChrono::display () const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-getday","title":"function getDay","text":"<pre><code>int DateChrono::getDay () const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-getdaynumber","title":"function getDayNumber","text":"<pre><code>int DateChrono::getDayNumber () const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-getdayofyear","title":"function getDayOfYear","text":"<pre><code>int DateChrono::getDayOfYear () const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-getjulianday","title":"function getJulianDay","text":"<pre><code>int DateChrono::getJulianDay () const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-getmonth","title":"function getMonth","text":"<pre><code>int DateChrono::getMonth () const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-gettimepoint","title":"function getTimePoint","text":"<pre><code>std::chrono::system_clock::time_point DateChrono::getTimePoint () \n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-getyear","title":"function getYear","text":"<pre><code>int DateChrono::getYear () const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator","title":"function operator!=","text":"<pre><code>bool DateChrono::operator!= (\n    const DateChrono &amp; other\n) const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator_1","title":"function operator+","text":"<pre><code>DateChrono DateChrono::operator+ (\n    int days\n) const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator_2","title":"function operator+=","text":"<pre><code>DateChrono &amp; DateChrono::operator+= (\n    int days\n) \n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator-","title":"function operator-","text":"<pre><code>DateChrono DateChrono::operator- (\n    int days\n) const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator_3","title":"function operator&lt;","text":"<pre><code>bool DateChrono::operator&lt; (\n    const DateChrono &amp; other\n) const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator_4","title":"function operator&lt;=","text":"<pre><code>bool DateChrono::operator&lt;= (\n    const DateChrono &amp; other\n) const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator_5","title":"function operator==","text":"<pre><code>bool DateChrono::operator== (\n    const DateChrono &amp; other\n) const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator_6","title":"function operator&gt;","text":"<pre><code>bool DateChrono::operator&gt; (\n    const DateChrono &amp; other\n) const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-operator_7","title":"function operator&gt;=","text":"<pre><code>bool DateChrono::operator&gt;= (\n    const DateChrono &amp; other\n) const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#function-tomatlabdatenum","title":"function toMatlabDatenum","text":"<pre><code>double DateChrono::toMatlabDatenum () const\n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"CEQUEAU/classDateChrono/#function-frommatlabdatenum","title":"function fromMatlabDatenum","text":"<pre><code>static DateChrono DateChrono::fromMatlabDatenum (\n    double matlabDatenum\n) \n</code></pre>"},{"location":"CEQUEAU/classDateChrono/#friends-documentation","title":"Friends Documentation","text":""},{"location":"CEQUEAU/classDateChrono/#friend-operator","title":"friend operator&lt;&lt;","text":"<pre><code>std::ostream &amp; DateChrono::operator&lt;&lt; (\n    std::ostream &amp; os,\n    const DateChrono &amp; date\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/DateChrono.h</code></p>"},{"location":"CEQUEAU/classDonneesInterpolation/","title":"Class DonneesInterpolation","text":"<p>ClassList &gt; DonneesInterpolation</p> <p>Donnees necessaires pour interpoler la meteo a chaque CE. </p> <ul> <li><code>#include &lt;Interpolateur.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classDonneesInterpolation/#public-attributes","title":"Public Attributes","text":"Type Name CarreauEntierPtr CE Un carreau entier. float correction Valeur calculee selon la methode d'interpolation. std::vector&lt; float &gt; distancesCE Distance des stations par rapport au CE. std::vector&lt; float &gt; facteurPonderationCE Facteur de ponderation des stations par rapport au CE. Stations stations Stations attribuees au CE selon la methode d'interpolation."},{"location":"CEQUEAU/classDonneesInterpolation/#public-functions","title":"Public Functions","text":"Type Name float calculerAltitudeMoyStation ()  float calculerSommePrecipitaionStation ()"},{"location":"CEQUEAU/classDonneesInterpolation/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classDonneesInterpolation/#variable-ce","title":"variable CE","text":"<p>Un carreau entier. <pre><code>CarreauEntierPtr DonneesInterpolation::CE;\n</code></pre></p>"},{"location":"CEQUEAU/classDonneesInterpolation/#variable-correction","title":"variable correction","text":"<p>Valeur calculee selon la methode d'interpolation. <pre><code>float DonneesInterpolation::correction;\n</code></pre></p>"},{"location":"CEQUEAU/classDonneesInterpolation/#variable-distancesce","title":"variable distancesCE","text":"<p>Distance des stations par rapport au CE. <pre><code>std::vector&lt;float&gt; DonneesInterpolation::distancesCE;\n</code></pre></p>"},{"location":"CEQUEAU/classDonneesInterpolation/#variable-facteurponderationce","title":"variable facteurPonderationCE","text":"<p>Facteur de ponderation des stations par rapport au CE. <pre><code>std::vector&lt;float&gt; DonneesInterpolation::facteurPonderationCE;\n</code></pre></p>"},{"location":"CEQUEAU/classDonneesInterpolation/#variable-stations","title":"variable stations","text":"<p>Stations attribuees au CE selon la methode d'interpolation. <pre><code>Stations DonneesInterpolation::stations;\n</code></pre></p>"},{"location":"CEQUEAU/classDonneesInterpolation/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classDonneesInterpolation/#function-calculeraltitudemoystation","title":"function calculerAltitudeMoyStation","text":"<pre><code>float DonneesInterpolation::calculerAltitudeMoyStation () \n</code></pre>"},{"location":"CEQUEAU/classDonneesInterpolation/#function-calculersommeprecipitaionstation","title":"function calculerSommePrecipitaionStation","text":"<pre><code>float DonneesInterpolation::calculerSommePrecipitaionStation () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Interpolateur.h</code></p>"},{"location":"CEQUEAU/classDonneesMeteo/","title":"Class DonneesMeteo","text":"<p>ClassList &gt; DonneesMeteo</p> <p>Ensemble des donnees meteo. More...</p> <ul> <li><code>#include &lt;DonneesMeteo.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classDonneesMeteo/#public-functions","title":"Public Functions","text":"Type Name DonneesMeteo () Constructeur. DonneesMeteo (int nbCarreauxEntiers, int nbPasDeTemps)  bool estPtot () const void initialiser (const mxArray * meteo) Initialisation des donnes meteo a partir d'un mxArray. void initialiser (const mxArray * meteo, const std::vector&lt; std::string &gt; &amp; champsFonte, const std::vector&lt; std::string &gt; &amp; champsEvapo, const std::vector&lt; std::string &gt; &amp; champsAutre) Initialisation des donnes meteo a partir d'un mxArray. void initialiserFichier (const std::string fichierEntree) Initialisation des donnes meteo a partir d'un fichier Matlab. int nbCarreauxEntiers () const int nbPasDeTemps () const void trierParId (const std::vector&lt; CarreauEntierPtr &gt; &amp; carreauxEntiers) Tri des donnees meteo selon les id des carreaux entiers. const std::vector&lt; MeteoGrille &gt; &amp; valeurs () constGetter des donnees meteo. ~DonneesMeteo ()"},{"location":"CEQUEAU/classDonneesMeteo/#detailed-description","title":"Detailed Description","text":"<p>Donnees meteo grille pour chaque pas de temps de la simulation. </p>"},{"location":"CEQUEAU/classDonneesMeteo/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classDonneesMeteo/#function-donneesmeteo-12","title":"function DonneesMeteo [1/2]","text":"<p>Constructeur. <pre><code>DonneesMeteo::DonneesMeteo () \n</code></pre></p>"},{"location":"CEQUEAU/classDonneesMeteo/#function-donneesmeteo-22","title":"function DonneesMeteo [2/2]","text":"<pre><code>DonneesMeteo::DonneesMeteo (\n    int nbCarreauxEntiers,\n    int nbPasDeTemps\n) \n</code></pre>"},{"location":"CEQUEAU/classDonneesMeteo/#function-estptot","title":"function estPtot","text":"<pre><code>bool DonneesMeteo::estPtot () const\n</code></pre>"},{"location":"CEQUEAU/classDonneesMeteo/#function-initialiser-13","title":"function initialiser [1/3]","text":"<p>Initialisation des donnes meteo a partir d'un mxArray. <pre><code>void DonneesMeteo::initialiser (\n    const mxArray * meteo\n) \n</code></pre></p>"},{"location":"CEQUEAU/classDonneesMeteo/#function-initialiser-23","title":"function initialiser [2/3]","text":"<p>Initialisation des donnes meteo a partir d'un mxArray. <pre><code>void DonneesMeteo::initialiser (\n    const mxArray * meteo,\n    const std::vector&lt; std::string &gt; &amp; champsFonte,\n    const std::vector&lt; std::string &gt; &amp; champsEvapo,\n    const std::vector&lt; std::string &gt; &amp; champsAutre\n) \n</code></pre></p>"},{"location":"CEQUEAU/classDonneesMeteo/#function-initialiserfichier","title":"function initialiserFichier","text":"<p>Initialisation des donnes meteo a partir d'un fichier Matlab. <pre><code>void DonneesMeteo::initialiserFichier (\n    const std::string fichierEntree\n) \n</code></pre></p>"},{"location":"CEQUEAU/classDonneesMeteo/#function-nbcarreauxentiers","title":"function nbCarreauxEntiers","text":"<pre><code>int DonneesMeteo::nbCarreauxEntiers () const\n</code></pre>"},{"location":"CEQUEAU/classDonneesMeteo/#function-nbpasdetemps","title":"function nbPasDeTemps","text":"<pre><code>int DonneesMeteo::nbPasDeTemps () const\n</code></pre>"},{"location":"CEQUEAU/classDonneesMeteo/#function-trierparid","title":"function trierParId","text":"<p>Tri des donnees meteo selon les id des carreaux entiers. <pre><code>void DonneesMeteo::trierParId (\n    const std::vector&lt; CarreauEntierPtr &gt; &amp; carreauxEntiers\n) \n</code></pre></p>"},{"location":"CEQUEAU/classDonneesMeteo/#function-valeurs","title":"function valeurs","text":"<p>Getter des donnees meteo. <pre><code>const std::vector&lt; MeteoGrille &gt; &amp; DonneesMeteo::valeurs () const\n</code></pre></p> <p>Retourne une reference sur un vecteur de vecteur de meteo. Pour chacun des jours on a un vecteur de meteo de chaque carreau entier. </p>"},{"location":"CEQUEAU/classDonneesMeteo/#function-donneesmeteo","title":"function ~DonneesMeteo","text":"<pre><code>DonneesMeteo::~DonneesMeteo () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/DonneesMeteo.h</code></p>"},{"location":"CEQUEAU/classEtatBarrage/","title":"Class EtatBarrage","text":"<p>ClassList &gt; EtatBarrage</p> <p>Classe de donnees de l'etat d'un barrage. </p> <ul> <li><code>#include &lt;Simulation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classEtatBarrage/#public-attributes","title":"Public Attributes","text":"Type Name float debitEntrant std::vector&lt; float &gt; debitsSortants int idCarreauPartiel float niveau float volume"},{"location":"CEQUEAU/classEtatBarrage/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEtatBarrage/#variable-debitentrant","title":"variable debitEntrant","text":"<pre><code>float EtatBarrage::debitEntrant;\n</code></pre>"},{"location":"CEQUEAU/classEtatBarrage/#variable-debitssortants","title":"variable debitsSortants","text":"<pre><code>std::vector&lt;float&gt; EtatBarrage::debitsSortants;\n</code></pre>"},{"location":"CEQUEAU/classEtatBarrage/#variable-idcarreaupartiel","title":"variable idCarreauPartiel","text":"<pre><code>int EtatBarrage::idCarreauPartiel;\n</code></pre>"},{"location":"CEQUEAU/classEtatBarrage/#variable-niveau","title":"variable niveau","text":"<pre><code>float EtatBarrage::niveau;\n</code></pre>"},{"location":"CEQUEAU/classEtatBarrage/#variable-volume","title":"variable volume","text":"<pre><code>float EtatBarrage::volume;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classEtatBarrageAssim/","title":"Class EtatBarrageAssim","text":"<p>ClassList &gt; EtatBarrageAssim</p> <p>Classe de donnees pour l'assimilation des etats d'un barrage. More...</p> <ul> <li><code>#include &lt;Simulation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classEtatBarrageAssim/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauPartiel float niveau TypeAssim niveauType float volume TypeAssim volumeType"},{"location":"CEQUEAU/classEtatBarrageAssim/#detailed-description","title":"Detailed Description","text":"<p>Utilise pour assimiler des etats aux barrage. Une valeur: on substitue cette valeur. Deux valeurs: La premiere est un facteur multiplicatif et la seconde une valeur a additionner. </p>"},{"location":"CEQUEAU/classEtatBarrageAssim/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEtatBarrageAssim/#variable-idcarreaupartiel","title":"variable idCarreauPartiel","text":"<pre><code>int EtatBarrageAssim::idCarreauPartiel;\n</code></pre>"},{"location":"CEQUEAU/classEtatBarrageAssim/#variable-niveau","title":"variable niveau","text":"<pre><code>float EtatBarrageAssim::niveau[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatBarrageAssim/#variable-niveautype","title":"variable niveauType","text":"<pre><code>TypeAssim EtatBarrageAssim::niveauType;\n</code></pre>"},{"location":"CEQUEAU/classEtatBarrageAssim/#variable-volume","title":"variable volume","text":"<pre><code>float EtatBarrageAssim::volume[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatBarrageAssim/#variable-volumetype","title":"variable volumeType","text":"<pre><code>TypeAssim EtatBarrageAssim::volumeType;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classEtatCarreauEntier/","title":"Class EtatCarreauEntier","text":"<p>ClassList &gt; EtatCarreauEntier</p> <p>Classe de donnees de l'etat d'un carreau entier. More...</p> <ul> <li><code>#include &lt;Simulation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classEtatCarreauEntier/#classes","title":"Classes","text":"Type Name class Qualite"},{"location":"CEQUEAU/classEtatCarreauEntier/#public-attributes","title":"Public Attributes","text":"Type Name class EtatCarreauEntier::Qualite Qualite float evapoPotJour int iCarreauEntier int idCarreauEntier int jCarreauEntier float niveauEauLacsMarais float niveauEauNappe float niveauEauSol float production float recharge"},{"location":"CEQUEAU/classEtatCarreauEntier/#detailed-description","title":"Detailed Description","text":"<p>Utilise pour conserver l'etat d'un carreau entier apres la fonction de production. </p>"},{"location":"CEQUEAU/classEtatCarreauEntier/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-qualite","title":"variable Qualite","text":"<pre><code>class EtatCarreauEntier::Qualite EtatCarreauEntier::Qualite;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-evapopotjour","title":"variable evapoPotJour","text":"<pre><code>float EtatCarreauEntier::evapoPotJour;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-icarreauentier","title":"variable iCarreauEntier","text":"<pre><code>int EtatCarreauEntier::iCarreauEntier;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EtatCarreauEntier::idCarreauEntier;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-jcarreauentier","title":"variable jCarreauEntier","text":"<pre><code>int EtatCarreauEntier::jCarreauEntier;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-niveaueaulacsmarais","title":"variable niveauEauLacsMarais","text":"<pre><code>float EtatCarreauEntier::niveauEauLacsMarais;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-niveaueaunappe","title":"variable niveauEauNappe","text":"<pre><code>float EtatCarreauEntier::niveauEauNappe;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-niveaueausol","title":"variable niveauEauSol","text":"<pre><code>float EtatCarreauEntier::niveauEauSol;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-production","title":"variable production","text":"<pre><code>float EtatCarreauEntier::production;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier/#variable-recharge","title":"variable recharge","text":"<pre><code>float EtatCarreauEntier::recharge;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/","title":"Class EtatCarreauEntier::Qualite","text":"<p>ClassList &gt; EtatCarreauEntier &gt; Qualite</p>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#public-attributes","title":"Public Attributes","text":"Type Name float ETRLAC float ETRNAP float ETRSOL float PPTTOT float RUISST float SLAMAT float SOLT float SONAPT"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#variable-etrlac","title":"variable ETRLAC","text":"<pre><code>float EtatCarreauEntier::Qualite::ETRLAC;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#variable-etrnap","title":"variable ETRNAP","text":"<pre><code>float EtatCarreauEntier::Qualite::ETRNAP;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#variable-etrsol","title":"variable ETRSOL","text":"<pre><code>float EtatCarreauEntier::Qualite::ETRSOL;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#variable-ppttot","title":"variable PPTTOT","text":"<pre><code>float EtatCarreauEntier::Qualite::PPTTOT;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#variable-ruisst","title":"variable RUISST","text":"<pre><code>float EtatCarreauEntier::Qualite::RUISST;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#variable-slamat","title":"variable SLAMAT","text":"<pre><code>float EtatCarreauEntier::Qualite::SLAMAT;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#variable-solt","title":"variable SOLT","text":"<pre><code>float EtatCarreauEntier::Qualite::SOLT;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntier_1_1Qualite/#variable-sonapt","title":"variable SONAPT","text":"<pre><code>float EtatCarreauEntier::Qualite::SONAPT;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/","title":"Class EtatCarreauEntierAssim","text":"<p>ClassList &gt; EtatCarreauEntierAssim</p> <p>Classe de donnees pour l'assimilation des etats d'un carreau entier. More...</p> <ul> <li><code>#include &lt;Simulation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#public-attributes","title":"Public Attributes","text":"Type Name float evapoPotJour TypeAssim evapoPotJourType int iCarreauEntier int idCarreauEntier int jCarreauEntier float niveauEauLacsMarais TypeAssim niveauEauLacsMaraisType float niveauEauNappe TypeAssim niveauEauNappeType float niveauEauSol TypeAssim niveauEauSolType float production TypeAssim productionType"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#detailed-description","title":"Detailed Description","text":"<p>Utilise pour assimiler des etats aux carreaux entiers. Une valeur: on substitue cette valeur. Deux valeurs: La premiere est un facteur multiplicatif et la seconde une valeur a additionner. </p>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-evapopotjour","title":"variable evapoPotJour","text":"<pre><code>float EtatCarreauEntierAssim::evapoPotJour[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-evapopotjourtype","title":"variable evapoPotJourType","text":"<pre><code>TypeAssim EtatCarreauEntierAssim::evapoPotJourType;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-icarreauentier","title":"variable iCarreauEntier","text":"<pre><code>int EtatCarreauEntierAssim::iCarreauEntier;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EtatCarreauEntierAssim::idCarreauEntier;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-jcarreauentier","title":"variable jCarreauEntier","text":"<pre><code>int EtatCarreauEntierAssim::jCarreauEntier;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-niveaueaulacsmarais","title":"variable niveauEauLacsMarais","text":"<pre><code>float EtatCarreauEntierAssim::niveauEauLacsMarais[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-niveaueaulacsmaraistype","title":"variable niveauEauLacsMaraisType","text":"<pre><code>TypeAssim EtatCarreauEntierAssim::niveauEauLacsMaraisType;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-niveaueaunappe","title":"variable niveauEauNappe","text":"<pre><code>float EtatCarreauEntierAssim::niveauEauNappe[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-niveaueaunappetype","title":"variable niveauEauNappeType","text":"<pre><code>TypeAssim EtatCarreauEntierAssim::niveauEauNappeType;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-niveaueausol","title":"variable niveauEauSol","text":"<pre><code>float EtatCarreauEntierAssim::niveauEauSol[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-niveaueausoltype","title":"variable niveauEauSolType","text":"<pre><code>TypeAssim EtatCarreauEntierAssim::niveauEauSolType;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-production","title":"variable production","text":"<pre><code>float EtatCarreauEntierAssim::production[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauEntierAssim/#variable-productiontype","title":"variable productionType","text":"<pre><code>TypeAssim EtatCarreauEntierAssim::productionType;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classEtatCarreauPartiel/","title":"Class EtatCarreauPartiel","text":"<p>ClassList &gt; EtatCarreauPartiel</p> <p>Classe de donnees de l'etat d'un carreau partiel. More...</p> <ul> <li><code>#include &lt;Simulation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classEtatCarreauPartiel/#classes","title":"Classes","text":"Type Name class Qualite"},{"location":"CEQUEAU/classEtatCarreauPartiel/#public-attributes","title":"Public Attributes","text":"Type Name class EtatCarreauPartiel::Qualite Qualite float apport float debit int idCarreauPartiel float volume"},{"location":"CEQUEAU/classEtatCarreauPartiel/#detailed-description","title":"Detailed Description","text":"<p>Utilise pour conserver l'etat d'un carreau partiel apres la fonction de transfert. </p>"},{"location":"CEQUEAU/classEtatCarreauPartiel/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEtatCarreauPartiel/#variable-qualite","title":"variable Qualite","text":"<pre><code>class EtatCarreauPartiel::Qualite EtatCarreauPartiel::Qualite;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartiel/#variable-apport","title":"variable apport","text":"<pre><code>float EtatCarreauPartiel::apport;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartiel/#variable-debit","title":"variable debit","text":"<pre><code>float EtatCarreauPartiel::debit;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartiel/#variable-idcarreaupartiel","title":"variable idCarreauPartiel","text":"<pre><code>int EtatCarreauPartiel::idCarreauPartiel;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartiel/#variable-volume","title":"variable volume","text":"<pre><code>float EtatCarreauPartiel::volume;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classEtatCarreauPartiel_1_1Qualite/","title":"Class EtatCarreauPartiel::Qualite","text":"<p>ClassList &gt; EtatCarreauPartiel &gt; Qualite</p>"},{"location":"CEQUEAU/classEtatCarreauPartiel_1_1Qualite/#public-attributes","title":"Public Attributes","text":"Type Name float volumeSortant"},{"location":"CEQUEAU/classEtatCarreauPartiel_1_1Qualite/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEtatCarreauPartiel_1_1Qualite/#variable-volumesortant","title":"variable volumeSortant","text":"<pre><code>float EtatCarreauPartiel::Qualite::volumeSortant;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/","title":"Class EtatCarreauPartielAssim","text":"<p>ClassList &gt; EtatCarreauPartielAssim</p> <p>Classe de donnees pour l'assimilation des etats d'un carreau partiel. More...</p> <ul> <li><code>#include &lt;Simulation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#public-attributes","title":"Public Attributes","text":"Type Name float apport TypeAssim apportType float debit TypeAssim debitType int idCarreauPartiel float volume TypeAssim volumeType"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#detailed-description","title":"Detailed Description","text":"<p>Utilise pour assimiler des etats aux carreaux partiels. Une valeur: on substitue cette valeur. Deux valeurs: La premiere est un facteur multiplicatif et la seconde une valeur a additionner. </p>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#variable-apport","title":"variable apport","text":"<pre><code>float EtatCarreauPartielAssim::apport[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#variable-apporttype","title":"variable apportType","text":"<pre><code>TypeAssim EtatCarreauPartielAssim::apportType;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#variable-debit","title":"variable debit","text":"<pre><code>float EtatCarreauPartielAssim::debit[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#variable-debittype","title":"variable debitType","text":"<pre><code>TypeAssim EtatCarreauPartielAssim::debitType;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#variable-idcarreaupartiel","title":"variable idCarreauPartiel","text":"<pre><code>int EtatCarreauPartielAssim::idCarreauPartiel;\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#variable-volume","title":"variable volume","text":"<pre><code>float EtatCarreauPartielAssim::volume[2];\n</code></pre>"},{"location":"CEQUEAU/classEtatCarreauPartielAssim/#variable-volumetype","title":"variable volumeType","text":"<pre><code>TypeAssim EtatCarreauPartielAssim::volumeType;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classEvapo/","title":"Class Evapo","text":"<p>ClassList &gt; Evapo</p> <p>Interface module d'evapotranspiration. </p> <ul> <li><code>#include &lt;Evapo.h&gt;</code></li> </ul> <p>Inherits the following classes: ModuleBase</p> <p>Inherited by the following classes: EvapoCequeau,  EvapoKPenman,  EvapoMcGuinness,  EvapoMorton,  EvapoPenmanMont,  EvapoPriestleyTaylor,  EvapoTemplate</p>"},{"location":"CEQUEAU/classEvapo/#public-functions","title":"Public Functions","text":"Type Name Evapo () Constructeur. Evapo (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Evapo ()"},{"location":"CEQUEAU/classEvapo/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classEvapo/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classEvapo/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classEvapo/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classEvapo/#function-evapo-12","title":"function Evapo [1/2]","text":"<p>Constructeur. <pre><code>inline Evapo::Evapo () \n</code></pre></p>"},{"location":"CEQUEAU/classEvapo/#function-evapo-22","title":"function Evapo [2/2]","text":"<pre><code>inline Evapo::Evapo (\n    int nbCE,\n    std::string nomModele\n) \n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int Evapo::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-calculerevapo","title":"function calculerEvapo","text":"<pre><code>virtual int Evapo::calculerEvapo (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    const float niveauEauNappe,\n    float &amp; evapotranspirationSol,\n    float &amp; evapotranspirationNappe,\n    float &amp; evaporationLac,\n    float &amp; evapotranspirationPotentielle\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int Evapo::initialiserAssimilations (\n    const mxArray * assimilations\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void Evapo::initialiserEtats (\n    const mxArray * etatsInitiaux\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void Evapo::lireParametres (\n    const mxArray * paramSimul\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * Evapo::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * Evapo::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void Evapo::preserverEtatsPasDeTemps () = 0\n</code></pre>"},{"location":"CEQUEAU/classEvapo/#function-evapo","title":"function ~Evapo","text":"<pre><code>inline virtual Evapo::~Evapo () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Evapo.h</code></p>"},{"location":"CEQUEAU/classEvapoCequeau/","title":"Class EvapoCequeau","text":"<p>ClassList &gt; EvapoCequeau</p> <p>Inherits the following classes: Evapo</p>"},{"location":"CEQUEAU/classEvapoCequeau/#classes","title":"Classes","text":"Type Name class EtatEvapoCE"},{"location":"CEQUEAU/classEvapoCequeau/#public-functions","title":"Public Functions","text":"Type Name EvapoCequeau () Constructeur. EvapoCequeau (int latitudeMoyenneBV, int nbCE, int pasParJour)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle)  const std::vector&lt; std::vector&lt; EtatEvapoCE &gt; &gt; &amp; etatsEvapo () const virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~EvapoCequeau ()"},{"location":"CEQUEAU/classEvapoCequeau/#public-functions-inherited-from-evapo","title":"Public Functions inherited from Evapo","text":"<p>See Evapo</p> Type Name Evapo () Constructeur. Evapo (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Evapo ()"},{"location":"CEQUEAU/classEvapoCequeau/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classEvapoCequeau/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classEvapoCequeau/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classEvapoCequeau/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classEvapoCequeau/#function-evapocequeau-12","title":"function EvapoCequeau [1/2]","text":"<p>Constructeur. <pre><code>EvapoCequeau::EvapoCequeau () \n</code></pre></p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-evapocequeau-22","title":"function EvapoCequeau [2/2]","text":"<pre><code>EvapoCequeau::EvapoCequeau (\n    int latitudeMoyenneBV,\n    int nbCE,\n    int pasParJour\n) \n</code></pre>"},{"location":"CEQUEAU/classEvapoCequeau/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int EvapoCequeau::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Evapo::assimiler</p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-calculerevapo","title":"function calculerEvapo","text":"<pre><code>virtual int EvapoCequeau::calculerEvapo (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    const float niveauEauNappe,\n    float &amp; evapotranspirationSol,\n    float &amp; evapotranspirationNappe,\n    float &amp; evaporationLac,\n    float &amp; evapotranspirationPotentielle\n) \n</code></pre> <p>Implements Evapo::calculerEvapo</p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-etatsevapo","title":"function etatsEvapo","text":"<pre><code>inline const std::vector&lt; std::vector&lt; EtatEvapoCE &gt; &gt; &amp; EvapoCequeau::etatsEvapo () const\n</code></pre>"},{"location":"CEQUEAU/classEvapoCequeau/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int EvapoCequeau::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Evapo::initialiserAssimilations</p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void EvapoCequeau::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Evapo::initialiserEtats</p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void EvapoCequeau::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Evapo::lireParametres</p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * EvapoCequeau::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtats</p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * EvapoCequeau::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void EvapoCequeau::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Evapo::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classEvapoCequeau/#function-evapocequeau","title":"function ~EvapoCequeau","text":"<pre><code>EvapoCequeau::~EvapoCequeau () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoCequeau.h</code></p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoCE/","title":"Class EvapoCequeau::EtatEvapoCE","text":"<p>ClassList &gt; EvapoCequeau &gt; EtatEvapoCE</p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoCE/#public-attributes","title":"Public Attributes","text":"Type Name float stateEauLibre float stateNappe float statePot float stateSol"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoCE/#variable-stateeaulibre","title":"variable stateEauLibre","text":"<pre><code>float EvapoCequeau::EtatEvapoCE::stateEauLibre;\n</code></pre>"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoCE/#variable-statenappe","title":"variable stateNappe","text":"<pre><code>float EvapoCequeau::EtatEvapoCE::stateNappe;\n</code></pre>"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoCE/#variable-statepot","title":"variable statePot","text":"<pre><code>float EvapoCequeau::EtatEvapoCE::statePot;\n</code></pre>"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoCE/#variable-statesol","title":"variable stateSol","text":"<pre><code>float EvapoCequeau::EtatEvapoCE::stateSol;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoCequeau.h</code></p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoAssimCE/","title":"Class EvapoCequeau::EtatEvapoAssimCE","text":"<p>ClassList &gt; EtatEvapoAssimCE</p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauEntier"},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoCequeau_1_1EtatEvapoAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EvapoCequeau::EtatEvapoAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoCequeau.h</code></p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1Params/","title":"Class EvapoCequeau::Params","text":"<p>ClassList &gt; Params</p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name float exposantThornthwaite Exposant de la formule de Thornthwaite;. float fractionEvapoNappe Fraction de l'\u00e9vapotranspiration prise dans le r\u00e9servoir NAPPE (de 0.0 a 1.0);. float indexThermiqueThornthwaite Valeur de l'index thermique de Thornthwaite;. int jourSoleilMaxEvapo"},{"location":"CEQUEAU/classEvapoCequeau_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoCequeau_1_1Params/#variable-exposantthornthwaite","title":"variable exposantThornthwaite","text":"<p>Exposant de la formule de Thornthwaite;. <pre><code>float EvapoCequeau::Params::exposantThornthwaite;\n</code></pre></p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1Params/#variable-fractionevaponappe","title":"variable fractionEvapoNappe","text":"<p>Fraction de l'\u00e9vapotranspiration prise dans le r\u00e9servoir NAPPE (de 0.0 a 1.0);. <pre><code>float EvapoCequeau::Params::fractionEvapoNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1Params/#variable-indexthermiquethornthwaite","title":"variable indexThermiqueThornthwaite","text":"<p>Valeur de l'index thermique de Thornthwaite;. <pre><code>float EvapoCequeau::Params::indexThermiqueThornthwaite;\n</code></pre></p>"},{"location":"CEQUEAU/classEvapoCequeau_1_1Params/#variable-joursoleilmaxevapo","title":"variable jourSoleilMaxEvapo","text":"<pre><code>int EvapoCequeau::Params::jourSoleilMaxEvapo;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoCequeau.h</code></p>"},{"location":"CEQUEAU/classEvapoKPenman/","title":"Class EvapoKPenman","text":"<p>ClassList &gt; EvapoKPenman</p> <p>Inherits the following classes: Evapo</p>"},{"location":"CEQUEAU/classEvapoKPenman/#public-functions","title":"Public Functions","text":"Type Name EvapoKPenman () Constructeur. EvapoKPenman (int latitudeMoyenneBV, int nbCE, int pasParJour)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle)  virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~EvapoKPenman ()"},{"location":"CEQUEAU/classEvapoKPenman/#public-functions-inherited-from-evapo","title":"Public Functions inherited from Evapo","text":"<p>See Evapo</p> Type Name Evapo () Constructeur. Evapo (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Evapo ()"},{"location":"CEQUEAU/classEvapoKPenman/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classEvapoKPenman/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classEvapoKPenman/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classEvapoKPenman/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classEvapoKPenman/#function-evapokpenman-12","title":"function EvapoKPenman [1/2]","text":"<p>Constructeur. <pre><code>EvapoKPenman::EvapoKPenman () \n</code></pre></p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-evapokpenman-22","title":"function EvapoKPenman [2/2]","text":"<pre><code>EvapoKPenman::EvapoKPenman (\n    int latitudeMoyenneBV,\n    int nbCE,\n    int pasParJour\n) \n</code></pre>"},{"location":"CEQUEAU/classEvapoKPenman/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int EvapoKPenman::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Evapo::assimiler</p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-calculerevapo","title":"function calculerEvapo","text":"<pre><code>virtual int EvapoKPenman::calculerEvapo (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    const float niveauEauNappe,\n    float &amp; evapotranspirationSol,\n    float &amp; evapotranspirationNappe,\n    float &amp; evaporationLac,\n    float &amp; evapotranspirationPotentielle\n) \n</code></pre> <p>Implements Evapo::calculerEvapo</p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int EvapoKPenman::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Evapo::initialiserAssimilations</p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void EvapoKPenman::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Evapo::initialiserEtats</p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void EvapoKPenman::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Evapo::lireParametres</p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * EvapoKPenman::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtats</p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * EvapoKPenman::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void EvapoKPenman::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Evapo::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classEvapoKPenman/#function-evapokpenman","title":"function ~EvapoKPenman","text":"<pre><code>EvapoKPenman::~EvapoKPenman () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoKPenman.h</code></p>"},{"location":"CEQUEAU/classEvapoKPenman_1_1EtatEvapoAssimCE/","title":"Class EvapoKPenman::EtatEvapoAssimCE","text":"<p>ClassList &gt; EtatEvapoAssimCE</p>"},{"location":"CEQUEAU/classEvapoKPenman_1_1EtatEvapoAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauEntier"},{"location":"CEQUEAU/classEvapoKPenman_1_1EtatEvapoAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoKPenman_1_1EtatEvapoAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EvapoKPenman::EtatEvapoAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoKPenman.h</code></p>"},{"location":"CEQUEAU/classEvapoKPenman_1_1EtatEvapoCE/","title":"Class EvapoKPenman::EtatEvapoCE","text":"<p>ClassList &gt; EtatEvapoCE</p> <p>The documentation for this class was generated from the following file <code>src/EvapoKPenman.h</code></p>"},{"location":"CEQUEAU/classEvapoKPenman_1_1Params/","title":"Class EvapoKPenman::Params","text":"<p>ClassList &gt; Params</p>"},{"location":"CEQUEAU/classEvapoKPenman_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name float fractionEvapoNappe"},{"location":"CEQUEAU/classEvapoKPenman_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoKPenman_1_1Params/#variable-fractionevaponappe","title":"variable fractionEvapoNappe","text":"<pre><code>float EvapoKPenman::Params::fractionEvapoNappe;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoKPenman.h</code></p>"},{"location":"CEQUEAU/classEvapoMcGuinness/","title":"Class EvapoMcGuinness","text":"<p>ClassList &gt; EvapoMcGuinness</p> <p>Inherits the following classes: Evapo</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#public-functions","title":"Public Functions","text":"Type Name EvapoMcGuinness () Constructeur. EvapoMcGuinness (int latitudeMoyenneBV, int nbCE, int pasParJour)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle)  virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~EvapoMcGuinness ()"},{"location":"CEQUEAU/classEvapoMcGuinness/#public-functions-inherited-from-evapo","title":"Public Functions inherited from Evapo","text":"<p>See Evapo</p> Type Name Evapo () Constructeur. Evapo (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Evapo ()"},{"location":"CEQUEAU/classEvapoMcGuinness/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classEvapoMcGuinness/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classEvapoMcGuinness/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classEvapoMcGuinness/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classEvapoMcGuinness/#function-evapomcguinness-12","title":"function EvapoMcGuinness [1/2]","text":"<p>Constructeur. <pre><code>EvapoMcGuinness::EvapoMcGuinness () \n</code></pre></p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-evapomcguinness-22","title":"function EvapoMcGuinness [2/2]","text":"<pre><code>EvapoMcGuinness::EvapoMcGuinness (\n    int latitudeMoyenneBV,\n    int nbCE,\n    int pasParJour\n) \n</code></pre>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int EvapoMcGuinness::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Evapo::assimiler</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-calculerevapo","title":"function calculerEvapo","text":"<pre><code>virtual int EvapoMcGuinness::calculerEvapo (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    const float niveauEauNappe,\n    float &amp; evapotranspirationSol,\n    float &amp; evapotranspirationNappe,\n    float &amp; evaporationLac,\n    float &amp; evapotranspirationPotentielle\n) \n</code></pre> <p>Implements Evapo::calculerEvapo</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int EvapoMcGuinness::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Evapo::initialiserAssimilations</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void EvapoMcGuinness::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Evapo::initialiserEtats</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void EvapoMcGuinness::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Evapo::lireParametres</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * EvapoMcGuinness::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtats</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * EvapoMcGuinness::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void EvapoMcGuinness::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Evapo::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classEvapoMcGuinness/#function-evapomcguinness","title":"function ~EvapoMcGuinness","text":"<pre><code>EvapoMcGuinness::~EvapoMcGuinness () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoMcGuinness.h</code></p>"},{"location":"CEQUEAU/classEvapoMcGuinness_1_1EtatEvapoAssimCE/","title":"Class EvapoMcGuinness::EtatEvapoAssimCE","text":"<p>ClassList &gt; EtatEvapoAssimCE</p>"},{"location":"CEQUEAU/classEvapoMcGuinness_1_1EtatEvapoAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauEntier"},{"location":"CEQUEAU/classEvapoMcGuinness_1_1EtatEvapoAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoMcGuinness_1_1EtatEvapoAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EvapoMcGuinness::EtatEvapoAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoMcGuinness.h</code></p>"},{"location":"CEQUEAU/classEvapoMcGuinness_1_1EtatEvapoCE/","title":"Class EvapoMcGuinness::EtatEvapoCE","text":"<p>ClassList &gt; EtatEvapoCE</p> <p>The documentation for this class was generated from the following file <code>src/EvapoMcGuinness.h</code></p>"},{"location":"CEQUEAU/classEvapoMcGuinness_1_1Params/","title":"Class EvapoMcGuinness::Params","text":"<p>ClassList &gt; Params</p>"},{"location":"CEQUEAU/classEvapoMcGuinness_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name float fractionEvapoNappe"},{"location":"CEQUEAU/classEvapoMcGuinness_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoMcGuinness_1_1Params/#variable-fractionevaponappe","title":"variable fractionEvapoNappe","text":"<pre><code>float EvapoMcGuinness::Params::fractionEvapoNappe;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoMcGuinness.h</code></p>"},{"location":"CEQUEAU/classEvapoMorton/","title":"Class EvapoMorton","text":"<p>ClassList &gt; EvapoMorton</p> <p>Inherits the following classes: Evapo</p>"},{"location":"CEQUEAU/classEvapoMorton/#public-functions","title":"Public Functions","text":"Type Name EvapoMorton () Constructeur. EvapoMorton (int latitudeMoyenneBV, int nbCE, int pasParJour)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle)  virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~EvapoMorton ()"},{"location":"CEQUEAU/classEvapoMorton/#public-functions-inherited-from-evapo","title":"Public Functions inherited from Evapo","text":"<p>See Evapo</p> Type Name Evapo () Constructeur. Evapo (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Evapo ()"},{"location":"CEQUEAU/classEvapoMorton/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classEvapoMorton/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classEvapoMorton/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classEvapoMorton/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classEvapoMorton/#function-evapomorton-12","title":"function EvapoMorton [1/2]","text":"<p>Constructeur. <pre><code>EvapoMorton::EvapoMorton () \n</code></pre></p>"},{"location":"CEQUEAU/classEvapoMorton/#function-evapomorton-22","title":"function EvapoMorton [2/2]","text":"<pre><code>EvapoMorton::EvapoMorton (\n    int latitudeMoyenneBV,\n    int nbCE,\n    int pasParJour\n) \n</code></pre>"},{"location":"CEQUEAU/classEvapoMorton/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int EvapoMorton::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Evapo::assimiler</p>"},{"location":"CEQUEAU/classEvapoMorton/#function-calculerevapo","title":"function calculerEvapo","text":"<pre><code>virtual int EvapoMorton::calculerEvapo (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    const float niveauEauNappe,\n    float &amp; evapotranspirationSol,\n    float &amp; evapotranspirationNappe,\n    float &amp; evaporationLac,\n    float &amp; evapotranspirationPotentielle\n) \n</code></pre> <p>Implements Evapo::calculerEvapo</p>"},{"location":"CEQUEAU/classEvapoMorton/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int EvapoMorton::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Evapo::initialiserAssimilations</p>"},{"location":"CEQUEAU/classEvapoMorton/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void EvapoMorton::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Evapo::initialiserEtats</p>"},{"location":"CEQUEAU/classEvapoMorton/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void EvapoMorton::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Evapo::lireParametres</p>"},{"location":"CEQUEAU/classEvapoMorton/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * EvapoMorton::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtats</p>"},{"location":"CEQUEAU/classEvapoMorton/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * EvapoMorton::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classEvapoMorton/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void EvapoMorton::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Evapo::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classEvapoMorton/#function-evapomorton","title":"function ~EvapoMorton","text":"<pre><code>EvapoMorton::~EvapoMorton () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoMorton.h</code></p>"},{"location":"CEQUEAU/classEvapoMorton_1_1EtatEvapoAssimCE/","title":"Class EvapoMorton::EtatEvapoAssimCE","text":"<p>ClassList &gt; EtatEvapoAssimCE</p>"},{"location":"CEQUEAU/classEvapoMorton_1_1EtatEvapoAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauEntier"},{"location":"CEQUEAU/classEvapoMorton_1_1EtatEvapoAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoMorton_1_1EtatEvapoAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EvapoMorton::EtatEvapoAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoMorton.h</code></p>"},{"location":"CEQUEAU/classEvapoMorton_1_1EtatEvapoCE/","title":"Class EvapoMorton::EtatEvapoCE","text":"<p>ClassList &gt; EtatEvapoCE</p> <p>The documentation for this class was generated from the following file <code>src/EvapoMorton.h</code></p>"},{"location":"CEQUEAU/classEvapoMorton_1_1Params/","title":"Class EvapoMorton::Params","text":"<p>ClassList &gt; Params</p>"},{"location":"CEQUEAU/classEvapoMorton_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name float fractionEvapoNappe float paramALPHA"},{"location":"CEQUEAU/classEvapoMorton_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoMorton_1_1Params/#variable-fractionevaponappe","title":"variable fractionEvapoNappe","text":"<pre><code>float EvapoMorton::Params::fractionEvapoNappe;\n</code></pre>"},{"location":"CEQUEAU/classEvapoMorton_1_1Params/#variable-paramalpha","title":"variable paramALPHA","text":"<pre><code>float EvapoMorton::Params::paramALPHA;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoMorton.h</code></p>"},{"location":"CEQUEAU/classEvapoPenmanMont/","title":"Class EvapoPenmanMont","text":"<p>ClassList &gt; EvapoPenmanMont</p> <p>Inherits the following classes: Evapo</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#public-functions","title":"Public Functions","text":"Type Name EvapoPenmanMont () Constructeur. EvapoPenmanMont (int latitudeMoyenneBV, int nbCE, int pasParJour)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle)  virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~EvapoPenmanMont ()"},{"location":"CEQUEAU/classEvapoPenmanMont/#public-functions-inherited-from-evapo","title":"Public Functions inherited from Evapo","text":"<p>See Evapo</p> Type Name Evapo () Constructeur. Evapo (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Evapo ()"},{"location":"CEQUEAU/classEvapoPenmanMont/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classEvapoPenmanMont/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classEvapoPenmanMont/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classEvapoPenmanMont/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classEvapoPenmanMont/#function-evapopenmanmont-12","title":"function EvapoPenmanMont [1/2]","text":"<p>Constructeur. <pre><code>EvapoPenmanMont::EvapoPenmanMont () \n</code></pre></p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-evapopenmanmont-22","title":"function EvapoPenmanMont [2/2]","text":"<pre><code>EvapoPenmanMont::EvapoPenmanMont (\n    int latitudeMoyenneBV,\n    int nbCE,\n    int pasParJour\n) \n</code></pre>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int EvapoPenmanMont::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Evapo::assimiler</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-calculerevapo","title":"function calculerEvapo","text":"<pre><code>virtual int EvapoPenmanMont::calculerEvapo (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    const float niveauEauNappe,\n    float &amp; evapotranspirationSol,\n    float &amp; evapotranspirationNappe,\n    float &amp; evaporationLac,\n    float &amp; evapotranspirationPotentielle\n) \n</code></pre> <p>Implements Evapo::calculerEvapo</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int EvapoPenmanMont::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Evapo::initialiserAssimilations</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void EvapoPenmanMont::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Evapo::initialiserEtats</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void EvapoPenmanMont::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Evapo::lireParametres</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * EvapoPenmanMont::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtats</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * EvapoPenmanMont::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void EvapoPenmanMont::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Evapo::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classEvapoPenmanMont/#function-evapopenmanmont","title":"function ~EvapoPenmanMont","text":"<pre><code>EvapoPenmanMont::~EvapoPenmanMont () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoPenmanMont.h</code></p>"},{"location":"CEQUEAU/classEvapoPenmanMont_1_1EtatEvapoAssimCE/","title":"Class EvapoPenmanMont::EtatEvapoAssimCE","text":"<p>ClassList &gt; EtatEvapoAssimCE</p>"},{"location":"CEQUEAU/classEvapoPenmanMont_1_1EtatEvapoAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauEntier"},{"location":"CEQUEAU/classEvapoPenmanMont_1_1EtatEvapoAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoPenmanMont_1_1EtatEvapoAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EvapoPenmanMont::EtatEvapoAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoPenmanMont.h</code></p>"},{"location":"CEQUEAU/classEvapoPenmanMont_1_1EtatEvapoCE/","title":"Class EvapoPenmanMont::EtatEvapoCE","text":"<p>ClassList &gt; EtatEvapoCE</p> <p>The documentation for this class was generated from the following file <code>src/EvapoPenmanMont.h</code></p>"},{"location":"CEQUEAU/classEvapoPenmanMont_1_1Params/","title":"Class EvapoPenmanMont::Params","text":"<p>ClassList &gt; Params</p>"},{"location":"CEQUEAU/classEvapoPenmanMont_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name float fractionEvapoNappe float paramALPHA"},{"location":"CEQUEAU/classEvapoPenmanMont_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoPenmanMont_1_1Params/#variable-fractionevaponappe","title":"variable fractionEvapoNappe","text":"<pre><code>float EvapoPenmanMont::Params::fractionEvapoNappe;\n</code></pre>"},{"location":"CEQUEAU/classEvapoPenmanMont_1_1Params/#variable-paramalpha","title":"variable paramALPHA","text":"<pre><code>float EvapoPenmanMont::Params::paramALPHA;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoPenmanMont.h</code></p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/","title":"Class EvapoPriestleyTaylor","text":"<p>ClassList &gt; EvapoPriestleyTaylor</p> <p>Inherits the following classes: Evapo</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#classes","title":"Classes","text":"Type Name class EtatEvapoCE"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#public-functions","title":"Public Functions","text":"Type Name EvapoPriestleyTaylor () Constructeur. EvapoPriestleyTaylor (int latitudeMoyenneBV, int nbCE, int pasParJour)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle)  const std::vector&lt; std::vector&lt; EtatEvapoCE &gt; &gt; &amp; etatsEvapo () const virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~EvapoPriestleyTaylor ()"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#public-functions-inherited-from-evapo","title":"Public Functions inherited from Evapo","text":"<p>See Evapo</p> Type Name Evapo () Constructeur. Evapo (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Evapo ()"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-evapopriestleytaylor-12","title":"function EvapoPriestleyTaylor [1/2]","text":"<p>Constructeur. <pre><code>EvapoPriestleyTaylor::EvapoPriestleyTaylor () \n</code></pre></p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-evapopriestleytaylor-22","title":"function EvapoPriestleyTaylor [2/2]","text":"<pre><code>EvapoPriestleyTaylor::EvapoPriestleyTaylor (\n    int latitudeMoyenneBV,\n    int nbCE,\n    int pasParJour\n) \n</code></pre>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int EvapoPriestleyTaylor::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Evapo::assimiler</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-calculerevapo","title":"function calculerEvapo","text":"<pre><code>virtual int EvapoPriestleyTaylor::calculerEvapo (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    const float niveauEauNappe,\n    float &amp; evapotranspirationSol,\n    float &amp; evapotranspirationNappe,\n    float &amp; evaporationLac,\n    float &amp; evapotranspirationPotentielle\n) \n</code></pre> <p>Implements Evapo::calculerEvapo</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-etatsevapo","title":"function etatsEvapo","text":"<pre><code>inline const std::vector&lt; std::vector&lt; EtatEvapoCE &gt; &gt; &amp; EvapoPriestleyTaylor::etatsEvapo () const\n</code></pre>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int EvapoPriestleyTaylor::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Evapo::initialiserAssimilations</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void EvapoPriestleyTaylor::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Evapo::initialiserEtats</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void EvapoPriestleyTaylor::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Evapo::lireParametres</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * EvapoPriestleyTaylor::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtats</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * EvapoPriestleyTaylor::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void EvapoPriestleyTaylor::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Evapo::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor/#function-evapopriestleytaylor","title":"function ~EvapoPriestleyTaylor","text":"<pre><code>EvapoPriestleyTaylor::~EvapoPriestleyTaylor () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoPriestleyTaylor.h</code></p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoCE/","title":"Class EvapoPriestleyTaylor::EtatEvapoCE","text":"<p>ClassList &gt; EvapoPriestleyTaylor &gt; EtatEvapoCE</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoCE/#public-attributes","title":"Public Attributes","text":"Type Name float stateEauLibre float stateNappe float statePot float stateSol"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoCE/#variable-stateeaulibre","title":"variable stateEauLibre","text":"<pre><code>float EvapoPriestleyTaylor::EtatEvapoCE::stateEauLibre;\n</code></pre>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoCE/#variable-statenappe","title":"variable stateNappe","text":"<pre><code>float EvapoPriestleyTaylor::EtatEvapoCE::stateNappe;\n</code></pre>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoCE/#variable-statepot","title":"variable statePot","text":"<pre><code>float EvapoPriestleyTaylor::EtatEvapoCE::statePot;\n</code></pre>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoCE/#variable-statesol","title":"variable stateSol","text":"<pre><code>float EvapoPriestleyTaylor::EtatEvapoCE::stateSol;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoPriestleyTaylor.h</code></p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoAssimCE/","title":"Class EvapoPriestleyTaylor::EtatEvapoAssimCE","text":"<p>ClassList &gt; EtatEvapoAssimCE</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauEntier"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1EtatEvapoAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EvapoPriestleyTaylor::EtatEvapoAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoPriestleyTaylor.h</code></p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1Params/","title":"Class EvapoPriestleyTaylor::Params","text":"<p>ClassList &gt; Params</p>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name float fractionEvapoNappe float paramALPHA"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1Params/#variable-fractionevaponappe","title":"variable fractionEvapoNappe","text":"<pre><code>float EvapoPriestleyTaylor::Params::fractionEvapoNappe;\n</code></pre>"},{"location":"CEQUEAU/classEvapoPriestleyTaylor_1_1Params/#variable-paramalpha","title":"variable paramALPHA","text":"<pre><code>float EvapoPriestleyTaylor::Params::paramALPHA;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoPriestleyTaylor.h</code></p>"},{"location":"CEQUEAU/classEvapoTemplate/","title":"Class EvapoTemplate","text":"<p>ClassList &gt; EvapoTemplate</p> <p>Inherits the following classes: Evapo</p>"},{"location":"CEQUEAU/classEvapoTemplate/#public-functions","title":"Public Functions","text":"Type Name EvapoTemplate () Constructeur. EvapoTemplate (int latitudeMoyenneBV, int nbCE, int pasParJour)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle)  virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~EvapoTemplate ()"},{"location":"CEQUEAU/classEvapoTemplate/#public-functions-inherited-from-evapo","title":"Public Functions inherited from Evapo","text":"<p>See Evapo</p> Type Name Evapo () Constructeur. Evapo (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerEvapo (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, const float niveauEauNappe, float &amp; evapotranspirationSol, float &amp; evapotranspirationNappe, float &amp; evaporationLac, float &amp; evapotranspirationPotentielle) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Evapo ()"},{"location":"CEQUEAU/classEvapoTemplate/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classEvapoTemplate/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classEvapoTemplate/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classEvapoTemplate/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classEvapoTemplate/#function-evapotemplate-12","title":"function EvapoTemplate [1/2]","text":"<p>Constructeur. <pre><code>EvapoTemplate::EvapoTemplate () \n</code></pre></p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-evapotemplate-22","title":"function EvapoTemplate [2/2]","text":"<pre><code>EvapoTemplate::EvapoTemplate (\n    int latitudeMoyenneBV,\n    int nbCE,\n    int pasParJour\n) \n</code></pre>"},{"location":"CEQUEAU/classEvapoTemplate/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int EvapoTemplate::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Evapo::assimiler</p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-calculerevapo","title":"function calculerEvapo","text":"<pre><code>virtual int EvapoTemplate::calculerEvapo (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    const float niveauEauNappe,\n    float &amp; evapotranspirationSol,\n    float &amp; evapotranspirationNappe,\n    float &amp; evaporationLac,\n    float &amp; evapotranspirationPotentielle\n) \n</code></pre> <p>Implements Evapo::calculerEvapo</p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int EvapoTemplate::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Evapo::initialiserAssimilations</p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void EvapoTemplate::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Evapo::initialiserEtats</p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void EvapoTemplate::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Evapo::lireParametres</p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * EvapoTemplate::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtats</p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * EvapoTemplate::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Evapo::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void EvapoTemplate::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Evapo::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classEvapoTemplate/#function-evapotemplate","title":"function ~EvapoTemplate","text":"<pre><code>EvapoTemplate::~EvapoTemplate () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoTemplate.h</code></p>"},{"location":"CEQUEAU/classEvapoTemplate_1_1EtatEvapoAssimCE/","title":"Class EvapoTemplate::EtatEvapoAssimCE","text":"<p>ClassList &gt; EtatEvapoAssimCE</p>"},{"location":"CEQUEAU/classEvapoTemplate_1_1EtatEvapoAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauEntier"},{"location":"CEQUEAU/classEvapoTemplate_1_1EtatEvapoAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classEvapoTemplate_1_1EtatEvapoAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int EvapoTemplate::EtatEvapoAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoTemplate.h</code></p>"},{"location":"CEQUEAU/classEvapoTemplate_1_1EtatEvapoCE/","title":"Class EvapoTemplate::EtatEvapoCE","text":"<p>ClassList &gt; EtatEvapoCE</p> <p>The documentation for this class was generated from the following file <code>src/EvapoTemplate.h</code></p>"},{"location":"CEQUEAU/classEvapoTemplate_1_1Params/","title":"Class EvapoTemplate::Params","text":"<p>ClassList &gt; Params</p> <p>The documentation for this class was generated from the following file <code>src/EvapoTemplate.h</code></p>"},{"location":"CEQUEAU/classFILELog/","title":"Class FILELog","text":"<p>ClassList &gt; FILELog</p> <p>Inherits the following classes: Log</p>"},{"location":"CEQUEAU/classFILELog/#public-functions-inherited-from-log","title":"Public Functions inherited from Log","text":"<p>See Log</p> Type Name std::ostringstream &amp; Get (TLogLevel level=logINFO)  Log ()  virtual ~Log ()"},{"location":"CEQUEAU/classFILELog/#public-static-functions-inherited-from-log","title":"Public Static Functions inherited from Log","text":"<p>See Log</p> Type Name TLogLevel FromString (const std::string &amp; level)  TLogLevel &amp; ReportingLevel ()  std::string ToString (TLogLevel level)"},{"location":"CEQUEAU/classFILELog/#protected-attributes-inherited-from-log","title":"Protected Attributes inherited from Log","text":"<p>See Log</p> Type Name std::ostringstream os <p>The documentation for this class was generated from the following file <code>src/log.h</code></p>"},{"location":"CEQUEAU/classFonte/","title":"Class Fonte","text":"<p>ClassList &gt; Fonte</p> <p>Interface module de fonte. </p> <ul> <li><code>#include &lt;Fonte.h&gt;</code></li> </ul> <p>Inherits the following classes: ModuleBase</p> <p>Inherited by the following classes: FonteCemaNeige,  FonteCequeau,  FonteTemplate,  FonteUEB</p>"},{"location":"CEQUEAU/classFonte/#public-functions","title":"Public Functions","text":"Type Name Fonte () Constructeur. Fonte (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerFonte (const DateChrono &amp; datePasDeTemps, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Fonte ()"},{"location":"CEQUEAU/classFonte/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classFonte/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classFonte/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classFonte/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classFonte/#function-fonte-12","title":"function Fonte [1/2]","text":"<p>Constructeur. <pre><code>inline Fonte::Fonte () \n</code></pre></p>"},{"location":"CEQUEAU/classFonte/#function-fonte-22","title":"function Fonte [2/2]","text":"<pre><code>inline Fonte::Fonte (\n    int nbCE,\n    std::string nomModele\n) \n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int Fonte::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-calculerfonte","title":"function calculerFonte","text":"<pre><code>virtual int Fonte::calculerFonte (\n    const DateChrono &amp; datePasDeTemps,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    float &amp; precipationsTotales,\n    float &amp; eauDisponible\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int Fonte::initialiserAssimilations (\n    const mxArray * assimilations\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void Fonte::initialiserEtats (\n    const mxArray * etatsInitiaux\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void Fonte::lireParametres (\n    const mxArray * paramSimul\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * Fonte::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * Fonte::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void Fonte::preserverEtatsPasDeTemps () = 0\n</code></pre>"},{"location":"CEQUEAU/classFonte/#function-fonte","title":"function ~Fonte","text":"<pre><code>inline virtual Fonte::~Fonte () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Fonte.h</code></p>"},{"location":"CEQUEAU/classFonteCemaNeige/","title":"Class FonteCemaNeige","text":"<p>ClassList &gt; FonteCemaNeige</p> <p>Inherits the following classes: Fonte</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#classes","title":"Classes","text":"Type Name class EtatFonteCE"},{"location":"CEQUEAU/classFonteCemaNeige/#public-functions","title":"Public Functions","text":"Type Name FonteCemaNeige () Constructeur. FonteCemaNeige (int latitudeMoyenneBV, int nbCE)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerFonte (const DateChrono &amp; datePasDeTemps, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible)  const std::vector&lt; std::vector&lt; EtatFonteCE &gt; &gt; &amp; etatsFonte () const virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~FonteCemaNeige ()"},{"location":"CEQUEAU/classFonteCemaNeige/#public-functions-inherited-from-fonte","title":"Public Functions inherited from Fonte","text":"<p>See Fonte</p> Type Name Fonte () Constructeur. Fonte (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerFonte (const DateChrono &amp; datePasDeTemps, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Fonte ()"},{"location":"CEQUEAU/classFonteCemaNeige/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classFonteCemaNeige/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classFonteCemaNeige/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classFonteCemaNeige/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classFonteCemaNeige/#function-fontecemaneige-12","title":"function FonteCemaNeige [1/2]","text":"<p>Constructeur. <pre><code>FonteCemaNeige::FonteCemaNeige () \n</code></pre></p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-fontecemaneige-22","title":"function FonteCemaNeige [2/2]","text":"<pre><code>FonteCemaNeige::FonteCemaNeige (\n    int latitudeMoyenneBV,\n    int nbCE\n) \n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int FonteCemaNeige::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Fonte::assimiler</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-calculerfonte","title":"function calculerFonte","text":"<pre><code>virtual int FonteCemaNeige::calculerFonte (\n    const DateChrono &amp; datePasDeTemps,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    float &amp; precipationsTotales,\n    float &amp; eauDisponible\n) \n</code></pre> <p>Implements Fonte::calculerFonte</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-etatsfonte","title":"function etatsFonte","text":"<pre><code>inline const std::vector&lt; std::vector&lt; EtatFonteCE &gt; &gt; &amp; FonteCemaNeige::etatsFonte () const\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int FonteCemaNeige::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Fonte::initialiserAssimilations</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void FonteCemaNeige::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Fonte::initialiserEtats</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void FonteCemaNeige::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Fonte::lireParametres</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * FonteCemaNeige::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Fonte::obtenirEtats</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * FonteCemaNeige::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Fonte::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void FonteCemaNeige::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Fonte::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classFonteCemaNeige/#function-fontecemaneige","title":"function ~FonteCemaNeige","text":"<pre><code>FonteCemaNeige::~FonteCemaNeige () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteCemaNeige.h</code></p>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteCE/","title":"Class FonteCemaNeige::EtatFonteCE","text":"<p>ClassList &gt; FonteCemaNeige &gt; EtatFonteCE</p>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteCE/#public-attributes","title":"Public Attributes","text":"Type Name float G float SNC_stockNeigeForet float SND_stockNeigeClairiere float eTg float fonte_reel"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteCE/#variable-g","title":"variable G","text":"<pre><code>float FonteCemaNeige::EtatFonteCE::G;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteCE/#variable-snc_stockneigeforet","title":"variable SNC_stockNeigeForet","text":"<pre><code>float FonteCemaNeige::EtatFonteCE::SNC_stockNeigeForet;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteCE/#variable-snd_stockneigeclairiere","title":"variable SND_stockNeigeClairiere","text":"<pre><code>float FonteCemaNeige::EtatFonteCE::SND_stockNeigeClairiere;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteCE/#variable-etg","title":"variable eTg","text":"<pre><code>float FonteCemaNeige::EtatFonteCE::eTg;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteCE/#variable-fonte_reel","title":"variable fonte_reel","text":"<pre><code>float FonteCemaNeige::EtatFonteCE::fonte_reel;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteCemaNeige.h</code></p>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteAssimCE/","title":"Class FonteCemaNeige::EtatFonteAssimCE","text":"<p>ClassList &gt; EtatFonteAssimCE</p>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name float SNC_stockNeigeForet TypeAssim SNC_stockNeigeForetType float SND_stockNeigeClairiere TypeAssim SND_stockNeigeClairiereType int idCarreauEntier"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteAssimCE/#variable-snc_stockneigeforet","title":"variable SNC_stockNeigeForet","text":"<pre><code>float FonteCemaNeige::EtatFonteAssimCE::SNC_stockNeigeForet[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteAssimCE/#variable-snc_stockneigeforettype","title":"variable SNC_stockNeigeForetType","text":"<pre><code>TypeAssim FonteCemaNeige::EtatFonteAssimCE::SNC_stockNeigeForetType;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteAssimCE/#variable-snd_stockneigeclairiere","title":"variable SND_stockNeigeClairiere","text":"<pre><code>float FonteCemaNeige::EtatFonteAssimCE::SND_stockNeigeClairiere[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteAssimCE/#variable-snd_stockneigeclairieretype","title":"variable SND_stockNeigeClairiereType","text":"<pre><code>TypeAssim FonteCemaNeige::EtatFonteAssimCE::SND_stockNeigeClairiereType;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1EtatFonteAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int FonteCemaNeige::EtatFonteAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteCemaNeige.h</code></p>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/","title":"Class FonteCemaNeige::Params","text":"<p>ClassList &gt; Params</p>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name float CTg float G float Gseuil float Kf float Tf float Vmin float Zmed float eTg float seuilTranformationPluieNeige float theta"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-ctg","title":"variable CTg","text":"<pre><code>float FonteCemaNeige::Params::CTg;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-g","title":"variable G","text":"<pre><code>float FonteCemaNeige::Params::G;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-gseuil","title":"variable Gseuil","text":"<pre><code>float FonteCemaNeige::Params::Gseuil;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-kf","title":"variable Kf","text":"<pre><code>float FonteCemaNeige::Params::Kf;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-tf","title":"variable Tf","text":"<pre><code>float FonteCemaNeige::Params::Tf;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-vmin","title":"variable Vmin","text":"<pre><code>float FonteCemaNeige::Params::Vmin;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-zmed","title":"variable Zmed","text":"<pre><code>float FonteCemaNeige::Params::Zmed;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-etg","title":"variable eTg","text":"<pre><code>float FonteCemaNeige::Params::eTg;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-seuiltranformationpluieneige","title":"variable seuilTranformationPluieNeige","text":"<pre><code>float FonteCemaNeige::Params::seuilTranformationPluieNeige;\n</code></pre>"},{"location":"CEQUEAU/classFonteCemaNeige_1_1Params/#variable-theta","title":"variable theta","text":"<pre><code>float FonteCemaNeige::Params::theta;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteCemaNeige.h</code></p>"},{"location":"CEQUEAU/classFonteCequeau/","title":"Class FonteCequeau","text":"<p>ClassList &gt; FonteCequeau</p> <p>Definition d'une classe de calcul de la fonte. </p> <ul> <li><code>#include &lt;FonteCequeau.h&gt;</code></li> </ul> <p>Inherits the following classes: Fonte</p>"},{"location":"CEQUEAU/classFonteCequeau/#classes","title":"Classes","text":"Type Name class EtatFonteCE"},{"location":"CEQUEAU/classFonteCequeau/#public-functions","title":"Public Functions","text":"Type Name FonteCequeau () Constructeur. FonteCequeau (int latitudeMoyenneBV, int nbCE)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerFonte (const DateChrono &amp; datePasDeTemps, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible)  const std::vector&lt; std::vector&lt; EtatFonteCE &gt; &gt; &amp; etatsFonte () const virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~FonteCequeau ()"},{"location":"CEQUEAU/classFonteCequeau/#public-functions-inherited-from-fonte","title":"Public Functions inherited from Fonte","text":"<p>See Fonte</p> Type Name Fonte () Constructeur. Fonte (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerFonte (const DateChrono &amp; datePasDeTemps, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Fonte ()"},{"location":"CEQUEAU/classFonteCequeau/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classFonteCequeau/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classFonteCequeau/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classFonteCequeau/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classFonteCequeau/#function-fontecequeau-12","title":"function FonteCequeau [1/2]","text":"<p>Constructeur. <pre><code>FonteCequeau::FonteCequeau () \n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau/#function-fontecequeau-22","title":"function FonteCequeau [2/2]","text":"<pre><code>FonteCequeau::FonteCequeau (\n    int latitudeMoyenneBV,\n    int nbCE\n) \n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int FonteCequeau::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Fonte::assimiler</p>"},{"location":"CEQUEAU/classFonteCequeau/#function-calculerfonte","title":"function calculerFonte","text":"<pre><code>virtual int FonteCequeau::calculerFonte (\n    const DateChrono &amp; datePasDeTemps,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    float &amp; precipationsTotales,\n    float &amp; eauDisponible\n) \n</code></pre> <p>Implements Fonte::calculerFonte</p>"},{"location":"CEQUEAU/classFonteCequeau/#function-etatsfonte","title":"function etatsFonte","text":"<pre><code>inline const std::vector&lt; std::vector&lt; EtatFonteCE &gt; &gt; &amp; FonteCequeau::etatsFonte () const\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int FonteCequeau::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Fonte::initialiserAssimilations</p>"},{"location":"CEQUEAU/classFonteCequeau/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void FonteCequeau::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Fonte::initialiserEtats</p>"},{"location":"CEQUEAU/classFonteCequeau/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void FonteCequeau::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Fonte::lireParametres</p>"},{"location":"CEQUEAU/classFonteCequeau/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * FonteCequeau::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Fonte::obtenirEtats</p>"},{"location":"CEQUEAU/classFonteCequeau/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * FonteCequeau::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Fonte::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classFonteCequeau/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void FonteCequeau::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Fonte::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classFonteCequeau/#function-fontecequeau","title":"function ~FonteCequeau","text":"<pre><code>FonteCequeau::~FonteCequeau () \n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau/#friends-documentation","title":"Friends Documentation","text":""},{"location":"CEQUEAU/classFonteCequeau/#friend-simulation","title":"friend Simulation","text":"<pre><code>class FonteCequeau::Simulation (\n    Simulation\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteCequeau.h</code></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteCE/","title":"Class FonteCequeau::EtatFonteCE","text":"<p>ClassList &gt; FonteCequeau &gt; EtatFonteCE</p>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteCE/#public-attributes","title":"Public Attributes","text":"Type Name float QNUI3_indexMurissementNeige float QNUI4_indexTempNeige float SNC_stockNeigeForet float SND_stockNeigeClairiere float eauDisponible"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteCE/#variable-qnui3_indexmurissementneige","title":"variable QNUI3_indexMurissementNeige","text":"<pre><code>float FonteCequeau::EtatFonteCE::QNUI3_indexMurissementNeige;\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteCE/#variable-qnui4_indextempneige","title":"variable QNUI4_indexTempNeige","text":"<pre><code>float FonteCequeau::EtatFonteCE::QNUI4_indexTempNeige;\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteCE/#variable-snc_stockneigeforet","title":"variable SNC_stockNeigeForet","text":"<pre><code>float FonteCequeau::EtatFonteCE::SNC_stockNeigeForet;\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteCE/#variable-snd_stockneigeclairiere","title":"variable SND_stockNeigeClairiere","text":"<pre><code>float FonteCequeau::EtatFonteCE::SND_stockNeigeClairiere;\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteCE/#variable-eaudisponible","title":"variable eauDisponible","text":"<pre><code>float FonteCequeau::EtatFonteCE::eauDisponible;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteCequeau.h</code></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/","title":"Class FonteCequeau::EtatFonteAssimCE","text":"<p>ClassList &gt; EtatFonteAssimCE</p>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name float QNUI3_indexMurissementNeige TypeAssim QNUI3_indexMurissementNeigeType float QNUI4_indexTempNeige TypeAssim QNUI4_indexTempNeigeType float SNC_stockNeigeForet TypeAssim SNC_stockNeigeForetType float SND_stockNeigeClairiere TypeAssim SND_stockNeigeClairiereType int idCarreauEntier"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-qnui3_indexmurissementneige","title":"variable QNUI3_indexMurissementNeige","text":"<pre><code>float FonteCequeau::EtatFonteAssimCE::QNUI3_indexMurissementNeige[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-qnui3_indexmurissementneigetype","title":"variable QNUI3_indexMurissementNeigeType","text":"<pre><code>TypeAssim FonteCequeau::EtatFonteAssimCE::QNUI3_indexMurissementNeigeType;\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-qnui4_indextempneige","title":"variable QNUI4_indexTempNeige","text":"<pre><code>float FonteCequeau::EtatFonteAssimCE::QNUI4_indexTempNeige[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-qnui4_indextempneigetype","title":"variable QNUI4_indexTempNeigeType","text":"<pre><code>TypeAssim FonteCequeau::EtatFonteAssimCE::QNUI4_indexTempNeigeType;\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-snc_stockneigeforet","title":"variable SNC_stockNeigeForet","text":"<pre><code>float FonteCequeau::EtatFonteAssimCE::SNC_stockNeigeForet[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-snc_stockneigeforettype","title":"variable SNC_stockNeigeForetType","text":"<pre><code>TypeAssim FonteCequeau::EtatFonteAssimCE::SNC_stockNeigeForetType;\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-snd_stockneigeclairiere","title":"variable SND_stockNeigeClairiere","text":"<pre><code>float FonteCequeau::EtatFonteAssimCE::SND_stockNeigeClairiere[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-snd_stockneigeclairieretype","title":"variable SND_stockNeigeClairiereType","text":"<pre><code>TypeAssim FonteCequeau::EtatFonteAssimCE::SND_stockNeigeClairiereType;\n</code></pre>"},{"location":"CEQUEAU/classFonteCequeau_1_1EtatFonteAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int FonteCequeau::EtatFonteAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteCequeau.h</code></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/","title":"Class FonteCequeau::Params","text":"<p>ClassList &gt; Params</p> <p>Parametres necessaires au module de fonte __</p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#public-attributes","title":"Public Attributes","text":"Type Name float coeffDeficitCalorique Coefficient de deficit calorifique. float indexMurissementNeigeIni Valeur initiale de indexMurissementNeige. float indexTempNeigeIni Valeur initiale de indexTempNeige. int jourSoleilMaxFonteNeige Parametre qui permet de decaler la date d'insolation maximale pour le. std::vector&lt; float &gt; seuilTempFonteClairiere Seuil de temp\u00ef\u00bf\u00bdrature de fonte en clairiere (degC). std::vector&lt; float &gt; seuilTempFonteForet Seuil de temp\u00ef\u00bf\u00bdrature de fonte en foret (degC). std::vector&lt; float &gt; seuilTranformationPluieNeige Seuil de transformation pluie-neige (degC). std::vector&lt; float &gt; tauxPotentielFonteClairiere Taux potentiel de fonte en clairi\u00ef\u00bf\u00bdre (mm/degC/jour). std::vector&lt; float &gt; tauxPotentielFonteForet Taux potentiel de fonte en for\u00ef\u00bf\u00bdt (mm/degC/jour). std::vector&lt; float &gt; tempMurissementNeige Temperature du murissement du stock de neige (degC)."},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-coeffdeficitcalorique","title":"variable coeffDeficitCalorique","text":"<p>Coefficient de deficit calorifique. <pre><code>float FonteCequeau::Params::coeffDeficitCalorique;\n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-indexmurissementneigeini","title":"variable indexMurissementNeigeIni","text":"<p>Valeur initiale de indexMurissementNeige. <pre><code>float FonteCequeau::Params::indexMurissementNeigeIni;\n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-indextempneigeini","title":"variable indexTempNeigeIni","text":"<p>Valeur initiale de indexTempNeige. <pre><code>float FonteCequeau::Params::indexTempNeigeIni;\n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-joursoleilmaxfonteneige","title":"variable jourSoleilMaxFonteNeige","text":"<p>Parametre qui permet de decaler la date d'insolation maximale pour le. <pre><code>int FonteCequeau::Params::jourSoleilMaxFonteNeige;\n</code></pre></p> <p>calcul de la fonte de la neige. Si 80, la dur\u00ef\u00bf\u00bde d'ensoleillement potentiel est maximale le 21 juin. </p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-seuiltempfonteclairiere","title":"variable seuilTempFonteClairiere","text":"<p>Seuil de temp\u00ef\u00bf\u00bdrature de fonte en clairiere (degC). <pre><code>std::vector&lt;float&gt; FonteCequeau::Params::seuilTempFonteClairiere;\n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-seuiltempfonteforet","title":"variable seuilTempFonteForet","text":"<p>Seuil de temp\u00ef\u00bf\u00bdrature de fonte en foret (degC). <pre><code>std::vector&lt;float&gt; FonteCequeau::Params::seuilTempFonteForet;\n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-seuiltranformationpluieneige","title":"variable seuilTranformationPluieNeige","text":"<p>Seuil de transformation pluie-neige (degC). <pre><code>std::vector&lt;float&gt; FonteCequeau::Params::seuilTranformationPluieNeige;\n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-tauxpotentielfonteclairiere","title":"variable tauxPotentielFonteClairiere","text":"<p>Taux potentiel de fonte en clairi\u00ef\u00bf\u00bdre (mm/degC/jour). <pre><code>std::vector&lt;float&gt; FonteCequeau::Params::tauxPotentielFonteClairiere;\n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-tauxpotentielfonteforet","title":"variable tauxPotentielFonteForet","text":"<p>Taux potentiel de fonte en for\u00ef\u00bf\u00bdt (mm/degC/jour). <pre><code>std::vector&lt;float&gt; FonteCequeau::Params::tauxPotentielFonteForet;\n</code></pre></p>"},{"location":"CEQUEAU/classFonteCequeau_1_1Params/#variable-tempmurissementneige","title":"variable tempMurissementNeige","text":"<p>Temperature du murissement du stock de neige (degC). <pre><code>std::vector&lt;float&gt; FonteCequeau::Params::tempMurissementNeige;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/FonteCequeau.h</code></p>"},{"location":"CEQUEAU/classFonteTemplate/","title":"Class FonteTemplate","text":"<p>ClassList &gt; FonteTemplate</p> <p>Inherits the following classes: Fonte</p>"},{"location":"CEQUEAU/classFonteTemplate/#public-functions","title":"Public Functions","text":"Type Name FonteTemplate () Constructeur. FonteTemplate (int latitudeMoyenneBV, int nbCE)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  int calculerFonte (const int &amp; noJour, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible)  virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~FonteTemplate ()"},{"location":"CEQUEAU/classFonteTemplate/#public-functions-inherited-from-fonte","title":"Public Functions inherited from Fonte","text":"<p>See Fonte</p> Type Name Fonte () Constructeur. Fonte (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerFonte (const DateChrono &amp; datePasDeTemps, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Fonte ()"},{"location":"CEQUEAU/classFonteTemplate/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classFonteTemplate/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classFonteTemplate/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classFonteTemplate/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classFonteTemplate/#function-fontetemplate-12","title":"function FonteTemplate [1/2]","text":"<p>Constructeur. <pre><code>FonteTemplate::FonteTemplate () \n</code></pre></p>"},{"location":"CEQUEAU/classFonteTemplate/#function-fontetemplate-22","title":"function FonteTemplate [2/2]","text":"<pre><code>FonteTemplate::FonteTemplate (\n    int latitudeMoyenneBV,\n    int nbCE\n) \n</code></pre>"},{"location":"CEQUEAU/classFonteTemplate/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int FonteTemplate::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Fonte::assimiler</p>"},{"location":"CEQUEAU/classFonteTemplate/#function-calculerfonte","title":"function calculerFonte","text":"<pre><code>int FonteTemplate::calculerFonte (\n    const int &amp; noJour,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    float &amp; precipationsTotales,\n    float &amp; eauDisponible\n) \n</code></pre>"},{"location":"CEQUEAU/classFonteTemplate/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int FonteTemplate::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Fonte::initialiserAssimilations</p>"},{"location":"CEQUEAU/classFonteTemplate/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void FonteTemplate::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Fonte::initialiserEtats</p>"},{"location":"CEQUEAU/classFonteTemplate/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void FonteTemplate::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Fonte::lireParametres</p>"},{"location":"CEQUEAU/classFonteTemplate/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * FonteTemplate::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Fonte::obtenirEtats</p>"},{"location":"CEQUEAU/classFonteTemplate/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * FonteTemplate::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Fonte::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classFonteTemplate/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void FonteTemplate::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Fonte::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classFonteTemplate/#function-fontetemplate","title":"function ~FonteTemplate","text":"<pre><code>FonteTemplate::~FonteTemplate () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteTemplate.h</code></p>"},{"location":"CEQUEAU/classFonteTemplate_1_1EtatFonteAssimCE/","title":"Class FonteTemplate::EtatFonteAssimCE","text":"<p>ClassList &gt; EtatFonteAssimCE</p>"},{"location":"CEQUEAU/classFonteTemplate_1_1EtatFonteAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauEntier"},{"location":"CEQUEAU/classFonteTemplate_1_1EtatFonteAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteTemplate_1_1EtatFonteAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int FonteTemplate::EtatFonteAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteTemplate.h</code></p>"},{"location":"CEQUEAU/classFonteTemplate_1_1EtatFonteCE/","title":"Class FonteTemplate::EtatFonteCE","text":"<p>ClassList &gt; EtatFonteCE</p> <p>The documentation for this class was generated from the following file <code>src/FonteTemplate.h</code></p>"},{"location":"CEQUEAU/classFonteTemplate_1_1Params/","title":"Class FonteTemplate::Params","text":"<p>ClassList &gt; Params</p> <p>The documentation for this class was generated from the following file <code>src/FonteTemplate.h</code></p>"},{"location":"CEQUEAU/classFonteUEB/","title":"Class FonteUEB","text":"<p>ClassList &gt; FonteUEB</p> <p>Definition d'une classe de calcul de la fonte. </p> <ul> <li><code>#include &lt;FonteUEB.h&gt;</code></li> </ul> <p>Inherits the following classes: Fonte</p>"},{"location":"CEQUEAU/classFonteUEB/#classes","title":"Classes","text":"Type Name class EtatFonteCE"},{"location":"CEQUEAU/classFonteUEB/#public-functions","title":"Public Functions","text":"Type Name FonteUEB ()  FonteUEB (int latitudeMoyenneBV, int nbCE)  virtual int assimiler (const DateChrono &amp; datePasDeTemps)  virtual int calculerFonte (const DateChrono &amp; datePasDeTemps, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible)  const std::vector&lt; std::vector&lt; EtatFonteCE &gt; &gt; &amp; etatsFonte () const virtual int initialiserAssimilations (const mxArray * assimilations)  virtual void initialiserEtats (const mxArray * etatsInitiaux)  virtual void lireParametres (const mxArray * paramSimul)  virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE)  virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE)  virtual void preserverEtatsPasDeTemps ()  ~FonteUEB ()"},{"location":"CEQUEAU/classFonteUEB/#public-functions-inherited-from-fonte","title":"Public Functions inherited from Fonte","text":"<p>See Fonte</p> Type Name Fonte () Constructeur. Fonte (int nbCE, std::string nomModele)  virtual int assimiler (const DateChrono &amp; datePasDeTemps) = 0 virtual int calculerFonte (const DateChrono &amp; datePasDeTemps, const Meteo &amp; meteo, const CarreauEntier &amp; carreauEntier, float &amp; precipationsTotales, float &amp; eauDisponible) = 0 virtual int initialiserAssimilations (const mxArray * assimilations) = 0 virtual void initialiserEtats (const mxArray * etatsInitiaux) = 0 virtual void lireParametres (const mxArray * paramSimul) = 0 virtual mxArray * obtenirEtats (const std::vector&lt; bool &gt; filtreCE) = 0 virtual mxArray * obtenirEtatsAvantAssimilations (const std::vector&lt; bool &gt; filtreCE) = 0 virtual void preserverEtatsPasDeTemps () = 0 virtual ~Fonte ()"},{"location":"CEQUEAU/classFonteUEB/#public-functions-inherited-from-modulebase","title":"Public Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classFonteUEB/#protected-attributes-inherited-from-modulebase","title":"Protected Attributes inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classFonteUEB/#protected-functions-inherited-from-modulebase","title":"Protected Functions inherited from ModuleBase","text":"<p>See ModuleBase</p> Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classFonteUEB/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classFonteUEB/#function-fonteueb-12","title":"function FonteUEB [1/2]","text":"<pre><code>FonteUEB::FonteUEB () \n</code></pre>"},{"location":"CEQUEAU/classFonteUEB/#function-fonteueb-22","title":"function FonteUEB [2/2]","text":"<pre><code>FonteUEB::FonteUEB (\n    int latitudeMoyenneBV,\n    int nbCE\n) \n</code></pre>"},{"location":"CEQUEAU/classFonteUEB/#function-assimiler","title":"function assimiler","text":"<pre><code>virtual int FonteUEB::assimiler (\n    const DateChrono &amp; datePasDeTemps\n) \n</code></pre> <p>Implements Fonte::assimiler</p>"},{"location":"CEQUEAU/classFonteUEB/#function-calculerfonte","title":"function calculerFonte","text":"<pre><code>virtual int FonteUEB::calculerFonte (\n    const DateChrono &amp; datePasDeTemps,\n    const Meteo &amp; meteo,\n    const CarreauEntier &amp; carreauEntier,\n    float &amp; precipationsTotales,\n    float &amp; eauDisponible\n) \n</code></pre> <p>Implements Fonte::calculerFonte</p>"},{"location":"CEQUEAU/classFonteUEB/#function-etatsfonte","title":"function etatsFonte","text":"<pre><code>inline const std::vector&lt; std::vector&lt; EtatFonteCE &gt; &gt; &amp; FonteUEB::etatsFonte () const\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB/#function-initialiserassimilations","title":"function initialiserAssimilations","text":"<pre><code>virtual int FonteUEB::initialiserAssimilations (\n    const mxArray * assimilations\n) \n</code></pre> <p>Implements Fonte::initialiserAssimilations</p>"},{"location":"CEQUEAU/classFonteUEB/#function-initialiseretats","title":"function initialiserEtats","text":"<pre><code>virtual void FonteUEB::initialiserEtats (\n    const mxArray * etatsInitiaux\n) \n</code></pre> <p>Implements Fonte::initialiserEtats</p>"},{"location":"CEQUEAU/classFonteUEB/#function-lireparametres","title":"function lireParametres","text":"<pre><code>virtual void FonteUEB::lireParametres (\n    const mxArray * paramSimul\n) \n</code></pre> <p>Implements Fonte::lireParametres</p>"},{"location":"CEQUEAU/classFonteUEB/#function-obteniretats","title":"function obtenirEtats","text":"<pre><code>virtual mxArray * FonteUEB::obtenirEtats (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Fonte::obtenirEtats</p>"},{"location":"CEQUEAU/classFonteUEB/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>virtual mxArray * FonteUEB::obtenirEtatsAvantAssimilations (\n    const std::vector&lt; bool &gt; filtreCE\n) \n</code></pre> <p>Implements Fonte::obtenirEtatsAvantAssimilations</p>"},{"location":"CEQUEAU/classFonteUEB/#function-preserveretatspasdetemps","title":"function preserverEtatsPasDeTemps","text":"<pre><code>virtual void FonteUEB::preserverEtatsPasDeTemps () \n</code></pre> <p>Implements Fonte::preserverEtatsPasDeTemps</p>"},{"location":"CEQUEAU/classFonteUEB/#function-fonteueb","title":"function ~FonteUEB","text":"<pre><code>FonteUEB::~FonteUEB () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteUEB.h</code></p>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/","title":"Class FonteUEB::EtatFonteCE","text":"<p>ClassList &gt; FonteUEB &gt; EtatFonteCE</p>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#public-attributes","title":"Public Attributes","text":"Type Name float E float Fm float Mr float Q float Qe float Qh float Qm float SNC_stockNeigeForet   = <code>0.0f</code> float SND_stockNeigeClairiere   = <code>0.0f</code> float albedo float tausn float tave float tsurf float ub float w"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-e","title":"variable E","text":"<pre><code>float FonteUEB::EtatFonteCE::E;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-fm","title":"variable Fm","text":"<pre><code>float FonteUEB::EtatFonteCE::Fm;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-mr","title":"variable Mr","text":"<pre><code>float FonteUEB::EtatFonteCE::Mr;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-q","title":"variable Q","text":"<pre><code>float FonteUEB::EtatFonteCE::Q;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-qe","title":"variable Qe","text":"<pre><code>float FonteUEB::EtatFonteCE::Qe;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-qh","title":"variable Qh","text":"<pre><code>float FonteUEB::EtatFonteCE::Qh;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-qm","title":"variable Qm","text":"<pre><code>float FonteUEB::EtatFonteCE::Qm;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-snc_stockneigeforet","title":"variable SNC_stockNeigeForet","text":"<pre><code>float FonteUEB::EtatFonteCE::SNC_stockNeigeForet;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-snd_stockneigeclairiere","title":"variable SND_stockNeigeClairiere","text":"<pre><code>float FonteUEB::EtatFonteCE::SND_stockNeigeClairiere;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-albedo","title":"variable albedo","text":"<pre><code>float FonteUEB::EtatFonteCE::albedo;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-tausn","title":"variable tausn","text":"<pre><code>float FonteUEB::EtatFonteCE::tausn;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-tave","title":"variable tave","text":"<pre><code>float FonteUEB::EtatFonteCE::tave;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-tsurf","title":"variable tsurf","text":"<pre><code>float FonteUEB::EtatFonteCE::tsurf;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-ub","title":"variable ub","text":"<pre><code>float FonteUEB::EtatFonteCE::ub;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteCE/#variable-w","title":"variable w","text":"<pre><code>float FonteUEB::EtatFonteCE::w;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteUEB.h</code></p>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/","title":"Class FonteUEB::EtatFonteAssimCE","text":"<p>ClassList &gt; EtatFonteAssimCE</p>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#public-attributes","title":"Public Attributes","text":"Type Name float QNUI3_indexMurissementNeige TypeAssim QNUI3_indexMurissementNeigeType float QNUI4_indexTempNeige TypeAssim QNUI4_indexTempNeigeType float SNC_stockNeigeForet TypeAssim SNC_stockNeigeForetType float SND_stockNeigeClairiere TypeAssim SND_stockNeigeClairiereType int idCarreauEntier"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-qnui3_indexmurissementneige","title":"variable QNUI3_indexMurissementNeige","text":"<pre><code>float FonteUEB::EtatFonteAssimCE::QNUI3_indexMurissementNeige[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-qnui3_indexmurissementneigetype","title":"variable QNUI3_indexMurissementNeigeType","text":"<pre><code>TypeAssim FonteUEB::EtatFonteAssimCE::QNUI3_indexMurissementNeigeType;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-qnui4_indextempneige","title":"variable QNUI4_indexTempNeige","text":"<pre><code>float FonteUEB::EtatFonteAssimCE::QNUI4_indexTempNeige[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-qnui4_indextempneigetype","title":"variable QNUI4_indexTempNeigeType","text":"<pre><code>TypeAssim FonteUEB::EtatFonteAssimCE::QNUI4_indexTempNeigeType;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-snc_stockneigeforet","title":"variable SNC_stockNeigeForet","text":"<pre><code>float FonteUEB::EtatFonteAssimCE::SNC_stockNeigeForet[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-snc_stockneigeforettype","title":"variable SNC_stockNeigeForetType","text":"<pre><code>TypeAssim FonteUEB::EtatFonteAssimCE::SNC_stockNeigeForetType;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-snd_stockneigeclairiere","title":"variable SND_stockNeigeClairiere","text":"<pre><code>float FonteUEB::EtatFonteAssimCE::SND_stockNeigeClairiere[2];\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-snd_stockneigeclairieretype","title":"variable SND_stockNeigeClairiereType","text":"<pre><code>TypeAssim FonteUEB::EtatFonteAssimCE::SND_stockNeigeClairiereType;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1EtatFonteAssimCE/#variable-idcarreauentier","title":"variable idCarreauEntier","text":"<pre><code>int FonteUEB::EtatFonteAssimCE::idCarreauEntier;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteUEB.h</code></p>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/","title":"Class FonteUEB::constants","text":"<p>ClassList &gt; constants</p>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#public-attributes","title":"Public Attributes","text":"Type Name float A_bg   = <code>0.25f</code> float C_g   = <code>2.09f</code> float C_p   = <code>1.005f</code> float C_s   = <code>2.09f</code> float C_w   = <code>4.191f</code> float D_e   = <code>0.4f</code> float H_f   = <code>333.5f</code> float Hne_u   = <code>2834.0f</code> float K_s   = <code>0.48f</code> float K_vc   = <code>0.4f</code> float L_c   = <code>0.05f</code> float Ra_g   = <code>287.0f</code> float g   = <code>9.81f</code> float h   = <code>0.1f</code> float mu   = <code>0.001792f</code> float nu   = <code>1.79e-6f</code> float rho_g   = <code>1700.0f</code> float rho_i   = <code>917.0f</code> float rho_s   = <code>450.0f</code> float rho_w   = <code>1000.0f</code> float stefanBoltzman   = <code>4.89888e-09f</code> float t0   = <code>0.0f</code> float tf   = <code>86400.0f</code> float tk   = <code>273.15f</code> float z   = <code>2.0f</code>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-a_bg","title":"variable A_bg","text":"<pre><code>float FonteUEB::constants::A_bg;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-c_g","title":"variable C_g","text":"<pre><code>float FonteUEB::constants::C_g;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-c_p","title":"variable C_p","text":"<pre><code>float FonteUEB::constants::C_p;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-c_s","title":"variable C_s","text":"<pre><code>float FonteUEB::constants::C_s;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-c_w","title":"variable C_w","text":"<pre><code>float FonteUEB::constants::C_w;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-d_e","title":"variable D_e","text":"<pre><code>float FonteUEB::constants::D_e;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-h_f","title":"variable H_f","text":"<pre><code>float FonteUEB::constants::H_f;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-hne_u","title":"variable Hne_u","text":"<pre><code>float FonteUEB::constants::Hne_u;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-k_s","title":"variable K_s","text":"<pre><code>float FonteUEB::constants::K_s;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-k_vc","title":"variable K_vc","text":"<pre><code>float FonteUEB::constants::K_vc;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-l_c","title":"variable L_c","text":"<pre><code>float FonteUEB::constants::L_c;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-ra_g","title":"variable Ra_g","text":"<pre><code>float FonteUEB::constants::Ra_g;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-g","title":"variable g","text":"<pre><code>float FonteUEB::constants::g;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-h","title":"variable h","text":"<pre><code>float FonteUEB::constants::h;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-mu","title":"variable mu","text":"<pre><code>float FonteUEB::constants::mu;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-nu","title":"variable nu","text":"<pre><code>float FonteUEB::constants::nu;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-rho_g","title":"variable rho_g","text":"<pre><code>float FonteUEB::constants::rho_g;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-rho_i","title":"variable rho_i","text":"<pre><code>float FonteUEB::constants::rho_i;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-rho_s","title":"variable rho_s","text":"<pre><code>float FonteUEB::constants::rho_s;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-rho_w","title":"variable rho_w","text":"<pre><code>float FonteUEB::constants::rho_w;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-stefanboltzman","title":"variable stefanBoltzman","text":"<pre><code>float FonteUEB::constants::stefanBoltzman;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-t0","title":"variable t0","text":"<pre><code>float FonteUEB::constants::t0;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-tf","title":"variable tf","text":"<pre><code>float FonteUEB::constants::tf;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-tk","title":"variable tk","text":"<pre><code>float FonteUEB::constants::tk;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1constants/#variable-z","title":"variable z","text":"<pre><code>float FonteUEB::constants::z;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteUEB.h</code></p>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/","title":"Class FonteUEB::parameters","text":"<p>ClassList &gt; parameters</p>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#public-attributes","title":"Public Attributes","text":"Type Name float D float E float K_s float K_sat float Lc float Mr float T0   = <code>0.0f</code> float Tk   = <code>273.15f</code> float Wcoeff   = <code>0.0f</code> float aep float airo float albedo float avo float b float dF float de float emc   = <code>0.98f</code> float ems   = <code>0.99f</code> int fstab   = <code>1</code> float hours float melt_frac float rho_g   = <code>1700.0f</code> float rho_s float seuilTranformationPluieNeige int snow_temp_method float tausn float tave float tsurf float ub float w float z float z0"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-d","title":"variable D","text":"<pre><code>float FonteUEB::parameters::D;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-e","title":"variable E","text":"<pre><code>float FonteUEB::parameters::E;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-k_s","title":"variable K_s","text":"<pre><code>float FonteUEB::parameters::K_s;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-k_sat","title":"variable K_sat","text":"<pre><code>float FonteUEB::parameters::K_sat;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-lc","title":"variable Lc","text":"<pre><code>float FonteUEB::parameters::Lc;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-mr","title":"variable Mr","text":"<pre><code>float FonteUEB::parameters::Mr;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-t0","title":"variable T0","text":"<pre><code>float FonteUEB::parameters::T0;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-tk","title":"variable Tk","text":"<pre><code>float FonteUEB::parameters::Tk;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-wcoeff","title":"variable Wcoeff","text":"<pre><code>float FonteUEB::parameters::Wcoeff;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-aep","title":"variable aep","text":"<pre><code>float FonteUEB::parameters::aep;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-airo","title":"variable airo","text":"<pre><code>float FonteUEB::parameters::airo;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-albedo","title":"variable albedo","text":"<pre><code>float FonteUEB::parameters::albedo;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-avo","title":"variable avo","text":"<pre><code>float FonteUEB::parameters::avo;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-b","title":"variable b","text":"<pre><code>float FonteUEB::parameters::b;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-df","title":"variable dF","text":"<pre><code>float FonteUEB::parameters::dF;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-de","title":"variable de","text":"<pre><code>float FonteUEB::parameters::de;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-emc","title":"variable emc","text":"<pre><code>float FonteUEB::parameters::emc;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-ems","title":"variable ems","text":"<pre><code>float FonteUEB::parameters::ems;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-fstab","title":"variable fstab","text":"<pre><code>int FonteUEB::parameters::fstab;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-hours","title":"variable hours","text":"<pre><code>float FonteUEB::parameters::hours;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-melt_frac","title":"variable melt_frac","text":"<pre><code>float FonteUEB::parameters::melt_frac;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-rho_g","title":"variable rho_g","text":"<pre><code>float FonteUEB::parameters::rho_g;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-rho_s","title":"variable rho_s","text":"<pre><code>float FonteUEB::parameters::rho_s;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-seuiltranformationpluieneige","title":"variable seuilTranformationPluieNeige","text":"<pre><code>float FonteUEB::parameters::seuilTranformationPluieNeige;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-snow_temp_method","title":"variable snow_temp_method","text":"<pre><code>int FonteUEB::parameters::snow_temp_method;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-tausn","title":"variable tausn","text":"<pre><code>float FonteUEB::parameters::tausn;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-tave","title":"variable tave","text":"<pre><code>float FonteUEB::parameters::tave;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-tsurf","title":"variable tsurf","text":"<pre><code>float FonteUEB::parameters::tsurf;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-ub","title":"variable ub","text":"<pre><code>float FonteUEB::parameters::ub;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-w","title":"variable w","text":"<pre><code>float FonteUEB::parameters::w;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-z","title":"variable z","text":"<pre><code>float FonteUEB::parameters::z;\n</code></pre>"},{"location":"CEQUEAU/classFonteUEB_1_1parameters/#variable-z0","title":"variable z0","text":"<pre><code>float FonteUEB::parameters::z0;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/FonteUEB.h</code></p>"},{"location":"CEQUEAU/classInfoEvacuationExt/","title":"Class InfoEvacuationExt","text":"<p>ClassList &gt; InfoEvacuationExt</p>"},{"location":"CEQUEAU/classInfoEvacuationExt/#public-attributes","title":"Public Attributes","text":"Type Name DateChrono dateDebut DateChrono dateFin ParamEquation paramDebit"},{"location":"CEQUEAU/classInfoEvacuationExt/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classInfoEvacuationExt/#variable-datedebut","title":"variable dateDebut","text":"<pre><code>DateChrono InfoEvacuationExt::dateDebut;\n</code></pre>"},{"location":"CEQUEAU/classInfoEvacuationExt/#variable-datefin","title":"variable dateFin","text":"<pre><code>DateChrono InfoEvacuationExt::dateFin;\n</code></pre>"},{"location":"CEQUEAU/classInfoEvacuationExt/#variable-paramdebit","title":"variable paramDebit","text":"<pre><code>ParamEquation InfoEvacuationExt::paramDebit;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Defs.h</code></p>"},{"location":"CEQUEAU/classInterpolateur/","title":"Class Interpolateur","text":"<p>ClassList &gt; Interpolateur</p> <p>Classe Interpolation. </p> <ul> <li><code>#include &lt;Interpolateur.h&gt;</code></li> </ul> <p>Inherited by the following classes: InterpolateurPolygoneThiessen,  InterpolateurPonderationStations</p>"},{"location":"CEQUEAU/classInterpolateur/#public-functions","title":"Public Functions","text":"Type Name Interpolateur (const BassinVersant &amp; bv, const ListeStation &amp; stations, const Parametres &amp; parametres, const ParametresInterpolation &amp; paramInterpolation, const DonneesMeteo &amp; meteoStations, const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo, int nbStation) Constructeur. virtual void executer () = 0 mxArray * obtenirMeteoInterpolee ()  virtual ~Interpolateur ()"},{"location":"CEQUEAU/classInterpolateur/#protected-attributes","title":"Protected Attributes","text":"Type Name const BassinVersant &amp; bassinVersant_ Definition du bassin versant. std::vector&lt; std::vector&lt; DonneesCarreaux &gt; &gt; donneesCarreauxTemps_ Liste des donnees necessaires pour interpoler la meteo a chaque CE et pas de temps. std::vector&lt; MeteoGrille &gt; meteoInterpolee_ Donnees meteo interpolees. const DonneesMeteo &amp; meteoStations_ Donnees meteo aux stations. const int nbStation_ const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo_ Noms des champs meteo supplementaires. const ParametresInterpolation &amp; paramInterpolation_ Parametres de l'interpolation. const Parametres &amp; parametres_ Parametres de Cequeau Quantite. const ListeStation &amp; stations_ Liste des stations meteo."},{"location":"CEQUEAU/classInterpolateur/#protected-functions","title":"Protected Functions","text":"Type Name virtual void calculerCorrections (int idxTypeMeteo, int pasDeTemps) = 0 void initialiserListeCE ()  virtual void interpoler (int pasDeTemps) = 0 int obtenirNombreAutreMeteo ()  void trouverStationPlusPres (int idxTypeMeteo, int pasDeTemps)"},{"location":"CEQUEAU/classInterpolateur/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classInterpolateur/#function-interpolateur","title":"function Interpolateur","text":"<p>Constructeur. <pre><code>Interpolateur::Interpolateur (\n    const BassinVersant &amp; bv,\n    const ListeStation &amp; stations,\n    const Parametres &amp; parametres,\n    const ParametresInterpolation &amp; paramInterpolation,\n    const DonneesMeteo &amp; meteoStations,\n    const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo,\n    int nbStation\n) \n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#function-executer","title":"function executer","text":"<pre><code>virtual void Interpolateur::executer () = 0\n</code></pre>"},{"location":"CEQUEAU/classInterpolateur/#function-obtenirmeteointerpolee","title":"function obtenirMeteoInterpolee","text":"<pre><code>mxArray * Interpolateur::obtenirMeteoInterpolee () \n</code></pre>"},{"location":"CEQUEAU/classInterpolateur/#function-interpolateur_1","title":"function ~Interpolateur","text":"<pre><code>virtual Interpolateur::~Interpolateur () \n</code></pre>"},{"location":"CEQUEAU/classInterpolateur/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"CEQUEAU/classInterpolateur/#variable-bassinversant_","title":"variable bassinVersant_","text":"<p>Definition du bassin versant. <pre><code>const BassinVersant&amp; Interpolateur::bassinVersant_;\n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#variable-donneescarreauxtemps_","title":"variable donneesCarreauxTemps_","text":"<p>Liste des donnees necessaires pour interpoler la meteo a chaque CE et pas de temps. <pre><code>std::vector&lt;std::vector&lt;DonneesCarreaux&gt; &gt; Interpolateur::donneesCarreauxTemps_;\n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#variable-meteointerpolee_","title":"variable meteoInterpolee_","text":"<p>Donnees meteo interpolees. <pre><code>std::vector&lt;MeteoGrille&gt; Interpolateur::meteoInterpolee_;\n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#variable-meteostations_","title":"variable meteoStations_","text":"<p>Donnees meteo aux stations. <pre><code>const DonneesMeteo&amp; Interpolateur::meteoStations_;\n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#variable-nbstation_","title":"variable nbStation_","text":"<pre><code>const int Interpolateur::nbStation_;\n</code></pre>"},{"location":"CEQUEAU/classInterpolateur/#variable-nomsautresmeteo_","title":"variable nomsAutresMeteo_","text":"<p>Noms des champs meteo supplementaires. <pre><code>const std::vector&lt;std::string&gt;&amp; Interpolateur::nomsAutresMeteo_;\n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#variable-paraminterpolation_","title":"variable paramInterpolation_","text":"<p>Parametres de l'interpolation. <pre><code>const ParametresInterpolation&amp; Interpolateur::paramInterpolation_;\n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#variable-parametres_","title":"variable parametres_","text":"<p>Parametres de Cequeau Quantite. <pre><code>const Parametres&amp; Interpolateur::parametres_;\n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#variable-stations_","title":"variable stations_","text":"<p>Liste des stations meteo. <pre><code>const ListeStation&amp; Interpolateur::stations_;\n</code></pre></p>"},{"location":"CEQUEAU/classInterpolateur/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"CEQUEAU/classInterpolateur/#function-calculercorrections","title":"function calculerCorrections","text":"<pre><code>virtual void Interpolateur::calculerCorrections (\n    int idxTypeMeteo,\n    int pasDeTemps\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classInterpolateur/#function-initialiserlistece","title":"function initialiserListeCE","text":"<pre><code>void Interpolateur::initialiserListeCE () \n</code></pre>"},{"location":"CEQUEAU/classInterpolateur/#function-interpoler","title":"function interpoler","text":"<pre><code>virtual void Interpolateur::interpoler (\n    int pasDeTemps\n) = 0\n</code></pre>"},{"location":"CEQUEAU/classInterpolateur/#function-obtenirnombreautremeteo","title":"function obtenirNombreAutreMeteo","text":"<pre><code>int Interpolateur::obtenirNombreAutreMeteo () \n</code></pre>"},{"location":"CEQUEAU/classInterpolateur/#function-trouverstationpluspres","title":"function trouverStationPlusPres","text":"<pre><code>void Interpolateur::trouverStationPlusPres (\n    int idxTypeMeteo,\n    int pasDeTemps\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Interpolateur.h</code></p>"},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/","title":"Class InterpolateurPolygoneThiessen","text":"<p>ClassList &gt; InterpolateurPolygoneThiessen</p> <p>Inherits the following classes: Interpolateur</p>"},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/#public-functions","title":"Public Functions","text":"Type Name InterpolateurPolygoneThiessen (const BassinVersant &amp; bv, const ListeStation &amp; stations, const Parametres &amp; parametres, const ParametresInterpolation &amp; paramInterpolation, const DonneesMeteo &amp; meteoStations, const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo)  virtual void executer ()  ~InterpolateurPolygoneThiessen ()"},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/#public-functions-inherited-from-interpolateur","title":"Public Functions inherited from Interpolateur","text":"<p>See Interpolateur</p> Type Name Interpolateur (const BassinVersant &amp; bv, const ListeStation &amp; stations, const Parametres &amp; parametres, const ParametresInterpolation &amp; paramInterpolation, const DonneesMeteo &amp; meteoStations, const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo, int nbStation) Constructeur. virtual void executer () = 0 mxArray * obtenirMeteoInterpolee ()  virtual ~Interpolateur ()"},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/#protected-attributes-inherited-from-interpolateur","title":"Protected Attributes inherited from Interpolateur","text":"<p>See Interpolateur</p> Type Name const BassinVersant &amp; bassinVersant_ Definition du bassin versant. std::vector&lt; std::vector&lt; DonneesCarreaux &gt; &gt; donneesCarreauxTemps_ Liste des donnees necessaires pour interpoler la meteo a chaque CE et pas de temps. std::vector&lt; MeteoGrille &gt; meteoInterpolee_ Donnees meteo interpolees. const DonneesMeteo &amp; meteoStations_ Donnees meteo aux stations. const int nbStation_ const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo_ Noms des champs meteo supplementaires. const ParametresInterpolation &amp; paramInterpolation_ Parametres de l'interpolation. const Parametres &amp; parametres_ Parametres de Cequeau Quantite. const ListeStation &amp; stations_ Liste des stations meteo."},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/#protected-functions-inherited-from-interpolateur","title":"Protected Functions inherited from Interpolateur","text":"<p>See Interpolateur</p> Type Name virtual void calculerCorrections (int idxTypeMeteo, int pasDeTemps) = 0 void initialiserListeCE ()  virtual void interpoler (int pasDeTemps) = 0 int obtenirNombreAutreMeteo ()  void trouverStationPlusPres (int idxTypeMeteo, int pasDeTemps)"},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/#function-interpolateurpolygonethiessen","title":"function InterpolateurPolygoneThiessen","text":"<pre><code>InterpolateurPolygoneThiessen::InterpolateurPolygoneThiessen (\n    const BassinVersant &amp; bv,\n    const ListeStation &amp; stations,\n    const Parametres &amp; parametres,\n    const ParametresInterpolation &amp; paramInterpolation,\n    const DonneesMeteo &amp; meteoStations,\n    const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo\n) \n</code></pre>"},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/#function-executer","title":"function executer","text":"<pre><code>virtual void InterpolateurPolygoneThiessen::executer () \n</code></pre> <p>Implements Interpolateur::executer</p>"},{"location":"CEQUEAU/classInterpolateurPolygoneThiessen/#function-interpolateurpolygonethiessen_1","title":"function ~InterpolateurPolygoneThiessen","text":"<pre><code>InterpolateurPolygoneThiessen::~InterpolateurPolygoneThiessen () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/InterpolateurPolygoneThiessen.h</code></p>"},{"location":"CEQUEAU/classInterpolateurPonderationStations/","title":"Class InterpolateurPonderationStations","text":"<p>ClassList &gt; InterpolateurPonderationStations</p> <p>Inherits the following classes: Interpolateur</p>"},{"location":"CEQUEAU/classInterpolateurPonderationStations/#public-functions","title":"Public Functions","text":"Type Name InterpolateurPonderationStations (const BassinVersant &amp; bv, const ListeStation &amp; stations, const Parametres &amp; parametres, const ParametresInterpolation &amp; paramInterpolation, const DonneesMeteo &amp; meteoStations, const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo)  virtual void executer ()  ~InterpolateurPonderationStations ()"},{"location":"CEQUEAU/classInterpolateurPonderationStations/#public-functions-inherited-from-interpolateur","title":"Public Functions inherited from Interpolateur","text":"<p>See Interpolateur</p> Type Name Interpolateur (const BassinVersant &amp; bv, const ListeStation &amp; stations, const Parametres &amp; parametres, const ParametresInterpolation &amp; paramInterpolation, const DonneesMeteo &amp; meteoStations, const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo, int nbStation) Constructeur. virtual void executer () = 0 mxArray * obtenirMeteoInterpolee ()  virtual ~Interpolateur ()"},{"location":"CEQUEAU/classInterpolateurPonderationStations/#protected-attributes-inherited-from-interpolateur","title":"Protected Attributes inherited from Interpolateur","text":"<p>See Interpolateur</p> Type Name const BassinVersant &amp; bassinVersant_ Definition du bassin versant. std::vector&lt; std::vector&lt; DonneesCarreaux &gt; &gt; donneesCarreauxTemps_ Liste des donnees necessaires pour interpoler la meteo a chaque CE et pas de temps. std::vector&lt; MeteoGrille &gt; meteoInterpolee_ Donnees meteo interpolees. const DonneesMeteo &amp; meteoStations_ Donnees meteo aux stations. const int nbStation_ const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo_ Noms des champs meteo supplementaires. const ParametresInterpolation &amp; paramInterpolation_ Parametres de l'interpolation. const Parametres &amp; parametres_ Parametres de Cequeau Quantite. const ListeStation &amp; stations_ Liste des stations meteo."},{"location":"CEQUEAU/classInterpolateurPonderationStations/#protected-functions-inherited-from-interpolateur","title":"Protected Functions inherited from Interpolateur","text":"<p>See Interpolateur</p> Type Name virtual void calculerCorrections (int idxTypeMeteo, int pasDeTemps) = 0 void initialiserListeCE ()  virtual void interpoler (int pasDeTemps) = 0 int obtenirNombreAutreMeteo ()  void trouverStationPlusPres (int idxTypeMeteo, int pasDeTemps)"},{"location":"CEQUEAU/classInterpolateurPonderationStations/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classInterpolateurPonderationStations/#function-interpolateurponderationstations","title":"function InterpolateurPonderationStations","text":"<pre><code>InterpolateurPonderationStations::InterpolateurPonderationStations (\n    const BassinVersant &amp; bv,\n    const ListeStation &amp; stations,\n    const Parametres &amp; parametres,\n    const ParametresInterpolation &amp; paramInterpolation,\n    const DonneesMeteo &amp; meteoStations,\n    const std::vector&lt; std::string &gt; &amp; nomsAutresMeteo\n) \n</code></pre>"},{"location":"CEQUEAU/classInterpolateurPonderationStations/#function-executer","title":"function executer","text":"<pre><code>virtual void InterpolateurPonderationStations::executer () \n</code></pre> <p>Implements Interpolateur::executer</p>"},{"location":"CEQUEAU/classInterpolateurPonderationStations/#function-interpolateurponderationstations_1","title":"function ~InterpolateurPonderationStations","text":"<pre><code>InterpolateurPonderationStations::~InterpolateurPonderationStations () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/InterpolateurPonderationStations.h</code></p>"},{"location":"CEQUEAU/classListeStation/","title":"Class ListeStation","text":"<p>ClassList &gt; ListeStation</p> <p>Definition d'une liste de stations meteo. </p> <ul> <li><code>#include &lt;ListeStation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classListeStation/#public-functions","title":"Public Functions","text":"Type Name ListeStation () Constructeur. void initialiser ()  void initialiser (const mxArray * stations)  int quantiteStations () const const Stations &amp; stations () const const StationPtr trouverStation (int id) const ~ListeStation ()"},{"location":"CEQUEAU/classListeStation/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classListeStation/#function-listestation","title":"function ListeStation","text":"<p>Constructeur. <pre><code>ListeStation::ListeStation () \n</code></pre></p>"},{"location":"CEQUEAU/classListeStation/#function-initialiser-12","title":"function initialiser [1/2]","text":"<pre><code>void ListeStation::initialiser () \n</code></pre>"},{"location":"CEQUEAU/classListeStation/#function-initialiser-22","title":"function initialiser [2/2]","text":"<pre><code>void ListeStation::initialiser (\n    const mxArray * stations\n) \n</code></pre>"},{"location":"CEQUEAU/classListeStation/#function-quantitestations","title":"function quantiteStations","text":"<pre><code>int ListeStation::quantiteStations () const\n</code></pre>"},{"location":"CEQUEAU/classListeStation/#function-stations","title":"function stations","text":"<pre><code>const Stations &amp; ListeStation::stations () const\n</code></pre>"},{"location":"CEQUEAU/classListeStation/#function-trouverstation","title":"function trouverStation","text":"<pre><code>const StationPtr ListeStation::trouverStation (\n    int id\n) const\n</code></pre>"},{"location":"CEQUEAU/classListeStation/#function-listestation_1","title":"function ~ListeStation","text":"<pre><code>ListeStation::~ListeStation () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/ListeStation.h</code></p>"},{"location":"CEQUEAU/classLog/","title":"Class Log","text":"<p>template &lt;typename T&gt;</p> <p>ClassList &gt; Log</p>"},{"location":"CEQUEAU/classLog/#public-functions","title":"Public Functions","text":"Type Name std::ostringstream &amp; Get (TLogLevel level=logINFO)  Log ()  virtual ~Log ()"},{"location":"CEQUEAU/classLog/#public-static-functions","title":"Public Static Functions","text":"Type Name TLogLevel FromString (const std::string &amp; level)  TLogLevel &amp; ReportingLevel ()  std::string ToString (TLogLevel level)"},{"location":"CEQUEAU/classLog/#protected-attributes","title":"Protected Attributes","text":"Type Name std::ostringstream os"},{"location":"CEQUEAU/classLog/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classLog/#function-get","title":"function Get","text":"<pre><code>std::ostringstream &amp; Log::Get (\n    TLogLevel level=logINFO\n) \n</code></pre>"},{"location":"CEQUEAU/classLog/#function-log-12","title":"function Log [1/2]","text":"<pre><code>Log::Log () \n</code></pre>"},{"location":"CEQUEAU/classLog/#function-log","title":"function ~Log","text":"<pre><code>virtual Log::~Log () \n</code></pre>"},{"location":"CEQUEAU/classLog/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"CEQUEAU/classLog/#function-fromstring","title":"function FromString","text":"<pre><code>static TLogLevel Log::FromString (\n    const std::string &amp; level\n) \n</code></pre>"},{"location":"CEQUEAU/classLog/#function-reportinglevel","title":"function ReportingLevel","text":"<pre><code>static TLogLevel &amp; Log::ReportingLevel () \n</code></pre>"},{"location":"CEQUEAU/classLog/#function-tostring","title":"function ToString","text":"<pre><code>static std::string Log::ToString (\n    TLogLevel level\n) \n</code></pre>"},{"location":"CEQUEAU/classLog/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"CEQUEAU/classLog/#variable-os","title":"variable os","text":"<pre><code>std::ostringstream Log&lt; T &gt;::os;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/log.h</code></p>"},{"location":"CEQUEAU/classMeteo/","title":"Class Meteo","text":"<p>ClassList &gt; Meteo</p> <p>Definition d'une donnee meteo. </p> <ul> <li><code>#include &lt;Meteo.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classMeteo/#public-functions","title":"Public Functions","text":"Type Name Meteo (float tMin, float tMax, float pluie, float neige) Constructeur. Meteo (int tMin, int tMax, int pluie, int neige) Constructeur. Meteo () Constructeur par defaut. float calculerTempMoy () constObtetion de la temperature moyenne d'une donnee meteo. int idCarreauEntier () constGetter idCarreauEntier. void idCarreauEntier (int idCarreauEntier) Setter idCarreauEntier. const std::vector&lt; float &gt; &amp; meteoAutre () constGetter donnees meteo autres (exemple: qualite) void meteoAutre (const std::vector&lt; float &gt; &amp; donneesMeteo) Setter donnees meteo autres (exemple: qualite) const std::vector&lt; float &gt; &amp; meteoEvapo () constGetter donnees meteo specifique au modele d'evapotranspiration. void meteoEvapo (const std::vector&lt; float &gt; &amp; donneesMeteo) Setter donnees meteo specifique au modele d'evapotranspiration. const std::vector&lt; float &gt; &amp; meteoFonte () constGetter donnees meteo specifique au modele de fonte. void meteoFonte (const std::vector&lt; float &gt; &amp; donneesMeteo) Setter donnees meteo specifique au modele de fonte. float neige () constGetter neige. float pluie () constGetter pluie. float tMax () constGetter tMax. float tMin () constGetter tMin. ~Meteo ()"},{"location":"CEQUEAU/classMeteo/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classMeteo/#function-meteo-13","title":"function Meteo [1/3]","text":"<p>Constructeur. <pre><code>Meteo::Meteo (\n    float tMin,\n    float tMax,\n    float pluie,\n    float neige\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tMin</code> Temperature manimale journaliere de l'air en degC </li> <li><code>tMax</code> Temperature maximale journaliere de l'air en degC </li> <li><code>pluie</code> Precipitation liquide en mm </li> <li><code>neige</code> Precipitation solide en mm d'equivalent eau </li> </ul>"},{"location":"CEQUEAU/classMeteo/#function-meteo-23","title":"function Meteo [2/3]","text":"<p>Constructeur. <pre><code>Meteo::Meteo (\n    int tMin,\n    int tMax,\n    int pluie,\n    int neige\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>tMin</code> Temperature manimale journaliere de l'air en dixieme de degC </li> <li><code>tMax</code> Temperature maximale journaliere de l'air en dixieme de degC </li> <li><code>pluie</code> Precipitation liquide en dixieme de mm </li> <li><code>neige</code> Precipitation solide en dixieme de mm d'equivalent eau </li> </ul>"},{"location":"CEQUEAU/classMeteo/#function-meteo-33","title":"function Meteo [3/3]","text":"<p>Constructeur par defaut. <pre><code>Meteo::Meteo () \n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-calculertempmoy","title":"function calculerTempMoy","text":"<p>Obtetion de la temperature moyenne d'une donnee meteo. <pre><code>float Meteo::calculerTempMoy () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-idcarreauentier-12","title":"function idCarreauEntier [1/2]","text":"<p>Getter idCarreauEntier. <pre><code>int Meteo::idCarreauEntier () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-idcarreauentier-22","title":"function idCarreauEntier [2/2]","text":"<p>Setter idCarreauEntier. <pre><code>void Meteo::idCarreauEntier (\n    int idCarreauEntier\n) \n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-meteoautre-12","title":"function meteoAutre [1/2]","text":"<p>Getter donnees meteo autres (exemple: qualite) <pre><code>const std::vector&lt; float &gt; &amp; Meteo::meteoAutre () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-meteoautre-22","title":"function meteoAutre [2/2]","text":"<p>Setter donnees meteo autres (exemple: qualite) <pre><code>void Meteo::meteoAutre (\n    const std::vector&lt; float &gt; &amp; donneesMeteo\n) \n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-meteoevapo-12","title":"function meteoEvapo [1/2]","text":"<p>Getter donnees meteo specifique au modele d'evapotranspiration. <pre><code>const std::vector&lt; float &gt; &amp; Meteo::meteoEvapo () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-meteoevapo-22","title":"function meteoEvapo [2/2]","text":"<p>Setter donnees meteo specifique au modele d'evapotranspiration. <pre><code>void Meteo::meteoEvapo (\n    const std::vector&lt; float &gt; &amp; donneesMeteo\n) \n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-meteofonte-12","title":"function meteoFonte [1/2]","text":"<p>Getter donnees meteo specifique au modele de fonte. <pre><code>const std::vector&lt; float &gt; &amp; Meteo::meteoFonte () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-meteofonte-22","title":"function meteoFonte [2/2]","text":"<p>Setter donnees meteo specifique au modele de fonte. <pre><code>void Meteo::meteoFonte (\n    const std::vector&lt; float &gt; &amp; donneesMeteo\n) \n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-neige","title":"function neige","text":"<p>Getter neige. <pre><code>float Meteo::neige () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-pluie","title":"function pluie","text":"<p>Getter pluie. <pre><code>float Meteo::pluie () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-tmax","title":"function tMax","text":"<p>Getter tMax. <pre><code>float Meteo::tMax () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-tmin","title":"function tMin","text":"<p>Getter tMin. <pre><code>float Meteo::tMin () const\n</code></pre></p>"},{"location":"CEQUEAU/classMeteo/#function-meteo","title":"function ~Meteo","text":"<pre><code>Meteo::~Meteo () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Meteo.h</code></p>"},{"location":"CEQUEAU/namespaceMexHelper/","title":"Namespace MexHelper","text":"<p>Namespace List &gt; MexHelper</p> <p>Fonctions utilitaires pour faciliter l'usage de l'API Matlab. </p>"},{"location":"CEQUEAU/namespaceMexHelper/#public-functions","title":"Public Functions","text":"Type Name void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, std::vector&lt; Type &gt; &amp; param, mwIndex index=0) Chargement de valeurs dans un vecteur. void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, Type &amp; param, mwIndex index=0) Chargement d'une valeur dans un type de base. void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, Type &amp; param, Type &amp; valDefaut, mwIndex index) Chargement d'une valeur dans un type de base avec une valeur par defaut si le champ est absent. void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, int * param, unsigned int nbItems, mwIndex index=0) Chargement des valeurs dans un array de int. void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, std::string &amp; param, mwIndex index=0) Chargement d'une valeur dans un string. void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, ParamEquation &amp; param, mwIndex index=0) Chargement des valeurs dans un ParamEquation. void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, MoyenneMois &amp; param, mwIndex index=0) Chargement des valeurs dans un MoyenneMois. void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, std::vector&lt; ParamEquation &gt; &amp; param, mwIndex index=0) Chargement des valeurs dans un vecteur de ParamEquation. void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, std::vector&lt; InfoEvacuationExt &gt; &amp; param, mwIndex index=0) Chargement des valeurs dans un vecteur de InfoEvacuationExt . void chargerValeurs (const mxArray * pStruct, const std::string &amp; nomChamp, Type &amp; param, Type valDefaut, mwIndex index)  double dateToDatenum (DateChrono &amp; aDate) Conversion d'une date en format Matlab datenum. DateChrono datenumToDate (double * aDatenum) Conversion d'un date Matlab de format datenum en date. bool hasField (const mxArray * pm, mwIndex index, const std::string &amp; fieldname) Est-ce que le champ existe dans la struct? Type * mhMxGetData (const mxArray * pm, const std::string &amp; fieldname) mxGetData generique avec gestion d'erreur. mxArray * mhMxGetField (const mxArray * pm, mwIndex index, const std::string &amp; fieldname) Equivalent d'un matOpen mais avec gestion d'erreur. double * mhMxGetPr (const mxArray * pm, const std::string &amp; fieldname) Equivalent d'un mxGetPr mais avec gestion d'erreur."},{"location":"CEQUEAU/namespaceMexHelper/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs","title":"function chargerValeurs","text":"<p>Chargement de valeurs dans un vecteur. <pre><code>template&lt;typename Type&gt;\ninline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    std::vector&lt; Type &gt; &amp; param,\n    mwIndex index=0\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_1","title":"function chargerValeurs","text":"<p>Chargement d'une valeur dans un type de base. <pre><code>template&lt;typename Type&gt;\ninline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    Type &amp; param,\n    mwIndex index=0\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_2","title":"function chargerValeurs","text":"<p>Chargement d'une valeur dans un type de base avec une valeur par defaut si le champ est absent. <pre><code>template&lt;typename Type&gt;\nvoid MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    Type &amp; param,\n    Type &amp; valDefaut,\n    mwIndex index\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_3","title":"function chargerValeurs","text":"<p>Chargement des valeurs dans un array de int. <pre><code>inline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    int * param,\n    unsigned int nbItems,\n    mwIndex index=0\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_4","title":"function chargerValeurs","text":"<p>Chargement d'une valeur dans un string. <pre><code>inline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    std::string &amp; param,\n    mwIndex index=0\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_5","title":"function chargerValeurs","text":"<p>Chargement des valeurs dans un ParamEquation. <pre><code>inline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    ParamEquation &amp; param,\n    mwIndex index=0\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_6","title":"function chargerValeurs","text":"<p>Chargement des valeurs dans un MoyenneMois. <pre><code>inline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    MoyenneMois &amp; param,\n    mwIndex index=0\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_7","title":"function chargerValeurs","text":"<p>Chargement des valeurs dans un vecteur de ParamEquation. <pre><code>inline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    std::vector&lt; ParamEquation &gt; &amp; param,\n    mwIndex index=0\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_8","title":"function chargerValeurs","text":"<p>Chargement des valeurs dans un vecteur de InfoEvacuationExt . <pre><code>inline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    std::vector&lt; InfoEvacuationExt &gt; &amp; param,\n    mwIndex index=0\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-chargervaleurs_9","title":"function chargerValeurs","text":"<pre><code>template&lt;typename Type&gt;\ninline void MexHelper::chargerValeurs (\n    const mxArray * pStruct,\n    const std::string &amp; nomChamp,\n    Type &amp; param,\n    Type valDefaut,\n    mwIndex index\n) \n</code></pre>"},{"location":"CEQUEAU/namespaceMexHelper/#function-datetodatenum","title":"function dateToDatenum","text":"<p>Conversion d'une date en format Matlab datenum. <pre><code>inline double MexHelper::dateToDatenum (\n    DateChrono &amp; aDate\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-datenumtodate","title":"function datenumToDate","text":"<p>Conversion d'un date Matlab de format datenum en date. <pre><code>inline DateChrono MexHelper::datenumToDate (\n    double * aDatenum\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-hasfield","title":"function hasField","text":"<p>Est-ce que le champ existe dans la struct? <pre><code>inline bool MexHelper::hasField (\n    const mxArray * pm,\n    mwIndex index,\n    const std::string &amp; fieldname\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-mhmxgetdata","title":"function mhMxGetData","text":"<p>mxGetData generique avec gestion d'erreur. <pre><code>template&lt;typename Type&gt;\ninline Type * MexHelper::mhMxGetData (\n    const mxArray * pm,\n    const std::string &amp; fieldname\n) \n</code></pre></p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-mhmxgetfield","title":"function mhMxGetField","text":"<p>Equivalent d'un matOpen mais avec gestion d'erreur. <pre><code>inline mxArray * MexHelper::mhMxGetField (\n    const mxArray * pm,\n    mwIndex index,\n    const std::string &amp; fieldname\n) \n</code></pre></p> <p>Equivalent d'un mxGetField mais avec gestion d'erreur. </p>"},{"location":"CEQUEAU/namespaceMexHelper/#function-mhmxgetpr","title":"function mhMxGetPr","text":"<p>Equivalent d'un mxGetPr mais avec gestion d'erreur. <pre><code>inline double * MexHelper::mhMxGetPr (\n    const mxArray * pm,\n    const std::string &amp; fieldname\n) \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/MexHelper.hpp</code></p>"},{"location":"CEQUEAU/classModuleBase/","title":"Class ModuleBase","text":"<p>ClassList &gt; ModuleBase</p> <p>Classe de base pour les modules de fonte et d'evapotranspiration. </p> <ul> <li><code>#include &lt;ModuleBase.hpp&gt;</code></li> </ul> <p>Inherited by the following classes: DLI,  Evapo,  Fonte</p>"},{"location":"CEQUEAU/classModuleBase/#public-functions","title":"Public Functions","text":"Type Name ModuleBase () Constructeur. ModuleBase (int nbCE, std::string nomModele)  std::string nomModele ()  std::vector&lt; std::string &gt; &amp; nomsChampsMeteo () Nom des intrants meteo propre au modele. virtual ~ModuleBase ()"},{"location":"CEQUEAU/classModuleBase/#protected-attributes","title":"Protected Attributes","text":"Type Name int nbCE_ Nombre de carreaux entiers."},{"location":"CEQUEAU/classModuleBase/#protected-functions","title":"Protected Functions","text":"Type Name void initialiserEtatsHelper (const mxArray * etats, std::map&lt; std::string, float * &gt; &amp; champs, Type &amp; etatCE, std::vector&lt; Type &gt; &amp; etatsCE) Helper generique pour l'initialisation des etats. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, std::vector&lt; float &gt; &amp; champ) Helper pour la lecture d'un parametre spatialisable. void lireParametresHelper (const mxArray * paramFonte, const std::string &amp; nomChamp, Type &amp; champ) Helper generique pour la lecture d'un parametre. mxArray * obtenirEtatsAvantAssimHelper (const std::vector&lt; bool &gt; &amp; filtreCE, const std::vector&lt; std::string &gt; &amp; nomChamps, const std::map&lt; DateChrono, std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim) Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. mxArray * obtenirEtatsHelper (const std::vector&lt; std::string &gt; &amp; nomsChamps, const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats, const std::vector&lt; bool &gt; &amp; filtreCE) Helper generique pour la sortie des etats en mxArray."},{"location":"CEQUEAU/classModuleBase/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classModuleBase/#function-modulebase-12","title":"function ModuleBase [1/2]","text":"<p>Constructeur. <pre><code>inline ModuleBase::ModuleBase () \n</code></pre></p>"},{"location":"CEQUEAU/classModuleBase/#function-modulebase-22","title":"function ModuleBase [2/2]","text":"<pre><code>inline ModuleBase::ModuleBase (\n    int nbCE,\n    std::string nomModele\n) \n</code></pre>"},{"location":"CEQUEAU/classModuleBase/#function-nommodele","title":"function nomModele","text":"<pre><code>inline std::string ModuleBase::nomModele () \n</code></pre>"},{"location":"CEQUEAU/classModuleBase/#function-nomschampsmeteo","title":"function nomsChampsMeteo","text":"<p>Nom des intrants meteo propre au modele. <pre><code>inline std::vector&lt; std::string &gt; &amp; ModuleBase::nomsChampsMeteo () \n</code></pre></p>"},{"location":"CEQUEAU/classModuleBase/#function-modulebase","title":"function ~ModuleBase","text":"<pre><code>inline virtual ModuleBase::~ModuleBase () \n</code></pre>"},{"location":"CEQUEAU/classModuleBase/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"CEQUEAU/classModuleBase/#variable-nbce_","title":"variable nbCE_","text":"<p>Nombre de carreaux entiers. <pre><code>int ModuleBase::nbCE_;\n</code></pre></p>"},{"location":"CEQUEAU/classModuleBase/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"CEQUEAU/classModuleBase/#function-initialiseretatshelper","title":"function initialiserEtatsHelper","text":"<p>Helper generique pour l'initialisation des etats. <pre><code>template&lt;typename Type&gt;\ninline void ModuleBase::initialiserEtatsHelper (\n    const mxArray * etats,\n    std::map&lt; std::string, float * &gt; &amp; champs,\n    Type &amp; etatCE,\n    std::vector&lt; Type &gt; &amp; etatsCE\n) \n</code></pre></p>"},{"location":"CEQUEAU/classModuleBase/#function-lireparametreshelper-12","title":"function lireParametresHelper [1/2]","text":"<p>Helper pour la lecture d'un parametre spatialisable. <pre><code>inline void ModuleBase::lireParametresHelper (\n    const mxArray * paramFonte,\n    const std::string &amp; nomChamp,\n    std::vector&lt; float &gt; &amp; champ\n) \n</code></pre></p>"},{"location":"CEQUEAU/classModuleBase/#function-lireparametreshelper-22","title":"function lireParametresHelper [2/2]","text":"<p>Helper generique pour la lecture d'un parametre. <pre><code>template&lt;typename Type&gt;\ninline void ModuleBase::lireParametresHelper (\n    const mxArray * paramFonte,\n    const std::string &amp; nomChamp,\n    Type &amp; champ\n) \n</code></pre></p>"},{"location":"CEQUEAU/classModuleBase/#function-obteniretatsavantassimhelper","title":"function obtenirEtatsAvantAssimHelper","text":"<p>Helper generique pour la sortie des sauvegarde de etats avant assimilation en mxArray. <pre><code>template&lt;typename Type&gt;\ninline mxArray * ModuleBase::obtenirEtatsAvantAssimHelper (\n    const std::vector&lt; bool &gt; &amp; filtreCE,\n    const std::vector&lt; std::string &gt; &amp; nomChamps,\n    const std::map&lt; DateChrono , std::vector&lt; Type &gt; &gt; &amp; etatsAvantAssim\n) \n</code></pre></p>"},{"location":"CEQUEAU/classModuleBase/#function-obteniretatshelper","title":"function obtenirEtatsHelper","text":"<p>Helper generique pour la sortie des etats en mxArray. <pre><code>template&lt;typename Type&gt;\ninline mxArray * ModuleBase::obtenirEtatsHelper (\n    const std::vector&lt; std::string &gt; &amp; nomsChamps,\n    const std::vector&lt; std::vector&lt; Type &gt; &gt; &amp; etats,\n    const std::vector&lt; bool &gt; &amp; filtreCE\n) \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/ModuleBase.hpp</code></p>"},{"location":"CEQUEAU/namespaceModuleEvapo/","title":"Namespace ModuleEvapo","text":"<p>Namespace List &gt; ModuleEvapo</p>"},{"location":"CEQUEAU/namespaceModuleEvapo/#public-types","title":"Public Types","text":"Type Name enum ModuleEvapo"},{"location":"CEQUEAU/namespaceModuleEvapo/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/namespaceModuleEvapo/#enum-moduleevapo","title":"enum ModuleEvapo","text":"<pre><code>enum ModuleEvapo::ModuleEvapo {\n    CEQUEAU = 1,\n    KPENMAN = 2,\n    PRIESTLEYTAYLOR = 3,\n    MCGUINNESS = 4,\n    PENMONT = 5,\n    MORTON = 6\n};\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/namespaceModuleFonte/","title":"Namespace ModuleFonte","text":"<p>Namespace List &gt; ModuleFonte</p>"},{"location":"CEQUEAU/namespaceModuleFonte/#public-types","title":"Public Types","text":"Type Name enum ModuleFonte"},{"location":"CEQUEAU/namespaceModuleFonte/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/namespaceModuleFonte/#enum-modulefonte","title":"enum ModuleFonte","text":"<pre><code>enum ModuleFonte::ModuleFonte {\n    CEQUEAU = 1,\n    CEMA_NEIGE = 2,\n    UEB = 3,\n    FONTE_TEMPLATE = 3\n};\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classOutput2FILE/","title":"Class Output2FILE","text":"<p>ClassList &gt; Output2FILE</p>"},{"location":"CEQUEAU/classOutput2FILE/#public-static-functions","title":"Public Static Functions","text":"Type Name void Output (const std::string &amp; msg)  FILE *&amp; Stream ()"},{"location":"CEQUEAU/classOutput2FILE/#public-static-functions-documentation","title":"Public Static Functions Documentation","text":""},{"location":"CEQUEAU/classOutput2FILE/#function-output","title":"function Output","text":"<pre><code>static inline void Output2FILE::Output (\n    const std::string &amp; msg\n) \n</code></pre>"},{"location":"CEQUEAU/classOutput2FILE/#function-stream","title":"function Stream","text":"<pre><code>static inline FILE *&amp; Output2FILE::Stream () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/log.h</code></p>"},{"location":"CEQUEAU/classParamCE/","title":"Class ParamCE","text":"<p>ClassList &gt; ParamCE</p> <p>Parametres spatialisables.More...</p> <ul> <li><code>#include &lt;Parametres.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParamCE/#public-attributes","title":"Public Attributes","text":"Type Name float coeffEmmagasinement float coeffInfiltrationNappe Coefficient d'infiltration dans le r\u00ef\u00bf\u00bdservoir NAPPE. float coeffVidangeBasseNappe Coefficient de vidange basse du r\u00ef\u00bf\u00bdservoir NAPPE. float coeffVidangeHauteNappe Coefficient de vidange haute du r\u00ef\u00bf\u00bdservoir NAPPE. float coeffVidangeIntermediaireSol Coefficient de vidange interm\u00ef\u00bf\u00bddiaire du r\u00ef\u00bf\u00bdservoir SOL. float conductiviteHydraulique float fractionImpermeableCE Fraction de surface imperm\u00ef\u00bf\u00bdable des carreaux entiers (de 0.0 \u00ef\u00bf\u00bd 1.0). float hauteurReservoirSol Hauteur du r\u00ef\u00bf\u00bdservoir SOL (mm). float lameEauDebutRuisellement Lame d'eau n\u00ef\u00bf\u00bdcessaire pour que d\u00ef\u00bf\u00bdbute le ruissellement sur les surfaces impermeables (mm). float seuilInfiltrationSolVersNappe Seuil d'infiltration du r\u00ef\u00bf\u00bdservoir SOL vers le r\u00ef\u00bf\u00bdservoir NAPPE (mm). float seuilPrelevementEauTauxPotentiel Seuil de pr\u00ef\u00bf\u00bdl\u00ef\u00bf\u00bdvement de l'eau \u00ef\u00bf\u00bd taux potentiel, par \u00ef\u00bf\u00bdvapotranspiration (mm). float seuilTempFonteClairiere Seuil de temp\u00ef\u00bf\u00bdrature de fonte en clairiere (degC). float seuilTempFonteForet Seuil de temp\u00ef\u00bf\u00bdrature de fonte en foret (degC). float seuilTranformationPluieNeige Seuil de transformation pluie-neige (degC). float seuilVidangeHauteNappe Seuil de vidange sup\u00ef\u00bf\u00bdrieure du r\u00ef\u00bf\u00bdservoir NAPPE (mm). float seuilVidangeIntermediaireSol Seuil de vidange interm\u00ef\u00bf\u00bddiaire du r\u00ef\u00bf\u00bdservoir SOL (mm). float tauxPotentielFonteClairiere Taux potentiel de fonte en clairi\u00ef\u00bf\u00bdre (mm/degC/jour). float tauxPotentielFonteForet Taux potentiel de fonte en for\u00ef\u00bf\u00bdt (mm/degC/jour). float tempMurissementNeige Temperature du murissement du stock de neige (degC)."},{"location":"CEQUEAU/classParamCE/#public-functions","title":"Public Functions","text":"Type Name ParamCE ()"},{"location":"CEQUEAU/classParamCE/#detailed-description","title":"Detailed Description","text":"<p>Parametres obligatoires dont la valeur peut etre modifiee</p> <p>pour chaque carreau entier a l'aide de vecteurs facultatifs. </p>"},{"location":"CEQUEAU/classParamCE/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classParamCE/#variable-coeffemmagasinement","title":"variable coeffEmmagasinement","text":"<pre><code>float ParamCE::coeffEmmagasinement;\n</code></pre>"},{"location":"CEQUEAU/classParamCE/#variable-coeffinfiltrationnappe","title":"variable coeffInfiltrationNappe","text":"<p>Coefficient d'infiltration dans le r\u00ef\u00bf\u00bdservoir NAPPE. <pre><code>float ParamCE::coeffInfiltrationNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-coeffvidangebassenappe","title":"variable coeffVidangeBasseNappe","text":"<p>Coefficient de vidange basse du r\u00ef\u00bf\u00bdservoir NAPPE. <pre><code>float ParamCE::coeffVidangeBasseNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-coeffvidangehautenappe","title":"variable coeffVidangeHauteNappe","text":"<p>Coefficient de vidange haute du r\u00ef\u00bf\u00bdservoir NAPPE. <pre><code>float ParamCE::coeffVidangeHauteNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-coeffvidangeintermediairesol","title":"variable coeffVidangeIntermediaireSol","text":"<p>Coefficient de vidange interm\u00ef\u00bf\u00bddiaire du r\u00ef\u00bf\u00bdservoir SOL. <pre><code>float ParamCE::coeffVidangeIntermediaireSol;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-conductivitehydraulique","title":"variable conductiviteHydraulique","text":"<pre><code>float ParamCE::conductiviteHydraulique;\n</code></pre>"},{"location":"CEQUEAU/classParamCE/#variable-fractionimpermeablece","title":"variable fractionImpermeableCE","text":"<p>Fraction de surface imperm\u00ef\u00bf\u00bdable des carreaux entiers (de 0.0 \u00ef\u00bf\u00bd 1.0). <pre><code>float ParamCE::fractionImpermeableCE;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-hauteurreservoirsol","title":"variable hauteurReservoirSol","text":"<p>Hauteur du r\u00ef\u00bf\u00bdservoir SOL (mm). <pre><code>float ParamCE::hauteurReservoirSol;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-lameeaudebutruisellement","title":"variable lameEauDebutRuisellement","text":"<p>Lame d'eau n\u00ef\u00bf\u00bdcessaire pour que d\u00ef\u00bf\u00bdbute le ruissellement sur les surfaces impermeables (mm). <pre><code>float ParamCE::lameEauDebutRuisellement;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-seuilinfiltrationsolversnappe","title":"variable seuilInfiltrationSolVersNappe","text":"<p>Seuil d'infiltration du r\u00ef\u00bf\u00bdservoir SOL vers le r\u00ef\u00bf\u00bdservoir NAPPE (mm). <pre><code>float ParamCE::seuilInfiltrationSolVersNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-seuilprelevementeautauxpotentiel","title":"variable seuilPrelevementEauTauxPotentiel","text":"<p>Seuil de pr\u00ef\u00bf\u00bdl\u00ef\u00bf\u00bdvement de l'eau \u00ef\u00bf\u00bd taux potentiel, par \u00ef\u00bf\u00bdvapotranspiration (mm). <pre><code>float ParamCE::seuilPrelevementEauTauxPotentiel;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-seuiltempfonteclairiere","title":"variable seuilTempFonteClairiere","text":"<p>Seuil de temp\u00ef\u00bf\u00bdrature de fonte en clairiere (degC). <pre><code>float ParamCE::seuilTempFonteClairiere;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-seuiltempfonteforet","title":"variable seuilTempFonteForet","text":"<p>Seuil de temp\u00ef\u00bf\u00bdrature de fonte en foret (degC). <pre><code>float ParamCE::seuilTempFonteForet;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-seuiltranformationpluieneige","title":"variable seuilTranformationPluieNeige","text":"<p>Seuil de transformation pluie-neige (degC). <pre><code>float ParamCE::seuilTranformationPluieNeige;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-seuilvidangehautenappe","title":"variable seuilVidangeHauteNappe","text":"<p>Seuil de vidange sup\u00ef\u00bf\u00bdrieure du r\u00ef\u00bf\u00bdservoir NAPPE (mm). <pre><code>float ParamCE::seuilVidangeHauteNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-seuilvidangeintermediairesol","title":"variable seuilVidangeIntermediaireSol","text":"<p>Seuil de vidange interm\u00ef\u00bf\u00bddiaire du r\u00ef\u00bf\u00bdservoir SOL (mm). <pre><code>float ParamCE::seuilVidangeIntermediaireSol;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-tauxpotentielfonteclairiere","title":"variable tauxPotentielFonteClairiere","text":"<p>Taux potentiel de fonte en clairi\u00ef\u00bf\u00bdre (mm/degC/jour). <pre><code>float ParamCE::tauxPotentielFonteClairiere;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-tauxpotentielfonteforet","title":"variable tauxPotentielFonteForet","text":"<p>Taux potentiel de fonte en for\u00ef\u00bf\u00bdt (mm/degC/jour). <pre><code>float ParamCE::tauxPotentielFonteForet;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#variable-tempmurissementneige","title":"variable tempMurissementNeige","text":"<p>Temperature du murissement du stock de neige (degC). <pre><code>float ParamCE::tempMurissementNeige;\n</code></pre></p>"},{"location":"CEQUEAU/classParamCE/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classParamCE/#function-paramce","title":"function ParamCE","text":"<pre><code>ParamCE::ParamCE () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/classParamFacultatifs/","title":"Class ParamFacultatifs","text":"<p>ClassList &gt; ParamFacultatifs</p> <p>Classe de donnees pour les parametres facultatifs. </p> <ul> <li><code>#include &lt;Parametres.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParamFacultatifs/#public-attributes","title":"Public Attributes","text":"Type Name std::map&lt; int, double &gt; coeffTxParticuliers Coefficients de transfert particuliers. std::vector&lt; int &gt; lacExutoire Liste de l'appartenance des carreaux entiers a une zone de lac exutoire (precipitations directes) std::map&lt; int, int &gt; lacs std::multimap&lt; DateChrono, ValeurZone &gt; relevesNeige Releves de neige remplacant les stocks de neige calcules aux dates donnees. std::map&lt; int, float &gt; superficieCPAmontCorriges Corrections des superficies des carreaux partiels. std::map&lt; int, float &gt; surfacesImper Liste fraction de surface impermeable de carreau entier. TypeAjustementNeige typeAjustementNeige"},{"location":"CEQUEAU/classParamFacultatifs/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classParamFacultatifs/#variable-coefftxparticuliers","title":"variable coeffTxParticuliers","text":"<p>Coefficients de transfert particuliers. <pre><code>std::map&lt;int, double&gt; ParamFacultatifs::coeffTxParticuliers;\n</code></pre></p>"},{"location":"CEQUEAU/classParamFacultatifs/#variable-lacexutoire","title":"variable lacExutoire","text":"<p>Liste de l'appartenance des carreaux entiers a une zone de lac exutoire (precipitations directes) <pre><code>std::vector&lt;int&gt; ParamFacultatifs::lacExutoire;\n</code></pre></p>"},{"location":"CEQUEAU/classParamFacultatifs/#variable-lacs","title":"variable lacs","text":"<pre><code>std::map&lt;int, int&gt; ParamFacultatifs::lacs;\n</code></pre> <p>Permettent de tenir compte, pour le calcul des coefficients de transfert,</p> <p>des lacs chevauchant plusieurs carreaux partiels, ou encore d'exclure du carreau</p> <p>partiel les lacs non situes sur le reseau d'\u00ef\u00bf\u00bdcoulement </p>"},{"location":"CEQUEAU/classParamFacultatifs/#variable-relevesneige","title":"variable relevesNeige","text":"<p>Releves de neige remplacant les stocks de neige calcules aux dates donnees. <pre><code>std::multimap&lt;DateChrono, ValeurZone&gt; ParamFacultatifs::relevesNeige;\n</code></pre></p>"},{"location":"CEQUEAU/classParamFacultatifs/#variable-superficiecpamontcorriges","title":"variable superficieCPAmontCorriges","text":"<p>Corrections des superficies des carreaux partiels. <pre><code>std::map&lt;int, float&gt; ParamFacultatifs::superficieCPAmontCorriges;\n</code></pre></p>"},{"location":"CEQUEAU/classParamFacultatifs/#variable-surfacesimper","title":"variable surfacesImper","text":"<p>Liste fraction de surface impermeable de carreau entier. <pre><code>std::map&lt;int, float&gt; ParamFacultatifs::surfacesImper;\n</code></pre></p>"},{"location":"CEQUEAU/classParamFacultatifs/#variable-typeajustementneige","title":"variable typeAjustementNeige","text":"<pre><code>TypeAjustementNeige ParamFacultatifs::typeAjustementNeige;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/classParamOption/","title":"Class ParamOption","text":"<p>ClassList &gt; ParamOption</p> <p>Classe de donnees pour les parametres optionnels. </p> <ul> <li><code>#include &lt;Parametres.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParamOption/#public-attributes","title":"Public Attributes","text":"Type Name bool calculQualite Execution de la qualite? bool logNeigeAjustee int moduleDLI Module DLI %%%%%. int moduleEvapo Module d'evapotranspiration a utiliser. int moduleFonte Module de fonte a utiliser. int moduleOmbrage Utilisation du module d'ombrage. int modulePompage Utilisation du module de pompage."},{"location":"CEQUEAU/classParamOption/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classParamOption/#variable-calculqualite","title":"variable calculQualite","text":"<p>Execution de la qualite? <pre><code>bool ParamOption::calculQualite;\n</code></pre></p>"},{"location":"CEQUEAU/classParamOption/#variable-logneigeajustee","title":"variable logNeigeAjustee","text":"<pre><code>bool ParamOption::logNeigeAjustee;\n</code></pre>"},{"location":"CEQUEAU/classParamOption/#variable-moduledli","title":"variable moduleDLI","text":"<p>Module DLI %%%%%. <pre><code>int ParamOption::moduleDLI;\n</code></pre></p>"},{"location":"CEQUEAU/classParamOption/#variable-moduleevapo","title":"variable moduleEvapo","text":"<p>Module d'evapotranspiration a utiliser. <pre><code>int ParamOption::moduleEvapo;\n</code></pre></p>"},{"location":"CEQUEAU/classParamOption/#variable-modulefonte","title":"variable moduleFonte","text":"<p>Module de fonte a utiliser. <pre><code>int ParamOption::moduleFonte;\n</code></pre></p>"},{"location":"CEQUEAU/classParamOption/#variable-moduleombrage","title":"variable moduleOmbrage","text":"<p>Utilisation du module d'ombrage. <pre><code>int ParamOption::moduleOmbrage;\n</code></pre></p>"},{"location":"CEQUEAU/classParamOption/#variable-modulepompage","title":"variable modulePompage","text":"<p>Utilisation du module de pompage. <pre><code>int ParamOption::modulePompage;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/classParamPompage/","title":"Class ParamPompage","text":"<p>ClassList &gt; ParamPompage</p>"},{"location":"CEQUEAU/classParamPompage/#public-attributes","title":"Public Attributes","text":"Type Name std::vector&lt; float &gt; coeffEmmagasinement double coeffPompage std::vector&lt; float &gt; conductiviteHydraulique int delai"},{"location":"CEQUEAU/classParamPompage/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classParamPompage/#variable-coeffemmagasinement","title":"variable coeffEmmagasinement","text":"<pre><code>std::vector&lt;float&gt; ParamPompage::coeffEmmagasinement;\n</code></pre>"},{"location":"CEQUEAU/classParamPompage/#variable-coeffpompage","title":"variable coeffPompage","text":"<pre><code>double ParamPompage::coeffPompage;\n</code></pre>"},{"location":"CEQUEAU/classParamPompage/#variable-conductivitehydraulique","title":"variable conductiviteHydraulique","text":"<pre><code>std::vector&lt;float&gt; ParamPompage::conductiviteHydraulique;\n</code></pre>"},{"location":"CEQUEAU/classParamPompage/#variable-delai","title":"variable delai","text":"<pre><code>int ParamPompage::delai;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/classParamSol/","title":"Class ParamSol","text":"<p>ClassList &gt; ParamSol</p> <p>Classe de donnees des parametres relatifs reservoirs SOL, NAPPE et MARAIS. </p> <ul> <li><code>#include &lt;Parametres.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParamSol/#public-attributes","title":"Public Attributes","text":"Type Name float coeffCorrectionPluieAnAltitude Coefficient de correction des pr\u00ef\u00bf\u00bdcipitations annuelles en fonction de l'altitude (mm/m\u00ef\u00bf\u00bdtre/an). std::vector&lt; float &gt; coeffInfiltrationNappe Coefficient d'infiltration dans le r\u00ef\u00bf\u00bdservoir NAPPE. std::vector&lt; float &gt; coeffVidangeBasseNappe Coefficient de vidange basse du r\u00ef\u00bf\u00bdservoir NAPPE. float coeffVidangeBasseSol Coefficient de vidange basse du r\u00ef\u00bf\u00bdservoir SOL. std::vector&lt; float &gt; coeffVidangeHauteNappe Coefficient de vidange haute du r\u00ef\u00bf\u00bdservoir NAPPE. std::vector&lt; float &gt; coeffVidangeIntermediaireSol Coefficient de vidange interm\u00ef\u00bf\u00bddiaire du r\u00ef\u00bf\u00bdservoir SOL. float coeffVidangeLacsMarais Coefficient de vidange du r\u00ef\u00bf\u00bdservoir LACS et MARAIS. float correctionTempAltitude Correction des temp\u00ef\u00bf\u00bdratures en fonction de l'altitude (degC/1 000 m). std::vector&lt; float &gt; fractionImpermeableCE Fraction de l'\u00ef\u00bf\u00bdvapotranspiration prise dans le r\u00ef\u00bf\u00bdservoir NAPPE (de 0.0 a 1.0);. std::vector&lt; float &gt; hauteurReservoirSol Hauteur du r\u00ef\u00bf\u00bdservoir SOL (mm). float infiltrationMax Infiltration maximale (mm/jour). std::vector&lt; float &gt; lameEauDebutRuisellement Lame d'eau n\u00ef\u00bf\u00bdcessaire pour que d\u00ef\u00bf\u00bdbute le ruissellement sur les surfaces impermeables (mm). float latitudeMoyenneBV Latitude moyenne du bassin versant en degr\u00ef\u00bf\u00bds et minutes sexag\u00ef\u00bf\u00bdsimales. std::vector&lt; float &gt; seuilInfiltrationSolVersNappe Seuil d'infiltration du r\u00ef\u00bf\u00bdservoir SOL vers le r\u00ef\u00bf\u00bdservoir NAPPE (mm). std::vector&lt; float &gt; seuilPrelevementEauTauxPotentiel Seuil de pr\u00ef\u00bf\u00bdl\u00ef\u00bf\u00bdvement de l'eau \u00ef\u00bf\u00bd taux potentiel, par \u00ef\u00bf\u00bdvapotranspiration (mm). std::vector&lt; float &gt; seuilVidangeHauteNappe Seuil de vidange sup\u00ef\u00bf\u00bdrieure du r\u00ef\u00bf\u00bdservoir NAPPE (mm). std::vector&lt; float &gt; seuilVidangeIntermediaireSol Seuil de vidange interm\u00ef\u00bf\u00bddiaire du r\u00ef\u00bf\u00bdservoir SOL (mm). float seuilVidangeLacsMarais Seuil de vidange du r\u00ef\u00bf\u00bdservoir LACS et MARAIS (mm)."},{"location":"CEQUEAU/classParamSol/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classParamSol/#variable-coeffcorrectionpluieanaltitude","title":"variable coeffCorrectionPluieAnAltitude","text":"<p>Coefficient de correction des pr\u00ef\u00bf\u00bdcipitations annuelles en fonction de l'altitude (mm/m\u00ef\u00bf\u00bdtre/an). <pre><code>float ParamSol::coeffCorrectionPluieAnAltitude;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-coeffinfiltrationnappe","title":"variable coeffInfiltrationNappe","text":"<p>Coefficient d'infiltration dans le r\u00ef\u00bf\u00bdservoir NAPPE. <pre><code>std::vector&lt;float&gt; ParamSol::coeffInfiltrationNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-coeffvidangebassenappe","title":"variable coeffVidangeBasseNappe","text":"<p>Coefficient de vidange basse du r\u00ef\u00bf\u00bdservoir NAPPE. <pre><code>std::vector&lt;float&gt; ParamSol::coeffVidangeBasseNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-coeffvidangebassesol","title":"variable coeffVidangeBasseSol","text":"<p>Coefficient de vidange basse du r\u00ef\u00bf\u00bdservoir SOL. <pre><code>float ParamSol::coeffVidangeBasseSol;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-coeffvidangehautenappe","title":"variable coeffVidangeHauteNappe","text":"<p>Coefficient de vidange haute du r\u00ef\u00bf\u00bdservoir NAPPE. <pre><code>std::vector&lt;float&gt; ParamSol::coeffVidangeHauteNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-coeffvidangeintermediairesol","title":"variable coeffVidangeIntermediaireSol","text":"<p>Coefficient de vidange interm\u00ef\u00bf\u00bddiaire du r\u00ef\u00bf\u00bdservoir SOL. <pre><code>std::vector&lt;float&gt; ParamSol::coeffVidangeIntermediaireSol;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-coeffvidangelacsmarais","title":"variable coeffVidangeLacsMarais","text":"<p>Coefficient de vidange du r\u00ef\u00bf\u00bdservoir LACS et MARAIS. <pre><code>float ParamSol::coeffVidangeLacsMarais;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-correctiontempaltitude","title":"variable correctionTempAltitude","text":"<p>Correction des temp\u00ef\u00bf\u00bdratures en fonction de l'altitude (degC/1 000 m). <pre><code>float ParamSol::correctionTempAltitude;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-fractionimpermeablece","title":"variable fractionImpermeableCE","text":"<p>Fraction de l'\u00ef\u00bf\u00bdvapotranspiration prise dans le r\u00ef\u00bf\u00bdservoir NAPPE (de 0.0 a 1.0);. <pre><code>std::vector&lt;float&gt; ParamSol::fractionImpermeableCE;\n</code></pre></p> <p>Fraction de surface imperm\u00ef\u00bf\u00bdable des carreaux entiers (de 0.0 \u00ef\u00bf\u00bd 1.0). </p>"},{"location":"CEQUEAU/classParamSol/#variable-hauteurreservoirsol","title":"variable hauteurReservoirSol","text":"<p>Hauteur du r\u00ef\u00bf\u00bdservoir SOL (mm). <pre><code>std::vector&lt;float&gt; ParamSol::hauteurReservoirSol;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-infiltrationmax","title":"variable infiltrationMax","text":"<p>Infiltration maximale (mm/jour). <pre><code>float ParamSol::infiltrationMax;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-lameeaudebutruisellement","title":"variable lameEauDebutRuisellement","text":"<p>Lame d'eau n\u00ef\u00bf\u00bdcessaire pour que d\u00ef\u00bf\u00bdbute le ruissellement sur les surfaces impermeables (mm). <pre><code>std::vector&lt;float&gt; ParamSol::lameEauDebutRuisellement;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-latitudemoyennebv","title":"variable latitudeMoyenneBV","text":"<p>Latitude moyenne du bassin versant en degr\u00ef\u00bf\u00bds et minutes sexag\u00ef\u00bf\u00bdsimales. <pre><code>float ParamSol::latitudeMoyenneBV;\n</code></pre></p> <p>(ex.: XLA = 4245 pour une latitude de 42o45'). </p>"},{"location":"CEQUEAU/classParamSol/#variable-seuilinfiltrationsolversnappe","title":"variable seuilInfiltrationSolVersNappe","text":"<p>Seuil d'infiltration du r\u00ef\u00bf\u00bdservoir SOL vers le r\u00ef\u00bf\u00bdservoir NAPPE (mm). <pre><code>std::vector&lt;float&gt; ParamSol::seuilInfiltrationSolVersNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-seuilprelevementeautauxpotentiel","title":"variable seuilPrelevementEauTauxPotentiel","text":"<p>Seuil de pr\u00ef\u00bf\u00bdl\u00ef\u00bf\u00bdvement de l'eau \u00ef\u00bf\u00bd taux potentiel, par \u00ef\u00bf\u00bdvapotranspiration (mm). <pre><code>std::vector&lt;float&gt; ParamSol::seuilPrelevementEauTauxPotentiel;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-seuilvidangehautenappe","title":"variable seuilVidangeHauteNappe","text":"<p>Seuil de vidange sup\u00ef\u00bf\u00bdrieure du r\u00ef\u00bf\u00bdservoir NAPPE (mm). <pre><code>std::vector&lt;float&gt; ParamSol::seuilVidangeHauteNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-seuilvidangeintermediairesol","title":"variable seuilVidangeIntermediaireSol","text":"<p>Seuil de vidange interm\u00ef\u00bf\u00bddiaire du r\u00ef\u00bf\u00bdservoir SOL (mm). <pre><code>std::vector&lt;float&gt; ParamSol::seuilVidangeIntermediaireSol;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSol/#variable-seuilvidangelacsmarais","title":"variable seuilVidangeLacsMarais","text":"<p>Seuil de vidange du r\u00ef\u00bf\u00bdservoir LACS et MARAIS (mm). <pre><code>float ParamSol::seuilVidangeLacsMarais;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/classParamSolInitial/","title":"Class ParamSolInitial","text":"<p>ClassList &gt; ParamSolInitial</p> <p>Classe de donnees pour les valeurs initiales des reservoirs. </p> <ul> <li><code>#include &lt;Parametres.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParamSolInitial/#public-attributes","title":"Public Attributes","text":"Type Name float debitInitialExutoire Debit initial \u00ef\u00bf\u00bd l'exutoire du bassin versant (m3/s). float niveauInitialLacsMarais Niveau d'eau initial dans le r\u00ef\u00bf\u00bdservoir LACS et MARAIS (mm). float niveauInitialNappe Niveau d'eau initial dans le r\u00ef\u00bf\u00bdservoir NAPPE (mm). float niveauInitialSol Niveau d'eau initial dans le r\u00ef\u00bf\u00bdservoir SOL (mm)."},{"location":"CEQUEAU/classParamSolInitial/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classParamSolInitial/#variable-debitinitialexutoire","title":"variable debitInitialExutoire","text":"<p>Debit initial \u00ef\u00bf\u00bd l'exutoire du bassin versant (m3/s). <pre><code>float ParamSolInitial::debitInitialExutoire;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSolInitial/#variable-niveauinitiallacsmarais","title":"variable niveauInitialLacsMarais","text":"<p>Niveau d'eau initial dans le r\u00ef\u00bf\u00bdservoir LACS et MARAIS (mm). <pre><code>float ParamSolInitial::niveauInitialLacsMarais;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSolInitial/#variable-niveauinitialnappe","title":"variable niveauInitialNappe","text":"<p>Niveau d'eau initial dans le r\u00ef\u00bf\u00bdservoir NAPPE (mm). <pre><code>float ParamSolInitial::niveauInitialNappe;\n</code></pre></p>"},{"location":"CEQUEAU/classParamSolInitial/#variable-niveauinitialsol","title":"variable niveauInitialSol","text":"<p>Niveau d'eau initial dans le r\u00ef\u00bf\u00bdservoir SOL (mm). <pre><code>float ParamSolInitial::niveauInitialSol;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/classParamTemperature/","title":"Class ParamTemperature","text":"<p>ClassList &gt; ParamTemperature</p> <p>Classe de donnees des parametres qualite relatifs a la temperature de l'eau. </p> <ul> <li><code>#include &lt;ParametresQualite.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParamTemperature/#public-attributes","title":"Public Attributes","text":"Type Name float bassol Lame de precipitation totale permettant de detecter les jours de faible rayonnement solaire. float ccanope couverture du sol par la canop\u00ef\u00bf\u00bd de la for\u00ef\u00bf\u00bdt (entre 0.0 et 1.0) float cconve Coefficient convection. float cevapo Coefficient evaporation. float corsol Correction du rayonnement solaire moyen. float crayin Coefficient rayonnement infrarouge. float crayso Coefficient rayonnement solaire. float crigel Critere de gel. float hombre float panap Parametre permettant d'ajuster la temperature de l'ecoulement souterrain arrivant en riviere. float tinit Temperature moyenne de l'eau sur l'ensemble du bassin versant estimee au premier jour des simulations. float tnap Temperature moyenne annuelle des eaux souterraines sur le bassin versant."},{"location":"CEQUEAU/classParamTemperature/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classParamTemperature/#variable-bassol","title":"variable bassol","text":"<p>Lame de precipitation totale permettant de detecter les jours de faible rayonnement solaire. <pre><code>float ParamTemperature::bassol;\n</code></pre></p>"},{"location":"CEQUEAU/classParamTemperature/#variable-ccanope","title":"variable ccanope","text":"<p>couverture du sol par la canop\u00ef\u00bf\u00bd de la for\u00ef\u00bf\u00bdt (entre 0.0 et 1.0) <pre><code>float ParamTemperature::ccanope;\n</code></pre></p>"},{"location":"CEQUEAU/classParamTemperature/#variable-cconve","title":"variable cconve","text":"<p>Coefficient convection. <pre><code>float ParamTemperature::cconve;\n</code></pre></p> <p>Coefficient permettant d'augmenter ou de diminuer</p> <p>l'importance de la convection dans le bilan d'\u00ef\u00bf\u00bdnergie </p>"},{"location":"CEQUEAU/classParamTemperature/#variable-cevapo","title":"variable cevapo","text":"<p>Coefficient evaporation. <pre><code>float ParamTemperature::cevapo;\n</code></pre></p> <p>Coefficient permettant d'augmenter ou de diminuer</p> <p>l'importance de l'\u00ef\u00bf\u00bdvaporation dans le bilan d'\u00ef\u00bf\u00bdnergie </p>"},{"location":"CEQUEAU/classParamTemperature/#variable-corsol","title":"variable corsol","text":"<p>Correction du rayonnement solaire moyen. <pre><code>float ParamTemperature::corsol;\n</code></pre></p> <p>Correction du rayonnement solaire moyen (RSM) pour les</p> <p>jours sans pluie (RSM x (1+CORSOL)) et les jours de fortes</p> <p>pluies (RSM x (1-CORSOL)) (entre 0.0 et 1.0). </p>"},{"location":"CEQUEAU/classParamTemperature/#variable-crayin","title":"variable crayin","text":"<p>Coefficient rayonnement infrarouge. <pre><code>float ParamTemperature::crayin;\n</code></pre></p> <p>Coefficient permettant d'augmenter ou de diminuer</p> <p>l'importance du rayonnement infrarouge dans le bilan d'energie. </p>"},{"location":"CEQUEAU/classParamTemperature/#variable-crayso","title":"variable crayso","text":"<p>Coefficient rayonnement solaire. <pre><code>float ParamTemperature::crayso;\n</code></pre></p> <p>Coefficient permettant d'augmenter ou de diminuer</p> <p>l'importance du rayonnement solaire dans le bilan d'energie. </p>"},{"location":"CEQUEAU/classParamTemperature/#variable-crigel","title":"variable crigel","text":"<p>Critere de gel. <pre><code>float ParamTemperature::crigel;\n</code></pre></p>"},{"location":"CEQUEAU/classParamTemperature/#variable-hombre","title":"variable hombre","text":"<pre><code>float ParamTemperature::hombre;\n</code></pre>"},{"location":"CEQUEAU/classParamTemperature/#variable-panap","title":"variable panap","text":"<p>Parametre permettant d'ajuster la temperature de l'ecoulement souterrain arrivant en riviere. <pre><code>float ParamTemperature::panap;\n</code></pre></p>"},{"location":"CEQUEAU/classParamTemperature/#variable-tinit","title":"variable tinit","text":"<p>Temperature moyenne de l'eau sur l'ensemble du bassin versant estimee au premier jour des simulations. <pre><code>float ParamTemperature::tinit;\n</code></pre></p>"},{"location":"CEQUEAU/classParamTemperature/#variable-tnap","title":"variable tnap","text":"<p>Temperature moyenne annuelle des eaux souterraines sur le bassin versant. <pre><code>float ParamTemperature::tnap;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/ParametresQualite.h</code></p>"},{"location":"CEQUEAU/classParamTransfert/","title":"Class ParamTransfert","text":"<p>ClassList &gt; ParamTransfert</p> <p>Classe de donnees pour les parametres relatifs a la fonction de transfert. </p> <ul> <li><code>#include &lt;Parametres.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParamTransfert/#public-attributes","title":"Public Attributes","text":"Type Name float paramCalculCoeffTransfertCP Parametre de calcul des coefficients de transfert des carreaux partiels, pour. float tempsConcentrationBV Temps de concentration du bassin versant (en pas de temps)."},{"location":"CEQUEAU/classParamTransfert/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classParamTransfert/#variable-paramcalculcoefftransfertcp","title":"variable paramCalculCoeffTransfertCP","text":"<p>Parametre de calcul des coefficients de transfert des carreaux partiels, pour. <pre><code>float ParamTransfert::paramCalculCoeffTransfertCP;\n</code></pre></p> <p>le pas de temps de la simulation. </p>"},{"location":"CEQUEAU/classParamTransfert/#variable-tempsconcentrationbv","title":"variable tempsConcentrationBV","text":"<p>Temps de concentration du bassin versant (en pas de temps). <pre><code>float ParamTransfert::tempsConcentrationBV;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/classParametres/","title":"Class Parametres","text":"<p>ClassList &gt; Parametres</p> <p>Classe des parametres de la simulation. </p> <ul> <li><code>#include &lt;Parametres.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParametres/#public-functions","title":"Public Functions","text":"Type Name Parametres ()  Parametres (DateChrono dateDebut, DateChrono dateFin)  const DateChrono &amp; dateDebut () constGetter Date de debut de la simulation. const DateChrono &amp; dateFin () constGetter Date de fin de la simulation. int dureeHeuresPasSimulation () constGetter Duree en heure d'un pas de simulation: 1,2,3,4,6,8,12,24 heures. const ParamFacultatifs &amp; facultatifs () constGetter param facultatifs. void initialiser (const mxArray * paramExec, const mxArray * paramSimul, int nbCE, int nbCP) Initialisation des parametres a partir de variables Matlab (mxArray) void initialiserFichier (std::string nomFichierParamExec, std::string nomFichierParamSimul, int nbCE, int nbCP) Initialisation des parametres a partir de fichiers d'intrants Matlab. int nbJoursSimulation () constGetter nombre jours de simulation. int nbPasParJourSimulation () constGetter nombre pas pas jour de simulation. int nbPasSimulation () constGetter nombre pas de simulation. const ParamOption &amp; option () constGetter param option. const ParamPompage &amp; pompage () constGetter param pompage. const std::vector&lt; bool &gt; &amp; resultatsIdCE () constGetter selection des carreaux entiers qu'on desire en sortie. const std::vector&lt; bool &gt; &amp; resultatsIdCP () constGetter selection des carreaux partiels qu'on desire en sortie. const ParamSol &amp; sol () constGetter param sol. const ParamSolInitial &amp; solInitial () constGetter param solInitial. const ParamTransfert &amp; transfert () constGetter param transfert. ~Parametres ()"},{"location":"CEQUEAU/classParametres/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classParametres/#function-parametres-12","title":"function Parametres [1/2]","text":"<pre><code>Parametres::Parametres () \n</code></pre>"},{"location":"CEQUEAU/classParametres/#function-parametres-22","title":"function Parametres [2/2]","text":"<pre><code>Parametres::Parametres (\n    DateChrono dateDebut,\n    DateChrono dateFin\n) \n</code></pre>"},{"location":"CEQUEAU/classParametres/#function-datedebut","title":"function dateDebut","text":"<p>Getter Date de debut de la simulation. <pre><code>const DateChrono &amp; Parametres::dateDebut () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-datefin","title":"function dateFin","text":"<p>Getter Date de fin de la simulation. <pre><code>const DateChrono &amp; Parametres::dateFin () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-dureeheurespassimulation","title":"function dureeHeuresPasSimulation","text":"<p>Getter Duree en heure d'un pas de simulation: 1,2,3,4,6,8,12,24 heures. <pre><code>int Parametres::dureeHeuresPasSimulation () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-facultatifs","title":"function facultatifs","text":"<p>Getter param facultatifs. <pre><code>const ParamFacultatifs &amp; Parametres::facultatifs () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-initialiser","title":"function initialiser","text":"<p>Initialisation des parametres a partir de variables Matlab (mxArray) <pre><code>void Parametres::initialiser (\n    const mxArray * paramExec,\n    const mxArray * paramSimul,\n    int nbCE,\n    int nbCP\n) \n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-initialiserfichier","title":"function initialiserFichier","text":"<p>Initialisation des parametres a partir de fichiers d'intrants Matlab. <pre><code>void Parametres::initialiserFichier (\n    std::string nomFichierParamExec,\n    std::string nomFichierParamSimul,\n    int nbCE,\n    int nbCP\n) \n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-nbjourssimulation","title":"function nbJoursSimulation","text":"<p>Getter nombre jours de simulation. <pre><code>int Parametres::nbJoursSimulation () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-nbpasparjoursimulation","title":"function nbPasParJourSimulation","text":"<p>Getter nombre pas pas jour de simulation. <pre><code>int Parametres::nbPasParJourSimulation () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-nbpassimulation","title":"function nbPasSimulation","text":"<p>Getter nombre pas de simulation. <pre><code>int Parametres::nbPasSimulation () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-option","title":"function option","text":"<p>Getter param option. <pre><code>const ParamOption &amp; Parametres::option () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-pompage","title":"function pompage","text":"<p>Getter param pompage. <pre><code>const ParamPompage &amp; Parametres::pompage () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-resultatsidce","title":"function resultatsIdCE","text":"<p>Getter selection des carreaux entiers qu'on desire en sortie. <pre><code>const std::vector&lt; bool &gt; &amp; Parametres::resultatsIdCE () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-resultatsidcp","title":"function resultatsIdCP","text":"<p>Getter selection des carreaux partiels qu'on desire en sortie. <pre><code>const std::vector&lt; bool &gt; &amp; Parametres::resultatsIdCP () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-sol","title":"function sol","text":"<p>Getter param sol. <pre><code>const ParamSol &amp; Parametres::sol () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-solinitial","title":"function solInitial","text":"<p>Getter param solInitial. <pre><code>const ParamSolInitial &amp; Parametres::solInitial () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-transfert","title":"function transfert","text":"<p>Getter param transfert. <pre><code>const ParamTransfert &amp; Parametres::transfert () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametres/#function-parametres","title":"function ~Parametres","text":"<pre><code>Parametres::~Parametres () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/classParametresInterpolation/","title":"Class ParametresInterpolation","text":"<p>ClassList &gt; ParametresInterpolation</p> <p>Classe des parametres de la simulation. </p> <ul> <li><code>#include &lt;ParametresInterpolation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParametresInterpolation/#public-functions","title":"Public Functions","text":"Type Name ParametresInterpolation () Constructeur. float coep () constGetter. float coet () constGetter. void initialiser (const mxArray * paramInterpolation) Initialisation. int type () constGetter. ~ParametresInterpolation () Destructeur."},{"location":"CEQUEAU/classParametresInterpolation/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classParametresInterpolation/#function-parametresinterpolation","title":"function ParametresInterpolation","text":"<p>Constructeur. <pre><code>ParametresInterpolation::ParametresInterpolation () \n</code></pre></p>"},{"location":"CEQUEAU/classParametresInterpolation/#function-coep","title":"function coep","text":"<p>Getter. <pre><code>float ParametresInterpolation::coep () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametresInterpolation/#function-coet","title":"function coet","text":"<p>Getter. <pre><code>float ParametresInterpolation::coet () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametresInterpolation/#function-initialiser","title":"function initialiser","text":"<p>Initialisation. <pre><code>void ParametresInterpolation::initialiser (\n    const mxArray * paramInterpolation\n) \n</code></pre></p>"},{"location":"CEQUEAU/classParametresInterpolation/#function-type","title":"function type","text":"<p>Getter. <pre><code>int ParametresInterpolation::type () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametresInterpolation/#function-parametresinterpolation_1","title":"function ~ParametresInterpolation","text":"<p>Destructeur. <pre><code>ParametresInterpolation::~ParametresInterpolation () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/ParametresInterpolation.h</code></p>"},{"location":"CEQUEAU/classParametresQualite/","title":"Class ParametresQualite","text":"<p>ClassList &gt; ParametresQualite</p> <p>Classe des parametres de la simulation. </p> <ul> <li><code>#include &lt;ParametresQualite.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classParametresQualite/#public-functions","title":"Public Functions","text":"Type Name ParametresQualite () Constructeur. float colarg () constGetter. float coprom () constGetter. void initialiser () Initialisation avec valeurs fixes pour fin de tests. void initialiser (const mxArray * paramQualite) Initialisation. void initialiser (const mxArray * paramQualite, const mxArray * paramDLI)  void initialiserOmbrage (const mxArray * paramQualite)  const ParamTemperature &amp; temperature () constGetter. ~ParametresQualite () Destructeur."},{"location":"CEQUEAU/classParametresQualite/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classParametresQualite/#function-parametresqualite","title":"function ParametresQualite","text":"<p>Constructeur. <pre><code>ParametresQualite::ParametresQualite () \n</code></pre></p>"},{"location":"CEQUEAU/classParametresQualite/#function-colarg","title":"function colarg","text":"<p>Getter. <pre><code>float ParametresQualite::colarg () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametresQualite/#function-coprom","title":"function coprom","text":"<p>Getter. <pre><code>float ParametresQualite::coprom () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametresQualite/#function-initialiser-13","title":"function initialiser [1/3]","text":"<p>Initialisation avec valeurs fixes pour fin de tests. <pre><code>void ParametresQualite::initialiser () \n</code></pre></p>"},{"location":"CEQUEAU/classParametresQualite/#function-initialiser-23","title":"function initialiser [2/3]","text":"<p>Initialisation. <pre><code>void ParametresQualite::initialiser (\n    const mxArray * paramQualite\n) \n</code></pre></p>"},{"location":"CEQUEAU/classParametresQualite/#function-initialiser-33","title":"function initialiser [3/3]","text":"<pre><code>void ParametresQualite::initialiser (\n    const mxArray * paramQualite,\n    const mxArray * paramDLI\n) \n</code></pre>"},{"location":"CEQUEAU/classParametresQualite/#function-initialiserombrage","title":"function initialiserOmbrage","text":"<pre><code>void ParametresQualite::initialiserOmbrage (\n    const mxArray * paramQualite\n) \n</code></pre>"},{"location":"CEQUEAU/classParametresQualite/#function-temperature","title":"function temperature","text":"<p>Getter. <pre><code>const ParamTemperature &amp; ParametresQualite::temperature () const\n</code></pre></p>"},{"location":"CEQUEAU/classParametresQualite/#function-parametresqualite_1","title":"function ~ParametresQualite","text":"<p>Destructeur. <pre><code>ParametresQualite::~ParametresQualite () \n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/ParametresQualite.h</code></p>"},{"location":"CEQUEAU/classPositionSolaire/","title":"Class PositionSolaire","text":"<p>ClassList &gt; PositionSolaire</p> <p>Class pour calcul des positions solaires. </p> <ul> <li><code>#include &lt;SimulationQualite.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classPositionSolaire/#public-functions","title":"Public Functions","text":"Type Name PositionSolaire ()  void calcul_altitude_et_azimut_du_soleil (double jd, double lat, double lon, double * azimut, double * altitude, double elevation=0)  void calcul_altitude_et_azimut_du_soleil (Qualite::spa_data &amp; spa)  ~PositionSolaire ()"},{"location":"CEQUEAU/classPositionSolaire/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classPositionSolaire/#function-positionsolaire-66","title":"function PositionSolaire [6/6]","text":"<pre><code>PositionSolaire::PositionSolaire () \n</code></pre>"},{"location":"CEQUEAU/classPositionSolaire/#function-calcul_altitude_et_azimut_du_soleil-12","title":"function calcul_altitude_et_azimut_du_soleil [1/2]","text":"<pre><code>void PositionSolaire::calcul_altitude_et_azimut_du_soleil (\n    double jd,\n    double lat,\n    double lon,\n    double * azimut,\n    double * altitude,\n    double elevation=0\n) \n</code></pre>"},{"location":"CEQUEAU/classPositionSolaire/#function-calcul_altitude_et_azimut_du_soleil-22","title":"function calcul_altitude_et_azimut_du_soleil [2/2]","text":"<pre><code>void PositionSolaire::calcul_altitude_et_azimut_du_soleil (\n    Qualite::spa_data &amp; spa\n) \n</code></pre>"},{"location":"CEQUEAU/classPositionSolaire/#function-positionsolaire","title":"function ~PositionSolaire","text":"<pre><code>PositionSolaire::~PositionSolaire () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite.h</code></p>"},{"location":"CEQUEAU/classPuits/","title":"Class Puits","text":"<p>ClassList &gt; Puits</p>"},{"location":"CEQUEAU/classPuits/#public-functions","title":"Public Functions","text":"Type Name Puits (int id, int active, double distance, double niveauInitial, double rayonP, std::vector&lt; double &gt; niveaux, std::vector&lt; double &gt; debit)  int getActive () const const std::vector&lt; double &gt; &amp; getDebitPompage () const double getDebitPompageParIndex (int idxPasDeTemps) const double getDistanceRiviere () const int getIdCE () const double getNiveauInitial () const double getNiveauPuitsParIndex (int idxPasDeTemps) const const std::vector&lt; double &gt; &amp; getNiveauxPuits () const double getRayonP () const"},{"location":"CEQUEAU/classPuits/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classPuits/#function-puits","title":"function Puits","text":"<pre><code>Puits::Puits (\n    int id,\n    int active,\n    double distance,\n    double niveauInitial,\n    double rayonP,\n    std::vector&lt; double &gt; niveaux,\n    std::vector&lt; double &gt; debit\n) \n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getactive","title":"function getActive","text":"<pre><code>int Puits::getActive () const\n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getdebitpompage","title":"function getDebitPompage","text":"<pre><code>const std::vector&lt; double &gt; &amp; Puits::getDebitPompage () const\n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getdebitpompageparindex","title":"function getDebitPompageParIndex","text":"<pre><code>double Puits::getDebitPompageParIndex (\n    int idxPasDeTemps\n) const\n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getdistanceriviere","title":"function getDistanceRiviere","text":"<pre><code>double Puits::getDistanceRiviere () const\n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getidce","title":"function getIdCE","text":"<pre><code>int Puits::getIdCE () const\n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getniveauinitial","title":"function getNiveauInitial","text":"<pre><code>double Puits::getNiveauInitial () const\n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getniveaupuitsparindex","title":"function getNiveauPuitsParIndex","text":"<pre><code>double Puits::getNiveauPuitsParIndex (\n    int idxPasDeTemps\n) const\n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getniveauxpuits","title":"function getNiveauxPuits","text":"<pre><code>const std::vector&lt; double &gt; &amp; Puits::getNiveauxPuits () const\n</code></pre>"},{"location":"CEQUEAU/classPuits/#function-getrayonp","title":"function getRayonP","text":"<pre><code>double Puits::getRayonP () const\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Puits.h</code></p>"},{"location":"CEQUEAU/namespaceQualite/","title":"Namespace Qualite","text":"<p>Namespace List &gt; Qualite</p>"},{"location":"CEQUEAU/namespaceQualite/#classes","title":"Classes","text":"Type Name class EtatCarreauPartiel Etats de la qualite a chaque CP. class EtatCarreauPartielAssim Classe de donnees pour l'assimilation des etats d'un carreau partiel. struct spa_data"},{"location":"CEQUEAU/namespaceQualite/#public-types","title":"Public Types","text":"Type Name typedef std::vector&lt; EtatCarreauPartiel &gt; EtatsCarreauxPartiels Liste des etats des carreaux partiels a chaque pas de temps. typedef std::vector&lt; EtatCarreauPartielAssim &gt; EtatsCarreauxPartielsAssim Liste des assimilations des carreaux partiels a chaque pas de temps."},{"location":"CEQUEAU/namespaceQualite/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/namespaceQualite/#typedef-etatscarreauxpartiels","title":"typedef EtatsCarreauxPartiels","text":"<p>Liste des etats des carreaux partiels a chaque pas de temps. <pre><code>typedef std::vector&lt;EtatCarreauPartiel&gt; Qualite::EtatsCarreauxPartiels;\n</code></pre></p>"},{"location":"CEQUEAU/namespaceQualite/#typedef-etatscarreauxpartielsassim","title":"typedef EtatsCarreauxPartielsAssim","text":"<p>Liste des assimilations des carreaux partiels a chaque pas de temps. <pre><code>typedef std::vector&lt;EtatCarreauPartielAssim&gt; Qualite::EtatsCarreauxPartielsAssim;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite.h</code></p>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/","title":"Class Qualite::EtatCarreauPartiel","text":"<p>ClassList &gt; Qualite &gt; EtatCarreauPartiel</p> <p>Etats de la qualite a chaque CP. </p> <ul> <li><code>#include &lt;SimulationQualite.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#public-attributes","title":"Public Attributes","text":"Type Name float eneram float eneres float enerlo int idCarreauPartiel float qconv float qevap float qhypo float qlacma float qnappe float qradin float qradso float qruiss float temperature"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#public-functions","title":"Public Functions","text":"Type Name EtatCarreauPartiel ()"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-eneram","title":"variable eneram","text":"<pre><code>float Qualite::EtatCarreauPartiel::eneram;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-eneres","title":"variable eneres","text":"<pre><code>float Qualite::EtatCarreauPartiel::eneres;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-enerlo","title":"variable enerlo","text":"<pre><code>float Qualite::EtatCarreauPartiel::enerlo;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-idcarreaupartiel","title":"variable idCarreauPartiel","text":"<pre><code>int Qualite::EtatCarreauPartiel::idCarreauPartiel;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-qconv","title":"variable qconv","text":"<pre><code>float Qualite::EtatCarreauPartiel::qconv;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-qevap","title":"variable qevap","text":"<pre><code>float Qualite::EtatCarreauPartiel::qevap;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-qhypo","title":"variable qhypo","text":"<pre><code>float Qualite::EtatCarreauPartiel::qhypo;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-qlacma","title":"variable qlacma","text":"<pre><code>float Qualite::EtatCarreauPartiel::qlacma;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-qnappe","title":"variable qnappe","text":"<pre><code>float Qualite::EtatCarreauPartiel::qnappe;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-qradin","title":"variable qradin","text":"<pre><code>float Qualite::EtatCarreauPartiel::qradin;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-qradso","title":"variable qradso","text":"<pre><code>float Qualite::EtatCarreauPartiel::qradso;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-qruiss","title":"variable qruiss","text":"<pre><code>float Qualite::EtatCarreauPartiel::qruiss;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#variable-temperature","title":"variable temperature","text":"<pre><code>float Qualite::EtatCarreauPartiel::temperature;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartiel/#function-etatcarreaupartiel","title":"function EtatCarreauPartiel","text":"<pre><code>inline Qualite::EtatCarreauPartiel::EtatCarreauPartiel () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite.h</code></p>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartielAssim/","title":"Class Qualite::EtatCarreauPartielAssim","text":"<p>ClassList &gt; Qualite &gt; EtatCarreauPartielAssim</p> <p>Classe de donnees pour l'assimilation des etats d'un carreau partiel. More...</p> <ul> <li><code>#include &lt;SimulationQualite.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartielAssim/#public-attributes","title":"Public Attributes","text":"Type Name int idCarreauPartiel float temperature TypeAssim temperatureType"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartielAssim/#detailed-description","title":"Detailed Description","text":"<p>Utilise pour assimiler des etats aux carreaux partiels. Une valeur: on substitue cette valeur. Deux valeurs: La premiere est un facteur multiplicatif et la seconde une valeur a additionner. </p>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartielAssim/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartielAssim/#variable-idcarreaupartiel","title":"variable idCarreauPartiel","text":"<pre><code>int Qualite::EtatCarreauPartielAssim::idCarreauPartiel;\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartielAssim/#variable-temperature","title":"variable temperature","text":"<pre><code>float Qualite::EtatCarreauPartielAssim::temperature[2];\n</code></pre>"},{"location":"CEQUEAU/classQualite_1_1EtatCarreauPartielAssim/#variable-temperaturetype","title":"variable temperatureType","text":"<pre><code>TypeAssim Qualite::EtatCarreauPartielAssim::temperatureType;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite.h</code></p>"},{"location":"CEQUEAU/structQualite_1_1spa__data/","title":"Struct Qualite::spa_data","text":"<p>ClassList &gt; Qualite &gt; spa_data</p>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#public-attributes","title":"Public Attributes","text":"Type Name double altitude double azimuth double elevation float fuseauHoraire float heureLocal double jce double jd double jj double jme double latitude double longitude const DateChrono pasDeTemps"},{"location":"CEQUEAU/structQualite_1_1spa__data/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-altitude","title":"variable altitude","text":"<pre><code>double Qualite::spa_data::altitude;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-azimuth","title":"variable azimuth","text":"<pre><code>double Qualite::spa_data::azimuth;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-elevation","title":"variable elevation","text":"<pre><code>double Qualite::spa_data::elevation;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-fuseauhoraire","title":"variable fuseauHoraire","text":"<pre><code>float Qualite::spa_data::fuseauHoraire;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-heurelocal","title":"variable heureLocal","text":"<pre><code>float Qualite::spa_data::heureLocal;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-jce","title":"variable jce","text":"<pre><code>double Qualite::spa_data::jce;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-jd","title":"variable jd","text":"<pre><code>double Qualite::spa_data::jd;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-jj","title":"variable jj","text":"<pre><code>double Qualite::spa_data::jj;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-jme","title":"variable jme","text":"<pre><code>double Qualite::spa_data::jme;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-latitude","title":"variable latitude","text":"<pre><code>double Qualite::spa_data::latitude;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-longitude","title":"variable longitude","text":"<pre><code>double Qualite::spa_data::longitude;\n</code></pre>"},{"location":"CEQUEAU/structQualite_1_1spa__data/#variable-pasdetemps","title":"variable pasDeTemps","text":"<pre><code>const DateChrono Qualite::spa_data::pasDeTemps;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite.h</code></p>"},{"location":"CEQUEAU/classReleveNeige/","title":"Class ReleveNeige","text":"<p>ClassList &gt; ReleveNeige</p>"},{"location":"CEQUEAU/classReleveNeige/#public-attributes","title":"Public Attributes","text":"Type Name float correction float distance int i int idCE int j int no float valeur"},{"location":"CEQUEAU/classReleveNeige/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classReleveNeige/#variable-correction","title":"variable correction","text":"<pre><code>float ReleveNeige::correction;\n</code></pre>"},{"location":"CEQUEAU/classReleveNeige/#variable-distance","title":"variable distance","text":"<pre><code>float ReleveNeige::distance;\n</code></pre>"},{"location":"CEQUEAU/classReleveNeige/#variable-i","title":"variable i","text":"<pre><code>int ReleveNeige::i;\n</code></pre>"},{"location":"CEQUEAU/classReleveNeige/#variable-idce","title":"variable idCE","text":"<pre><code>int ReleveNeige::idCE;\n</code></pre>"},{"location":"CEQUEAU/classReleveNeige/#variable-j","title":"variable j","text":"<pre><code>int ReleveNeige::j;\n</code></pre>"},{"location":"CEQUEAU/classReleveNeige/#variable-no","title":"variable no","text":"<pre><code>int ReleveNeige::no;\n</code></pre>"},{"location":"CEQUEAU/classReleveNeige/#variable-valeur","title":"variable valeur","text":"<pre><code>float ReleveNeige::valeur;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classSimulation/","title":"Class Simulation","text":"<p>ClassList &gt; Simulation</p> <p>Classe simulation. More...</p> <ul> <li><code>#include &lt;Simulation.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classSimulation/#public-functions","title":"Public Functions","text":"Type Name Simulation (BassinVersant &amp; bv, const Parametres &amp; param, const DonneesMeteo &amp; meteo, const mxArray * etatsPrecedents, const std::string &amp; fichierResultats, FontePtr moduleFonte, EvapoPtr moduleEvapo, const mxArray * assimilations=NULL) Construteur. int executer (bool estMexFile=false) Execution de la simulation. bool hasNeigeAjustee () const mxArray * obtenirEtatsAvantAssimilations () Pas de temps en mxArray. mxArray * obtenirEtatsBarrage () Etats barrages en mxArray. mxArray * obtenirEtatsCE () Etats CE en mxArray. mxArray * obtenirEtatsCP () Etats CP en mxArray. mxArray * obtenirPasDeTemps () Pas de temps en mxArray. ~Simulation ()"},{"location":"CEQUEAU/classSimulation/#detailed-description","title":"Detailed Description","text":"<p>Classe principale de l'application. </p>"},{"location":"CEQUEAU/classSimulation/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classSimulation/#function-simulation","title":"function Simulation","text":"<p>Construteur. <pre><code>Simulation::Simulation (\n    BassinVersant &amp; bv,\n    const Parametres &amp; param,\n    const DonneesMeteo &amp; meteo,\n    const mxArray * etatsPrecedents,\n    const std::string &amp; fichierResultats,\n    FontePtr moduleFonte,\n    EvapoPtr moduleEvapo,\n    const mxArray * assimilations=NULL\n) \n</code></pre></p> <p>Parameters:</p> <ul> <li><code>bv</code> Reference sur un objet BassinVersant. </li> <li><code>param</code> Reference sur un objet Parametres. </li> <li><code>meteo</code> Reference sur un objet DonneesMeteo. </li> <li><code>fichierEtats</code> Repertoire et nom du fichier Matlab des etats precedents. </li> <li><code>fichierResultats</code> Repertoire et nom du fichier Matlab des resultats. </li> </ul>"},{"location":"CEQUEAU/classSimulation/#function-executer","title":"function executer","text":"<p>Execution de la simulation. <pre><code>int Simulation::executer (\n    bool estMexFile=false\n) \n</code></pre></p>"},{"location":"CEQUEAU/classSimulation/#function-hasneigeajustee","title":"function hasNeigeAjustee","text":"<pre><code>bool Simulation::hasNeigeAjustee () const\n</code></pre>"},{"location":"CEQUEAU/classSimulation/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<p>Pas de temps en mxArray. <pre><code>mxArray * Simulation::obtenirEtatsAvantAssimilations () \n</code></pre></p>"},{"location":"CEQUEAU/classSimulation/#function-obteniretatsbarrage-12","title":"function obtenirEtatsBarrage [1/2]","text":"<p>Etats barrages en mxArray. <pre><code>mxArray * Simulation::obtenirEtatsBarrage () \n</code></pre></p>"},{"location":"CEQUEAU/classSimulation/#function-obteniretatsce-12","title":"function obtenirEtatsCE [1/2]","text":"<p>Etats CE en mxArray. <pre><code>mxArray * Simulation::obtenirEtatsCE () \n</code></pre></p>"},{"location":"CEQUEAU/classSimulation/#function-obteniretatscp-12","title":"function obtenirEtatsCP [1/2]","text":"<p>Etats CP en mxArray. <pre><code>mxArray * Simulation::obtenirEtatsCP () \n</code></pre></p>"},{"location":"CEQUEAU/classSimulation/#function-obtenirpasdetemps","title":"function obtenirPasDeTemps","text":"<p>Pas de temps en mxArray. <pre><code>mxArray * Simulation::obtenirPasDeTemps () \n</code></pre></p>"},{"location":"CEQUEAU/classSimulation/#function-simulation_1","title":"function ~Simulation","text":"<pre><code>Simulation::~Simulation () \n</code></pre>"},{"location":"CEQUEAU/classSimulation/#friends-documentation","title":"Friends Documentation","text":""},{"location":"CEQUEAU/classSimulation/#friend-simulationqualite","title":"friend SimulationQualite","text":"<pre><code>class Simulation::SimulationQualite (\n    SimulationQualite\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/classSimulationQualite/","title":"Class SimulationQualite","text":"<p>ClassList &gt; SimulationQualite</p> <p>Classe SimulationQualite .</p> <ul> <li><code>#include &lt;SimulationQualite.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classSimulationQualite/#public-functions","title":"Public Functions","text":"Type Name SimulationQualite (Simulation &amp; simulation, ParametresQualite &amp; param, DLI &amp; dli, const mxArray * etatsPrecedents, const mxArray * assimilations=NULL) Construteur. int executer (bool estMexFile=false) Execution de la simulation. mxArray * obtenirEtatsAvantAssimilations ()  mxArray * obtenirEtatsCP () Etats CP Qualite en mxArray. ~SimulationQualite ()"},{"location":"CEQUEAU/classSimulationQualite/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classSimulationQualite/#function-simulationqualite","title":"function SimulationQualite","text":"<p>Construteur. <pre><code>SimulationQualite::SimulationQualite (\n    Simulation &amp; simulation,\n    ParametresQualite &amp; param,\n    DLI &amp; dli,\n    const mxArray * etatsPrecedents,\n    const mxArray * assimilations=NULL\n) \n</code></pre></p>"},{"location":"CEQUEAU/classSimulationQualite/#function-executer","title":"function executer","text":"<p>Execution de la simulation. <pre><code>int SimulationQualite::executer (\n    bool estMexFile=false\n) \n</code></pre></p>"},{"location":"CEQUEAU/classSimulationQualite/#function-obteniretatsavantassimilations","title":"function obtenirEtatsAvantAssimilations","text":"<pre><code>mxArray * SimulationQualite::obtenirEtatsAvantAssimilations () \n</code></pre>"},{"location":"CEQUEAU/classSimulationQualite/#function-obteniretatscp-12","title":"function obtenirEtatsCP [1/2]","text":"<p>Etats CP Qualite en mxArray. <pre><code>mxArray * SimulationQualite::obtenirEtatsCP () \n</code></pre></p>"},{"location":"CEQUEAU/classSimulationQualite/#function-simulationqualite_1","title":"function ~SimulationQualite","text":"<pre><code>SimulationQualite::~SimulationQualite () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite.h</code></p>"},{"location":"CEQUEAU/classSolarFunctions/","title":"Class SolarFunctions","text":"<p>ClassList &gt; SolarFunctions</p>"},{"location":"CEQUEAU/classSolarFunctions/#public-functions","title":"Public Functions","text":"Type Name SolarFunctions ()  SolarFunctions (DateChrono pasTemp, const CarreauEntier &amp; carreauEntier)  void computeZenithAngle (float hours)  float getZenithAngle ()  ~SolarFunctions ()"},{"location":"CEQUEAU/classSolarFunctions/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classSolarFunctions/#function-solarfunctions-12","title":"function SolarFunctions [1/2]","text":"<pre><code>SolarFunctions::SolarFunctions () \n</code></pre>"},{"location":"CEQUEAU/classSolarFunctions/#function-solarfunctions-22","title":"function SolarFunctions [2/2]","text":"<pre><code>SolarFunctions::SolarFunctions (\n    DateChrono pasTemp,\n    const CarreauEntier &amp; carreauEntier\n) \n</code></pre>"},{"location":"CEQUEAU/classSolarFunctions/#function-computezenithangle","title":"function computeZenithAngle","text":"<pre><code>void SolarFunctions::computeZenithAngle (\n    float hours\n) \n</code></pre>"},{"location":"CEQUEAU/classSolarFunctions/#function-getzenithangle","title":"function getZenithAngle","text":"<pre><code>float SolarFunctions::getZenithAngle () \n</code></pre>"},{"location":"CEQUEAU/classSolarFunctions/#function-solarfunctions","title":"function ~SolarFunctions","text":"<pre><code>SolarFunctions::~SolarFunctions () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SolarFunctions.h</code></p>"},{"location":"CEQUEAU/structSolarFunctions_1_1cLocation/","title":"Struct SolarFunctions::cLocation","text":"<p>ClassList &gt; cLocation</p>"},{"location":"CEQUEAU/structSolarFunctions_1_1cLocation/#public-attributes","title":"Public Attributes","text":"Type Name float dLatitude float dLongitude"},{"location":"CEQUEAU/structSolarFunctions_1_1cLocation/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/structSolarFunctions_1_1cLocation/#variable-dlatitude","title":"variable dLatitude","text":"<pre><code>float SolarFunctions::cLocation::dLatitude;\n</code></pre>"},{"location":"CEQUEAU/structSolarFunctions_1_1cLocation/#variable-dlongitude","title":"variable dLongitude","text":"<pre><code>float SolarFunctions::cLocation::dLongitude;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SolarFunctions.h</code></p>"},{"location":"CEQUEAU/structSolarFunctions_1_1cSunCoordinates/","title":"Struct SolarFunctions::cSunCoordinates","text":"<p>ClassList &gt; cSunCoordinates</p>"},{"location":"CEQUEAU/structSolarFunctions_1_1cSunCoordinates/#public-attributes","title":"Public Attributes","text":"Type Name float dAzimuth float dZenithAngle"},{"location":"CEQUEAU/structSolarFunctions_1_1cSunCoordinates/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/structSolarFunctions_1_1cSunCoordinates/#variable-dazimuth","title":"variable dAzimuth","text":"<pre><code>float SolarFunctions::cSunCoordinates::dAzimuth;\n</code></pre>"},{"location":"CEQUEAU/structSolarFunctions_1_1cSunCoordinates/#variable-dzenithangle","title":"variable dZenithAngle","text":"<pre><code>float SolarFunctions::cSunCoordinates::dZenithAngle;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SolarFunctions.h</code></p>"},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/","title":"Struct SolarFunctions::cTime","text":"<p>ClassList &gt; cTime</p>"},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/#public-attributes","title":"Public Attributes","text":"Type Name float dHours float dMinutes float dSeconds int iDay int iMonth int iYear"},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/#variable-dhours","title":"variable dHours","text":"<pre><code>float SolarFunctions::cTime::dHours;\n</code></pre>"},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/#variable-dminutes","title":"variable dMinutes","text":"<pre><code>float SolarFunctions::cTime::dMinutes;\n</code></pre>"},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/#variable-dseconds","title":"variable dSeconds","text":"<pre><code>float SolarFunctions::cTime::dSeconds;\n</code></pre>"},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/#variable-iday","title":"variable iDay","text":"<pre><code>int SolarFunctions::cTime::iDay;\n</code></pre>"},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/#variable-imonth","title":"variable iMonth","text":"<pre><code>int SolarFunctions::cTime::iMonth;\n</code></pre>"},{"location":"CEQUEAU/structSolarFunctions_1_1cTime/#variable-iyear","title":"variable iYear","text":"<pre><code>int SolarFunctions::cTime::iYear;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SolarFunctions.h</code></p>"},{"location":"CEQUEAU/classStation/","title":"Class Station","text":"<p>ClassList &gt; Station</p> <p>Definition d'une station meteo. </p> <ul> <li><code>#include &lt;Station.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classStation/#public-functions","title":"Public Functions","text":"Type Name Station (std::string no, std::string nom, int id, int i, int j, float moyAnPrecipitation_, float altitude_) Constructeur. float altitude () const int i () const int id () const int j () const float moyAnPrecipitation () const ~Station ()"},{"location":"CEQUEAU/classStation/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classStation/#function-station","title":"function Station","text":"<p>Constructeur. <pre><code>Station::Station (\n    std::string no,\n    std::string nom,\n    int id,\n    int i,\n    int j,\n    float moyAnPrecipitation_,\n    float altitude_\n) \n</code></pre></p>"},{"location":"CEQUEAU/classStation/#function-altitude","title":"function altitude","text":"<pre><code>float Station::altitude () const\n</code></pre>"},{"location":"CEQUEAU/classStation/#function-i","title":"function i","text":"<pre><code>int Station::i () const\n</code></pre>"},{"location":"CEQUEAU/classStation/#function-id","title":"function id","text":"<pre><code>int Station::id () const\n</code></pre>"},{"location":"CEQUEAU/classStation/#function-j","title":"function j","text":"<pre><code>int Station::j () const\n</code></pre>"},{"location":"CEQUEAU/classStation/#function-moyanprecipitation","title":"function moyAnPrecipitation","text":"<pre><code>float Station::moyAnPrecipitation () const\n</code></pre>"},{"location":"CEQUEAU/classStation/#function-station_1","title":"function ~Station","text":"<pre><code>Station::~Station () \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Station.h</code></p>"},{"location":"CEQUEAU/classTrieurCEGrille/","title":"Class TrieurCEGrille","text":"<p>ClassList &gt; TrieurCEGrille</p> <p>Classe utilitaire pour le tri des carreaux entiers. </p> <ul> <li><code>#include &lt;DonneesMeteo.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classTrieurCEGrille/#public-functions","title":"Public Functions","text":"Type Name bool operator() (const CarreauEntierPtr carreauEntier1, const CarreauEntierPtr carreauEntier2)"},{"location":"CEQUEAU/classTrieurCEGrille/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classTrieurCEGrille/#function-operator","title":"function operator()","text":"<pre><code>bool TrieurCEGrille::operator() (\n    const CarreauEntierPtr carreauEntier1,\n    const CarreauEntierPtr carreauEntier2\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/DonneesMeteo.h</code></p>"},{"location":"CEQUEAU/classTrieurMeteoId/","title":"Class TrieurMeteoId","text":"<p>ClassList &gt; TrieurMeteoId</p> <p>Classe utilitaire pour le tri des donnees meteo. </p> <ul> <li><code>#include &lt;DonneesMeteo.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classTrieurMeteoId/#public-functions","title":"Public Functions","text":"Type Name bool operator() (const MeteoPtr meteo1, const MeteoPtr meteor2)"},{"location":"CEQUEAU/classTrieurMeteoId/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/classTrieurMeteoId/#function-operator","title":"function operator()","text":"<pre><code>bool TrieurMeteoId::operator() (\n    const MeteoPtr meteo1,\n    const MeteoPtr meteor2\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/DonneesMeteo.h</code></p>"},{"location":"CEQUEAU/classValeurZone/","title":"Class ValeurZone","text":"<p>ClassList &gt; ValeurZone</p> <p>More...</p> <ul> <li><code>#include &lt;Parametres.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/classValeurZone/#public-attributes","title":"Public Attributes","text":"Type Name int iMax int iMin int jMax int jMin float valeur"},{"location":"CEQUEAU/classValeurZone/#detailed-description","title":"Detailed Description","text":"<p>valeur specifique d'un parametre pour la zone d\u00ef\u00bf\u00bdfinie par</p> <p>iMin, iMax, jMin et jMax </p>"},{"location":"CEQUEAU/classValeurZone/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/classValeurZone/#variable-imax","title":"variable iMax","text":"<pre><code>int ValeurZone::iMax;\n</code></pre>"},{"location":"CEQUEAU/classValeurZone/#variable-imin","title":"variable iMin","text":"<pre><code>int ValeurZone::iMin;\n</code></pre>"},{"location":"CEQUEAU/classValeurZone/#variable-jmax","title":"variable jMax","text":"<pre><code>int ValeurZone::jMax;\n</code></pre>"},{"location":"CEQUEAU/classValeurZone/#variable-jmin","title":"variable jMin","text":"<pre><code>int ValeurZone::jMin;\n</code></pre>"},{"location":"CEQUEAU/classValeurZone/#variable-valeur","title":"variable valeur","text":"<pre><code>float ValeurZone::valeur;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/namespacestd/","title":"Namespace std","text":"<p>Namespace List &gt; std</p> <p>STL namespace. </p> <p>The documentation for this class was generated from the following file <code>[STL]</code></p>"},{"location":"CEQUEAU/dir_68267d1309a1af8e8297ef4c3efbcdba/","title":"Dir src","text":"<p>FileList &gt; src</p>"},{"location":"CEQUEAU/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","title":"Files","text":"Type Name file AssimilationHelper.hpp file Barrage.cpp file Barrage.h file BassinVersant.cpp file BassinVersant.h file CarreauEntier.cpp file CarreauEntier.h file CarreauPartiel.cpp file CarreauPartiel.h file CequeauQuantiteMex.cpp file DLI.cpp file DLI.h file DateChrono.cpp file DateChrono.h file Defs.h file DonneesMeteo.cpp file DonneesMeteo.h file Evapo.h file EvapoCequeau.cpp file EvapoCequeau.h file EvapoKPenman.cpp file EvapoKPenman.h file EvapoMcGuinness.cpp file EvapoMcGuinness.h file EvapoMorton.cpp file EvapoMorton.h file EvapoPenmanMont.cpp file EvapoPenmanMont.h file EvapoPriestleyTaylor.cpp file EvapoPriestleyTaylor.h file EvapoTemplate.cpp file EvapoTemplate.h file Fonte.h file FonteCemaNeige.cpp file FonteCemaNeige.h file FonteCequeau.cpp file FonteCequeau.h file FonteTemplate.cpp file FonteTemplate.h file FonteUEB.cpp file FonteUEB.h file Interpolateur.cpp file Interpolateur.h file InterpolateurPolygoneThiessen.cpp file InterpolateurPolygoneThiessen.h file InterpolateurPonderationStations.cpp file InterpolateurPonderationStations.h file InterpolationMex.cpp file ListeStation.cpp file ListeStation.h file Meteo.cpp file Meteo.h file MexHelper.hpp file ModuleBase.hpp file Parametres.cpp file Parametres.h file ParametresInterpolation.cpp file ParametresInterpolation.h file ParametresQualite.cpp file ParametresQualite.h file Puits.cpp file Puits.h file Simulation.cpp file Simulation.h file SimulationQualite.cpp file SimulationQualite.h file SimulationQualite_IO.cpp file SimulationQualite_Ombrage.cpp file Simulation_Assimilation.cpp file Simulation_IO.cpp file Simulation_Production.cpp file Simulation_Transfert.cpp file SolarFunctions.cpp file SolarFunctions.h file Station.cpp file Station.h file compileCequeauMat.m file compileCequeauOct.m file compileInterpolationMat.m file compileInterpolationOct.m file conversionParametresV2-V4.m file log.h file stdafx.cpp file stdafx.h file targetver.h <p>The documentation for this class was generated from the following file <code>src/</code></p>"},{"location":"CEQUEAU/AssimilationHelper_8hpp/","title":"File AssimilationHelper.hpp","text":"<p>FileList &gt; src &gt; AssimilationHelper.hpp</p>"},{"location":"CEQUEAU/AssimilationHelper_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace AssimilationHelper Fonctions utilitaires pour l'assimilation."},{"location":"CEQUEAU/AssimilationHelper_8hpp/#public-types","title":"Public Types","text":"Type Name enum TypeAssim"},{"location":"CEQUEAU/AssimilationHelper_8hpp/#public-attributes","title":"Public Attributes","text":"Type Name const float ASSIMILATION_NO_DATA   = <code>-1.0f</code>"},{"location":"CEQUEAU/AssimilationHelper_8hpp/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/AssimilationHelper_8hpp/#enum-typeassim","title":"enum TypeAssim","text":"<pre><code>enum TypeAssim {\n    AUCUNE,\n    VALEUR,\n    FACTEURS\n};\n</code></pre>"},{"location":"CEQUEAU/AssimilationHelper_8hpp/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/AssimilationHelper_8hpp/#variable-assimilation_no_data","title":"variable ASSIMILATION_NO_DATA","text":"<pre><code>const float ASSIMILATION_NO_DATA;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/AssimilationHelper.hpp</code></p>"},{"location":"CEQUEAU/Barrage_8cpp/","title":"File Barrage.cpp","text":"<p>FileList &gt; src &gt; Barrage.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Barrage.h\"</code></li> <li><code>#include \"DateChrono.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Barrage.cpp</code></p>"},{"location":"CEQUEAU/Barrage_8h/","title":"File Barrage.h","text":"<p>FileList &gt; src &gt; Barrage.h</p> <ul> <li><code>#include \"stdafx.h\"</code></li> </ul>"},{"location":"CEQUEAU/Barrage_8h/#classes","title":"Classes","text":"Type Name class Barrage Definition d'un barrage."},{"location":"CEQUEAU/Barrage_8h/#public-types","title":"Public Types","text":"Type Name enum TypeBarrage Types de barrage. La valeur numerique represente le type selon Cequeau original."},{"location":"CEQUEAU/Barrage_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/Barrage_8h/#enum-typebarrage","title":"enum TypeBarrage","text":"<p>Types de barrage. La valeur numerique represente le type selon Cequeau original. <pre><code>enum TypeBarrage {\n    EVACUATION_MESUREE_INT = 1,\n    EVACUATION_CALCULEE = 2,\n    EVACUATION_MESUREE_EXT = 3,\n    EVACUATION_CALCULEE_SPECIAL = 5\n};\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/Barrage.h</code></p>"},{"location":"CEQUEAU/BassinVersant_8cpp/","title":"File BassinVersant.cpp","text":"<p>FileList &gt; src &gt; BassinVersant.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"BassinVersant.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/BassinVersant.cpp</code></p>"},{"location":"CEQUEAU/BassinVersant_8h/","title":"File BassinVersant.h","text":"<p>FileList &gt; src &gt; BassinVersant.h</p> <ul> <li><code>#include \"CarreauEntier.h\"</code></li> <li><code>#include \"CarreauPartiel.h\"</code></li> <li><code>#include \"Barrage.h\"</code></li> <li><code>#include \"Puits.h\"</code></li> </ul>"},{"location":"CEQUEAU/BassinVersant_8h/#classes","title":"Classes","text":"Type Name class BassinVersant Definition du bassin versant."},{"location":"CEQUEAU/BassinVersant_8h/#public-types","title":"Public Types","text":"Type Name typedef std::shared_ptr&lt; Barrage &gt; BarragePtr \"Smart pointer\" de barrage. typedef std::shared_ptr&lt; CarreauEntier &gt; CarreauEntierPtr \"Smart pointer\" de carreau entier. typedef std::shared_ptr&lt; CarreauPartiel &gt; CarreauPartielPtr \"Smart pointer\" de carreau partiel. typedef std::shared_ptr&lt; Puits &gt; PuitsPtr \"Smart pointer\" de puits"},{"location":"CEQUEAU/BassinVersant_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/BassinVersant_8h/#typedef-barrageptr","title":"typedef BarragePtr","text":"<p>\"Smart pointer\" de barrage. <pre><code>typedef std::shared_ptr&lt;Barrage&gt; BarragePtr;\n</code></pre></p>"},{"location":"CEQUEAU/BassinVersant_8h/#typedef-carreauentierptr","title":"typedef CarreauEntierPtr","text":"<p>\"Smart pointer\" de carreau entier. <pre><code>typedef std::shared_ptr&lt;CarreauEntier&gt; CarreauEntierPtr;\n</code></pre></p>"},{"location":"CEQUEAU/BassinVersant_8h/#typedef-carreaupartielptr","title":"typedef CarreauPartielPtr","text":"<p>\"Smart pointer\" de carreau partiel. <pre><code>typedef std::shared_ptr&lt;CarreauPartiel&gt; CarreauPartielPtr;\n</code></pre></p>"},{"location":"CEQUEAU/BassinVersant_8h/#typedef-puitsptr","title":"typedef PuitsPtr","text":"<p>\"Smart pointer\" de puits <pre><code>typedef std::shared_ptr&lt;Puits&gt; PuitsPtr;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/BassinVersant.h</code></p>"},{"location":"CEQUEAU/CarreauEntier_8cpp/","title":"File CarreauEntier.cpp","text":"<p>FileList &gt; src &gt; CarreauEntier.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"CarreauEntier.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/CarreauEntier.cpp</code></p>"},{"location":"CEQUEAU/CarreauEntier_8h/","title":"File CarreauEntier.h","text":"<p>FileList &gt; src &gt; CarreauEntier.h</p> <ul> <li><code>#include \"Parametres.h\"</code></li> </ul>"},{"location":"CEQUEAU/CarreauEntier_8h/#classes","title":"Classes","text":"Type Name class CarreauEntier Definition d'un carreau entier. <p>The documentation for this class was generated from the following file <code>src/CarreauEntier.h</code></p>"},{"location":"CEQUEAU/CarreauPartiel_8cpp/","title":"File CarreauPartiel.cpp","text":"<p>FileList &gt; src &gt; CarreauPartiel.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"CarreauPartiel.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/CarreauPartiel.cpp</code></p>"},{"location":"CEQUEAU/CarreauPartiel_8h/","title":"File CarreauPartiel.h","text":"<p>FileList &gt; src &gt; CarreauPartiel.h</p>"},{"location":"CEQUEAU/CarreauPartiel_8h/#classes","title":"Classes","text":"Type Name class CarreauPartiel Definition d'un carreau partiel."},{"location":"CEQUEAU/CarreauPartiel_8h/#public-attributes","title":"Public Attributes","text":"Type Name const int NB_CP_AMONT   = <code>5</code>Nombre maximal de carreaux partiels affluants."},{"location":"CEQUEAU/CarreauPartiel_8h/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/CarreauPartiel_8h/#variable-nb_cp_amont","title":"variable NB_CP_AMONT","text":"<p>Nombre maximal de carreaux partiels affluants. <pre><code>const int NB_CP_AMONT;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/CarreauPartiel.h</code></p>"},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/","title":"File CequeauQuantiteMex.cpp","text":"<p>FileList &gt; src &gt; CequeauQuantiteMex.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"BassinVersant.h\"</code></li> <li><code>#include \"Simulation.h\"</code></li> <li><code>#include \"Parametres.h\"</code></li> <li><code>#include \"DonneesMeteo.h\"</code></li> <li><code>#include \"FonteCequeau.h\"</code></li> <li><code>#include \"EvapoCequeau.h\"</code></li> <li><code>#include \"ParametresQualite.h\"</code></li> <li><code>#include \"SimulationQualite.h\"</code></li> <li><code>#include \"DLI.h\"</code></li> <li><code>#include \"FonteTemplate.h\"</code></li> <li><code>#include \"FonteUEB.h\"</code></li> <li><code>#include \"EvapoTemplate.h\"</code></li> <li><code>#include \"EvapoKPenman.h\"</code></li> <li><code>#include \"EvapoPriestleyTaylor.h\"</code></li> <li><code>#include \"EvapoPenmanMont.h\"</code></li> <li><code>#include \"EvapoMcGuinness.h\"</code></li> <li><code>#include \"FonteCemaNeige.h\"</code></li> <li><code>#include \"EvapoMorton.h\"</code></li> <li><code>#include \"InterpolateurPolygoneThiessen.h\"</code></li> <li><code>#include \"InterpolateurPonderationStations.h\"</code></li> <li><code>#include \"ParametresInterpolation.h\"</code></li> </ul>"},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#public-types","title":"Public Types","text":"Type Name typedef std::shared_ptr&lt; Interpolateur &gt; InterpolateurPtr"},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#public-attributes","title":"Public Attributes","text":"Type Name const std::string idMex   = <code>\"Cequeau Quantite v4.6.1 et Qualite v2.0.0\"</code>"},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#public-functions","title":"Public Functions","text":"Type Name void mexFunction (int nlhs, mxArray * plhs, int nrhs, const mxArray * prhs)"},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#typedef-interpolateurptr","title":"typedef InterpolateurPtr","text":"<pre><code>typedef std::shared_ptr&lt;Interpolateur&gt; InterpolateurPtr;\n</code></pre>"},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#variable-idmex","title":"variable idMex","text":"<pre><code>const std::string idMex;\n</code></pre>"},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/CequeauQuantiteMex_8cpp/#function-mexfunction","title":"function mexFunction","text":"<pre><code>void mexFunction (\n    int nlhs,\n    mxArray * plhs,\n    int nrhs,\n    const mxArray * prhs\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/CequeauQuantiteMex.cpp</code></p>"},{"location":"CEQUEAU/DLI_8cpp/","title":"File DLI.cpp","text":"<p>FileList &gt; src &gt; DLI.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"DLI.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/DLI.cpp</code></p>"},{"location":"CEQUEAU/DLI_8h/","title":"File DLI.h","text":"<p>FileList &gt; src &gt; DLI.h</p> <ul> <li><code>#include \"ModuleBase.hpp\"</code></li> </ul>"},{"location":"CEQUEAU/DLI_8h/#classes","title":"Classes","text":"Type Name class DLI <p>The documentation for this class was generated from the following file <code>src/DLI.h</code></p>"},{"location":"CEQUEAU/DateChrono_8cpp/","title":"File DateChrono.cpp","text":"<p>FileList &gt; src &gt; DateChrono.cpp</p> <ul> <li><code>#include \"DateChrono.h\"</code></li> <li><code>#include \"log.h\"</code></li> </ul>"},{"location":"CEQUEAU/DateChrono_8cpp/#public-attributes","title":"Public Attributes","text":"Type Name const unsigned int OFFSET_DATENUM   = <code>719530</code>"},{"location":"CEQUEAU/DateChrono_8cpp/#public-functions","title":"Public Functions","text":"Type Name std::ostream &amp; operator&lt;&lt; (std::ostream &amp; os, const DateChrono &amp; date)"},{"location":"CEQUEAU/DateChrono_8cpp/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/DateChrono_8cpp/#variable-offset_datenum","title":"variable OFFSET_DATENUM","text":"<pre><code>const unsigned int OFFSET_DATENUM;\n</code></pre>"},{"location":"CEQUEAU/DateChrono_8cpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/DateChrono_8cpp/#function-operator","title":"function operator&lt;&lt;","text":"<pre><code>std::ostream &amp; operator&lt;&lt; (\n    std::ostream &amp; os,\n    const DateChrono &amp; date\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/DateChrono.cpp</code></p>"},{"location":"CEQUEAU/DateChrono_8h/","title":"File DateChrono.h","text":"<p>FileList &gt; src &gt; DateChrono.h</p> <ul> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;cmath&gt;</code></li> <li><code>#include &lt;ctime&gt;</code></li> </ul>"},{"location":"CEQUEAU/DateChrono_8h/#classes","title":"Classes","text":"Type Name class DateChrono <p>The documentation for this class was generated from the following file <code>src/DateChrono.h</code></p>"},{"location":"CEQUEAU/Defs_8h/","title":"File Defs.h","text":"<p>FileList &gt; src &gt; Defs.h</p> <ul> <li><code>#include &lt;array&gt;</code></li> <li><code>#include \"DateChrono.h\"</code></li> </ul>"},{"location":"CEQUEAU/Defs_8h/#classes","title":"Classes","text":"Type Name class InfoEvacuationExt"},{"location":"CEQUEAU/Defs_8h/#public-types","title":"Public Types","text":"Type Name typedef std::array&lt; float, 12 &gt; MoyenneMois typedef std::array&lt; float, NB_MAX_PARAM_EQUATION &gt; ParamEquation"},{"location":"CEQUEAU/Defs_8h/#public-attributes","title":"Public Attributes","text":"Type Name const int NB_MAX_PARAM_EQUATION   = <code>7</code>"},{"location":"CEQUEAU/Defs_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/Defs_8h/#typedef-moyennemois","title":"typedef MoyenneMois","text":"<pre><code>typedef std::array&lt;float, 12&gt; MoyenneMois;\n</code></pre>"},{"location":"CEQUEAU/Defs_8h/#typedef-paramequation","title":"typedef ParamEquation","text":"<pre><code>typedef std::array&lt;float, NB_MAX_PARAM_EQUATION&gt; ParamEquation;\n</code></pre>"},{"location":"CEQUEAU/Defs_8h/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/Defs_8h/#variable-nb_max_param_equation","title":"variable NB_MAX_PARAM_EQUATION","text":"<pre><code>const int NB_MAX_PARAM_EQUATION;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Defs.h</code></p>"},{"location":"CEQUEAU/DonneesMeteo_8cpp/","title":"File DonneesMeteo.cpp","text":"<p>FileList &gt; src &gt; DonneesMeteo.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"DonneesMeteo.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/DonneesMeteo.cpp</code></p>"},{"location":"CEQUEAU/DonneesMeteo_8h/","title":"File DonneesMeteo.h","text":"<p>FileList &gt; src &gt; DonneesMeteo.h</p> <ul> <li><code>#include \"Meteo.h\"</code></li> <li><code>#include \"BassinVersant.h\"</code></li> </ul>"},{"location":"CEQUEAU/DonneesMeteo_8h/#classes","title":"Classes","text":"Type Name class DonneesMeteo Ensemble des donnees meteo. class TrieurCEGrille Classe utilitaire pour le tri des carreaux entiers. class TrieurMeteoId Classe utilitaire pour le tri des donnees meteo."},{"location":"CEQUEAU/DonneesMeteo_8h/#public-types","title":"Public Types","text":"Type Name typedef std::vector&lt; MeteoPtr &gt; MeteoGrille Liste des donnees meteo. typedef std::shared_ptr&lt; Meteo &gt; MeteoPtr \"Smart pointer\" sur une donnee meteo."},{"location":"CEQUEAU/DonneesMeteo_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/DonneesMeteo_8h/#typedef-meteogrille","title":"typedef MeteoGrille","text":"<p>Liste des donnees meteo. <pre><code>typedef std::vector&lt;MeteoPtr&gt; MeteoGrille;\n</code></pre></p>"},{"location":"CEQUEAU/DonneesMeteo_8h/#typedef-meteoptr","title":"typedef MeteoPtr","text":"<p>\"Smart pointer\" sur une donnee meteo. <pre><code>typedef std::shared_ptr&lt;Meteo&gt; MeteoPtr;\n</code></pre></p> <p>The documentation for this class was generated from the following file <code>src/DonneesMeteo.h</code></p>"},{"location":"CEQUEAU/Evapo_8h/","title":"File Evapo.h","text":"<p>FileList &gt; src &gt; Evapo.h</p> <ul> <li><code>#include \"CarreauEntier.h\"</code></li> <li><code>#include \"Meteo.h\"</code></li> <li><code>#include \"ModuleBase.hpp\"</code></li> <li><code>#include \"DateChrono.h\"</code></li> </ul>"},{"location":"CEQUEAU/Evapo_8h/#classes","title":"Classes","text":"Type Name class Evapo Interface module d'evapotranspiration. <p>The documentation for this class was generated from the following file <code>src/Evapo.h</code></p>"},{"location":"CEQUEAU/EvapoCequeau_8cpp/","title":"File EvapoCequeau.cpp","text":"<p>FileList &gt; src &gt; EvapoCequeau.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"EvapoCequeau.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/EvapoCequeau.cpp</code></p>"},{"location":"CEQUEAU/EvapoCequeau_8h/","title":"File EvapoCequeau.h","text":"<p>FileList &gt; src &gt; EvapoCequeau.h</p> <ul> <li><code>#include \"Evapo.h\"</code></li> </ul>"},{"location":"CEQUEAU/EvapoCequeau_8h/#classes","title":"Classes","text":"Type Name class EvapoCequeau class EtatEvapoCE <p>The documentation for this class was generated from the following file <code>src/EvapoCequeau.h</code></p>"},{"location":"CEQUEAU/EvapoKPenman_8cpp/","title":"File EvapoKPenman.cpp","text":"<p>FileList &gt; src &gt; EvapoKPenman.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"EvapoKPenman.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/EvapoKPenman.cpp</code></p>"},{"location":"CEQUEAU/EvapoKPenman_8h/","title":"File EvapoKPenman.h","text":"<p>FileList &gt; src &gt; EvapoKPenman.h</p> <ul> <li><code>#include \"Evapo.h\"</code></li> </ul>"},{"location":"CEQUEAU/EvapoKPenman_8h/#classes","title":"Classes","text":"Type Name class EvapoKPenman <p>The documentation for this class was generated from the following file <code>src/EvapoKPenman.h</code></p>"},{"location":"CEQUEAU/EvapoMcGuinness_8cpp/","title":"File EvapoMcGuinness.cpp","text":"<p>FileList &gt; src &gt; EvapoMcGuinness.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"EvapoMcGuinness.h\"</code></li> </ul>"},{"location":"CEQUEAU/EvapoMcGuinness_8cpp/#macros","title":"Macros","text":"Type Name define PI <code>3.14159265</code>"},{"location":"CEQUEAU/EvapoMcGuinness_8cpp/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"CEQUEAU/EvapoMcGuinness_8cpp/#define-pi","title":"define PI","text":"<pre><code>#define PI `3.14159265`\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/EvapoMcGuinness.cpp</code></p>"},{"location":"CEQUEAU/EvapoMcGuinness_8h/","title":"File EvapoMcGuinness.h","text":"<p>FileList &gt; src &gt; EvapoMcGuinness.h</p> <ul> <li><code>#include \"Evapo.h\"</code></li> </ul>"},{"location":"CEQUEAU/EvapoMcGuinness_8h/#classes","title":"Classes","text":"Type Name class EvapoMcGuinness <p>The documentation for this class was generated from the following file <code>src/EvapoMcGuinness.h</code></p>"},{"location":"CEQUEAU/EvapoMorton_8cpp/","title":"File EvapoMorton.cpp","text":"<p>FileList &gt; src &gt; EvapoMorton.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"EvapoMorton.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/EvapoMorton.cpp</code></p>"},{"location":"CEQUEAU/EvapoMorton_8h/","title":"File EvapoMorton.h","text":"<p>FileList &gt; src &gt; EvapoMorton.h</p> <ul> <li><code>#include \"Evapo.h\"</code></li> </ul>"},{"location":"CEQUEAU/EvapoMorton_8h/#classes","title":"Classes","text":"Type Name class EvapoMorton <p>The documentation for this class was generated from the following file <code>src/EvapoMorton.h</code></p>"},{"location":"CEQUEAU/EvapoPenmanMont_8cpp/","title":"File EvapoPenmanMont.cpp","text":"<p>FileList &gt; src &gt; EvapoPenmanMont.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"EvapoPenmanMont.h\"</code></li> <li><code>#include \"mex.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/EvapoPenmanMont.cpp</code></p>"},{"location":"CEQUEAU/EvapoPenmanMont_8h/","title":"File EvapoPenmanMont.h","text":"<p>FileList &gt; src &gt; EvapoPenmanMont.h</p> <ul> <li><code>#include \"Evapo.h\"</code></li> </ul>"},{"location":"CEQUEAU/EvapoPenmanMont_8h/#classes","title":"Classes","text":"Type Name class EvapoPenmanMont <p>The documentation for this class was generated from the following file <code>src/EvapoPenmanMont.h</code></p>"},{"location":"CEQUEAU/EvapoPriestleyTaylor_8cpp/","title":"File EvapoPriestleyTaylor.cpp","text":"<p>FileList &gt; src &gt; EvapoPriestleyTaylor.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"EvapoPriestleyTaylor.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/EvapoPriestleyTaylor.cpp</code></p>"},{"location":"CEQUEAU/EvapoPriestleyTaylor_8h/","title":"File EvapoPriestleyTaylor.h","text":"<p>FileList &gt; src &gt; EvapoPriestleyTaylor.h</p> <ul> <li><code>#include \"Evapo.h\"</code></li> </ul>"},{"location":"CEQUEAU/EvapoPriestleyTaylor_8h/#classes","title":"Classes","text":"Type Name class EvapoPriestleyTaylor class EtatEvapoCE <p>The documentation for this class was generated from the following file <code>src/EvapoPriestleyTaylor.h</code></p>"},{"location":"CEQUEAU/EvapoTemplate_8cpp/","title":"File EvapoTemplate.cpp","text":"<p>FileList &gt; src &gt; EvapoTemplate.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"EvapoTemplate.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/EvapoTemplate.cpp</code></p>"},{"location":"CEQUEAU/EvapoTemplate_8h/","title":"File EvapoTemplate.h","text":"<p>FileList &gt; src &gt; EvapoTemplate.h</p> <ul> <li><code>#include \"Evapo.h\"</code></li> </ul>"},{"location":"CEQUEAU/EvapoTemplate_8h/#classes","title":"Classes","text":"Type Name class EvapoTemplate <p>The documentation for this class was generated from the following file <code>src/EvapoTemplate.h</code></p>"},{"location":"CEQUEAU/Fonte_8h/","title":"File Fonte.h","text":"<p>FileList &gt; src &gt; Fonte.h</p> <ul> <li><code>#include \"CarreauEntier.h\"</code></li> <li><code>#include \"Meteo.h\"</code></li> <li><code>#include \"ModuleBase.hpp\"</code></li> <li><code>#include \"DateChrono.h\"</code></li> </ul>"},{"location":"CEQUEAU/Fonte_8h/#classes","title":"Classes","text":"Type Name class Fonte Interface module de fonte. <p>The documentation for this class was generated from the following file <code>src/Fonte.h</code></p>"},{"location":"CEQUEAU/FonteCemaNeige_8cpp/","title":"File FonteCemaNeige.cpp","text":"<p>FileList &gt; src &gt; FonteCemaNeige.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"FonteCemaNeige.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/FonteCemaNeige.cpp</code></p>"},{"location":"CEQUEAU/FonteCemaNeige_8h/","title":"File FonteCemaNeige.h","text":"<p>FileList &gt; src &gt; FonteCemaNeige.h</p> <ul> <li><code>#include \"Fonte.h\"</code></li> </ul>"},{"location":"CEQUEAU/FonteCemaNeige_8h/#classes","title":"Classes","text":"Type Name class FonteCemaNeige class EtatFonteCE <p>The documentation for this class was generated from the following file <code>src/FonteCemaNeige.h</code></p>"},{"location":"CEQUEAU/FonteCequeau_8cpp/","title":"File FonteCequeau.cpp","text":"<p>FileList &gt; src &gt; FonteCequeau.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"FonteCequeau.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/FonteCequeau.cpp</code></p>"},{"location":"CEQUEAU/FonteCequeau_8h/","title":"File FonteCequeau.h","text":"<p>FileList &gt; src &gt; FonteCequeau.h</p> <ul> <li><code>#include \"Fonte.h\"</code></li> </ul>"},{"location":"CEQUEAU/FonteCequeau_8h/#classes","title":"Classes","text":"Type Name class FonteCequeau Definition d'une classe de calcul de la fonte. class EtatFonteCE <p>The documentation for this class was generated from the following file <code>src/FonteCequeau.h</code></p>"},{"location":"CEQUEAU/FonteTemplate_8cpp/","title":"File FonteTemplate.cpp","text":"<p>FileList &gt; src &gt; FonteTemplate.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"FonteTemplate.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/FonteTemplate.cpp</code></p>"},{"location":"CEQUEAU/FonteTemplate_8h/","title":"File FonteTemplate.h","text":"<p>FileList &gt; src &gt; FonteTemplate.h</p> <ul> <li><code>#include \"Fonte.h\"</code></li> </ul>"},{"location":"CEQUEAU/FonteTemplate_8h/#classes","title":"Classes","text":"Type Name class FonteTemplate <p>The documentation for this class was generated from the following file <code>src/FonteTemplate.h</code></p>"},{"location":"CEQUEAU/FonteUEB_8cpp/","title":"File FonteUEB.cpp","text":"<p>FileList &gt; src &gt; FonteUEB.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include &lt;cmath&gt;</code></li> <li><code>#include \"FonteUEB.h\"</code></li> <li><code>#include \"SolarFunctions.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/FonteUEB.cpp</code></p>"},{"location":"CEQUEAU/FonteUEB_8h/","title":"File FonteUEB.h","text":"<p>FileList &gt; src &gt; FonteUEB.h</p> <ul> <li><code>#include \"Fonte.h\"</code></li> </ul>"},{"location":"CEQUEAU/FonteUEB_8h/#classes","title":"Classes","text":"Type Name class FonteUEB Definition d'une classe de calcul de la fonte. class EtatFonteCE <p>The documentation for this class was generated from the following file <code>src/FonteUEB.h</code></p>"},{"location":"CEQUEAU/Interpolateur_8cpp/","title":"File Interpolateur.cpp","text":"<p>FileList &gt; src &gt; Interpolateur.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Interpolateur.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Interpolateur.cpp</code></p>"},{"location":"CEQUEAU/Interpolateur_8h/","title":"File Interpolateur.h","text":"<p>FileList &gt; src &gt; Interpolateur.h</p> <ul> <li><code>#include \"ListeStation.h\"</code></li> <li><code>#include \"BassinVersant.h\"</code></li> <li><code>#include \"ParametresInterpolation.h\"</code></li> <li><code>#include \"DonneesMeteo.h\"</code></li> </ul>"},{"location":"CEQUEAU/Interpolateur_8h/#classes","title":"Classes","text":"Type Name class DonneesInterpolation Donnees necessaires pour interpoler la meteo a chaque CE. class Interpolateur Classe Interpolation."},{"location":"CEQUEAU/Interpolateur_8h/#public-types","title":"Public Types","text":"Type Name typedef std::vector&lt; DonneesInterpolation &gt; DonneesCarreaux"},{"location":"CEQUEAU/Interpolateur_8h/#public-attributes","title":"Public Attributes","text":"Type Name const int IDX_PRECIPITATION   = <code>1</code> const int IDX_TEMPERATURE   = <code>0</code> const int NB_TYPE_STATION   = <code>2</code>"},{"location":"CEQUEAU/Interpolateur_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/Interpolateur_8h/#typedef-donneescarreaux","title":"typedef DonneesCarreaux","text":"<pre><code>typedef std::vector&lt;DonneesInterpolation&gt; DonneesCarreaux;\n</code></pre>"},{"location":"CEQUEAU/Interpolateur_8h/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/Interpolateur_8h/#variable-idx_precipitation","title":"variable IDX_PRECIPITATION","text":"<pre><code>const int IDX_PRECIPITATION;\n</code></pre>"},{"location":"CEQUEAU/Interpolateur_8h/#variable-idx_temperature","title":"variable IDX_TEMPERATURE","text":"<pre><code>const int IDX_TEMPERATURE;\n</code></pre>"},{"location":"CEQUEAU/Interpolateur_8h/#variable-nb_type_station","title":"variable NB_TYPE_STATION","text":"<pre><code>const int NB_TYPE_STATION;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Interpolateur.h</code></p>"},{"location":"CEQUEAU/InterpolateurPolygoneThiessen_8cpp/","title":"File InterpolateurPolygoneThiessen.cpp","text":"<p>FileList &gt; src &gt; InterpolateurPolygoneThiessen.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"InterpolateurPolygoneThiessen.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/InterpolateurPolygoneThiessen.cpp</code></p>"},{"location":"CEQUEAU/InterpolateurPolygoneThiessen_8h/","title":"File InterpolateurPolygoneThiessen.h","text":"<p>FileList &gt; src &gt; InterpolateurPolygoneThiessen.h</p> <ul> <li><code>#include \"Interpolateur.h\"</code></li> </ul>"},{"location":"CEQUEAU/InterpolateurPolygoneThiessen_8h/#classes","title":"Classes","text":"Type Name class InterpolateurPolygoneThiessen <p>The documentation for this class was generated from the following file <code>src/InterpolateurPolygoneThiessen.h</code></p>"},{"location":"CEQUEAU/InterpolateurPonderationStations_8cpp/","title":"File InterpolateurPonderationStations.cpp","text":"<p>FileList &gt; src &gt; InterpolateurPonderationStations.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"InterpolateurPonderationStations.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/InterpolateurPonderationStations.cpp</code></p>"},{"location":"CEQUEAU/InterpolateurPonderationStations_8h/","title":"File InterpolateurPonderationStations.h","text":"<p>FileList &gt; src &gt; InterpolateurPonderationStations.h</p> <ul> <li><code>#include \"Interpolateur.h\"</code></li> </ul>"},{"location":"CEQUEAU/InterpolateurPonderationStations_8h/#classes","title":"Classes","text":"Type Name class InterpolateurPonderationStations <p>The documentation for this class was generated from the following file <code>src/InterpolateurPonderationStations.h</code></p>"},{"location":"CEQUEAU/InterpolationMex_8cpp/","title":"File InterpolationMex.cpp","text":"<p>FileList &gt; src &gt; InterpolationMex.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"InterpolateurPolygoneThiessen.h\"</code></li> <li><code>#include \"InterpolateurPonderationStations.h\"</code></li> <li><code>#include \"ParametresInterpolation.h\"</code></li> <li><code>#include \"mex.h\"</code></li> </ul>"},{"location":"CEQUEAU/InterpolationMex_8cpp/#public-types","title":"Public Types","text":"Type Name typedef std::shared_ptr&lt; Interpolateur &gt; InterpolateurPtr"},{"location":"CEQUEAU/InterpolationMex_8cpp/#public-attributes","title":"Public Attributes","text":"Type Name const std::string idMex   = <code>\"Cequeau Interpolation v1.0.1\"</code>"},{"location":"CEQUEAU/InterpolationMex_8cpp/#public-functions","title":"Public Functions","text":"Type Name void mexFunction (int nlhs, mxArray * plhs, int nrhs, const mxArray * prhs)"},{"location":"CEQUEAU/InterpolationMex_8cpp/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/InterpolationMex_8cpp/#typedef-interpolateurptr","title":"typedef InterpolateurPtr","text":"<pre><code>typedef std::shared_ptr&lt;Interpolateur&gt; InterpolateurPtr;\n</code></pre>"},{"location":"CEQUEAU/InterpolationMex_8cpp/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/InterpolationMex_8cpp/#variable-idmex","title":"variable idMex","text":"<pre><code>const std::string idMex;\n</code></pre>"},{"location":"CEQUEAU/InterpolationMex_8cpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/InterpolationMex_8cpp/#function-mexfunction","title":"function mexFunction","text":"<pre><code>void mexFunction (\n    int nlhs,\n    mxArray * plhs,\n    int nrhs,\n    const mxArray * prhs\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/InterpolationMex.cpp</code></p>"},{"location":"CEQUEAU/ListeStation_8cpp/","title":"File ListeStation.cpp","text":"<p>FileList &gt; src &gt; ListeStation.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"ListeStation.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/ListeStation.cpp</code></p>"},{"location":"CEQUEAU/ListeStation_8h/","title":"File ListeStation.h","text":"<p>FileList &gt; src &gt; ListeStation.h</p> <ul> <li><code>#include \"Station.h\"</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"CEQUEAU/ListeStation_8h/#classes","title":"Classes","text":"Type Name class ListeStation Definition d'une liste de stations meteo."},{"location":"CEQUEAU/ListeStation_8h/#public-types","title":"Public Types","text":"Type Name typedef std::shared_ptr&lt; Station &gt; StationPtr \"Smart pointer\" de station. typedef std::vector&lt; StationPtr &gt; Stations"},{"location":"CEQUEAU/ListeStation_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/ListeStation_8h/#typedef-stationptr","title":"typedef StationPtr","text":"<p>\"Smart pointer\" de station. <pre><code>typedef std::shared_ptr&lt;Station&gt; StationPtr;\n</code></pre></p>"},{"location":"CEQUEAU/ListeStation_8h/#typedef-stations","title":"typedef Stations","text":"<pre><code>typedef std::vector&lt;StationPtr&gt; Stations;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/ListeStation.h</code></p>"},{"location":"CEQUEAU/Meteo_8cpp/","title":"File Meteo.cpp","text":"<p>FileList &gt; src &gt; Meteo.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Meteo.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Meteo.cpp</code></p>"},{"location":"CEQUEAU/Meteo_8h/","title":"File Meteo.h","text":"<p>FileList &gt; src &gt; Meteo.h</p>"},{"location":"CEQUEAU/Meteo_8h/#classes","title":"Classes","text":"Type Name class Meteo Definition d'une donnee meteo. <p>The documentation for this class was generated from the following file <code>src/Meteo.h</code></p>"},{"location":"CEQUEAU/MexHelper_8hpp/","title":"File MexHelper.hpp","text":"<p>FileList &gt; src &gt; MexHelper.hpp</p> <ul> <li><code>#include \"mex.h\"</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"log.h\"</code></li> <li><code>#include \"DateChrono.h\"</code></li> <li><code>#include \"Defs.h\"</code></li> <li><code>#include &lt;typeinfo&gt;</code></li> </ul>"},{"location":"CEQUEAU/MexHelper_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace MexHelper Fonctions utilitaires pour faciliter l'usage de l'API Matlab."},{"location":"CEQUEAU/MexHelper_8hpp/#public-attributes","title":"Public Attributes","text":"Type Name const unsigned int SECONDES   = <code>86400</code>"},{"location":"CEQUEAU/MexHelper_8hpp/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/MexHelper_8hpp/#variable-secondes","title":"variable SECONDES","text":"<pre><code>const unsigned int SECONDES;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/MexHelper.hpp</code></p>"},{"location":"CEQUEAU/ModuleBase_8hpp/","title":"File ModuleBase.hpp","text":"<p>FileList &gt; src &gt; ModuleBase.hpp</p> <ul> <li><code>#include \"AssimilationHelper.hpp\"</code></li> <li><code>#include \"DateChrono.h\"</code></li> </ul>"},{"location":"CEQUEAU/ModuleBase_8hpp/#classes","title":"Classes","text":"Type Name class ModuleBase Classe de base pour les modules de fonte et d'evapotranspiration. <p>The documentation for this class was generated from the following file <code>src/ModuleBase.hpp</code></p>"},{"location":"CEQUEAU/Parametres_8cpp/","title":"File Parametres.cpp","text":"<p>FileList &gt; src &gt; Parametres.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Parametres.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Parametres.cpp</code></p>"},{"location":"CEQUEAU/Parametres_8h/","title":"File Parametres.h","text":"<p>FileList &gt; src &gt; Parametres.h</p> <ul> <li><code>#include \"DateChrono.h\"</code></li> </ul>"},{"location":"CEQUEAU/Parametres_8h/#classes","title":"Classes","text":"Type Name class ParamCE Parametres spatialisables. class ParamFacultatifs Classe de donnees pour les parametres facultatifs. class ParamOption Classe de donnees pour les parametres optionnels. class ParamPompage class ParamSol Classe de donnees des parametres relatifs reservoirs SOL, NAPPE et MARAIS. class ParamSolInitial Classe de donnees pour les valeurs initiales des reservoirs. class ParamTransfert Classe de donnees pour les parametres relatifs a la fonction de transfert. class Parametres Classe des parametres de la simulation. class ValeurZone"},{"location":"CEQUEAU/Parametres_8h/#public-types","title":"Public Types","text":"Type Name typedef std::multimap&lt; DateChrono, ValeurZone &gt;::const_iterator RelevesNeigeIter enum TypeAjustementNeige"},{"location":"CEQUEAU/Parametres_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/Parametres_8h/#typedef-relevesneigeiter","title":"typedef RelevesNeigeIter","text":"<pre><code>typedef std::multimap&lt;DateChrono,ValeurZone&gt;::const_iterator RelevesNeigeIter;\n</code></pre>"},{"location":"CEQUEAU/Parametres_8h/#enum-typeajustementneige","title":"enum TypeAjustementNeige","text":"<pre><code>enum TypeAjustementNeige {\n    AUCUN,\n    ZONE,\n    STATIONS_3\n};\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Parametres.h</code></p>"},{"location":"CEQUEAU/ParametresInterpolation_8cpp/","title":"File ParametresInterpolation.cpp","text":"<p>FileList &gt; src &gt; ParametresInterpolation.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"ParametresInterpolation.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/ParametresInterpolation.cpp</code></p>"},{"location":"CEQUEAU/ParametresInterpolation_8h/","title":"File ParametresInterpolation.h","text":"<p>FileList &gt; src &gt; ParametresInterpolation.h</p>"},{"location":"CEQUEAU/ParametresInterpolation_8h/#classes","title":"Classes","text":"Type Name class ParametresInterpolation Classe des parametres de la simulation. <p>The documentation for this class was generated from the following file <code>src/ParametresInterpolation.h</code></p>"},{"location":"CEQUEAU/ParametresQualite_8cpp/","title":"File ParametresQualite.cpp","text":"<p>FileList &gt; src &gt; ParametresQualite.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"ParametresQualite.h\"</code></li> <li><code>#include \"mex.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/ParametresQualite.cpp</code></p>"},{"location":"CEQUEAU/ParametresQualite_8h/","title":"File ParametresQualite.h","text":"<p>FileList &gt; src &gt; ParametresQualite.h</p>"},{"location":"CEQUEAU/ParametresQualite_8h/#classes","title":"Classes","text":"Type Name class ParamTemperature Classe de donnees des parametres qualite relatifs a la temperature de l'eau. class ParametresQualite Classe des parametres de la simulation."},{"location":"CEQUEAU/ParametresQualite_8h/#public-types","title":"Public Types","text":"Type Name typedef std::array&lt; float, 12 &gt; MoyenneMois"},{"location":"CEQUEAU/ParametresQualite_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/ParametresQualite_8h/#typedef-moyennemois","title":"typedef MoyenneMois","text":"<pre><code>typedef std::array&lt;float, 12&gt; MoyenneMois;\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/ParametresQualite.h</code></p>"},{"location":"CEQUEAU/Puits_8cpp/","title":"File Puits.cpp","text":"<p>FileList &gt; src &gt; Puits.cpp</p> <ul> <li><code>#include \"Puits.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Puits.cpp</code></p>"},{"location":"CEQUEAU/Puits_8h/","title":"File Puits.h","text":"<p>FileList &gt; src &gt; Puits.h</p> <ul> <li><code>#include \"stdafx.h\"</code></li> </ul>"},{"location":"CEQUEAU/Puits_8h/#classes","title":"Classes","text":"Type Name class Puits <p>The documentation for this class was generated from the following file <code>src/Puits.h</code></p>"},{"location":"CEQUEAU/Simulation_8cpp/","title":"File Simulation.cpp","text":"<p>FileList &gt; src &gt; Simulation.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Simulation.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Simulation.cpp</code></p>"},{"location":"CEQUEAU/Simulation_8h/","title":"File Simulation.h","text":"<p>FileList &gt; src &gt; Simulation.h</p> <ul> <li><code>#include \"BassinVersant.h\"</code></li> <li><code>#include \"Parametres.h\"</code></li> <li><code>#include \"DonneesMeteo.h\"</code></li> <li><code>#include \"Fonte.h\"</code></li> <li><code>#include \"Evapo.h\"</code></li> <li><code>#include \"DateChrono.h\"</code></li> </ul>"},{"location":"CEQUEAU/Simulation_8h/#namespaces","title":"Namespaces","text":"Type Name namespace ModuleEvapo namespace ModuleFonte"},{"location":"CEQUEAU/Simulation_8h/#classes","title":"Classes","text":"Type Name class EtatBarrage Classe de donnees de l'etat d'un barrage. class EtatBarrageAssim Classe de donnees pour l'assimilation des etats d'un barrage. class EtatCarreauEntier Classe de donnees de l'etat d'un carreau entier. class Qualite class EtatCarreauEntierAssim Classe de donnees pour l'assimilation des etats d'un carreau entier. class EtatCarreauPartiel Classe de donnees de l'etat d'un carreau partiel. class Qualite class EtatCarreauPartielAssim Classe de donnees pour l'assimilation des etats d'un carreau partiel. class ReleveNeige class Simulation Classe simulation."},{"location":"CEQUEAU/Simulation_8h/#public-types","title":"Public Types","text":"Type Name typedef std::vector&lt; EtatBarrage &gt; EtatsBarrages Liste des etats des barrages a chaque pas de temps. typedef std::vector&lt; EtatBarrageAssim &gt; EtatsBarragesAssim Liste des assimilations des barrages a chaque pas de temps. typedef std::vector&lt; EtatCarreauEntier &gt; EtatsCarreauxEntiers Liste des etats des carreaux entiers a chaque pas de temps. typedef std::vector&lt; EtatCarreauEntierAssim &gt; EtatsCarreauxEntiersAssim Liste des assimilations des carreaux entiers a chaque pas de temps. typedef std::vector&lt; EtatCarreauPartiel &gt; EtatsCarreauxPartiels Liste des etats des carreaux partiels a chaque pas de temps. typedef std::vector&lt; EtatCarreauPartielAssim &gt; EtatsCarreauxPartielsAssim Liste des assimilations des carreaux partiels a chaque pas de temps. typedef std::shared_ptr&lt; Evapo &gt; EvapoPtr typedef std::shared_ptr&lt; Fonte &gt; FontePtr typedef std::vector&lt; ReleveNeige &gt; RelevesNeige"},{"location":"CEQUEAU/Simulation_8h/#public-functions","title":"Public Functions","text":"Type Name bool sortByDistance (const ReleveNeige &amp; lhs, const ReleveNeige &amp; rhs)"},{"location":"CEQUEAU/Simulation_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/Simulation_8h/#typedef-etatsbarrages","title":"typedef EtatsBarrages","text":"<p>Liste des etats des barrages a chaque pas de temps. <pre><code>typedef std::vector&lt;EtatBarrage&gt; EtatsBarrages;\n</code></pre></p>"},{"location":"CEQUEAU/Simulation_8h/#typedef-etatsbarragesassim","title":"typedef EtatsBarragesAssim","text":"<p>Liste des assimilations des barrages a chaque pas de temps. <pre><code>typedef std::vector&lt;EtatBarrageAssim&gt; EtatsBarragesAssim;\n</code></pre></p>"},{"location":"CEQUEAU/Simulation_8h/#typedef-etatscarreauxentiers","title":"typedef EtatsCarreauxEntiers","text":"<p>Liste des etats des carreaux entiers a chaque pas de temps. <pre><code>typedef std::vector&lt;EtatCarreauEntier&gt; EtatsCarreauxEntiers;\n</code></pre></p>"},{"location":"CEQUEAU/Simulation_8h/#typedef-etatscarreauxentiersassim","title":"typedef EtatsCarreauxEntiersAssim","text":"<p>Liste des assimilations des carreaux entiers a chaque pas de temps. <pre><code>typedef std::vector&lt;EtatCarreauEntierAssim&gt; EtatsCarreauxEntiersAssim;\n</code></pre></p>"},{"location":"CEQUEAU/Simulation_8h/#typedef-etatscarreauxpartiels","title":"typedef EtatsCarreauxPartiels","text":"<p>Liste des etats des carreaux partiels a chaque pas de temps. <pre><code>typedef std::vector&lt;EtatCarreauPartiel&gt; EtatsCarreauxPartiels;\n</code></pre></p>"},{"location":"CEQUEAU/Simulation_8h/#typedef-etatscarreauxpartielsassim","title":"typedef EtatsCarreauxPartielsAssim","text":"<p>Liste des assimilations des carreaux partiels a chaque pas de temps. <pre><code>typedef std::vector&lt;EtatCarreauPartielAssim&gt; EtatsCarreauxPartielsAssim;\n</code></pre></p>"},{"location":"CEQUEAU/Simulation_8h/#typedef-evapoptr","title":"typedef EvapoPtr","text":"<pre><code>typedef std::shared_ptr&lt;Evapo&gt; EvapoPtr;\n</code></pre>"},{"location":"CEQUEAU/Simulation_8h/#typedef-fonteptr","title":"typedef FontePtr","text":"<pre><code>typedef std::shared_ptr&lt;Fonte&gt; FontePtr;\n</code></pre>"},{"location":"CEQUEAU/Simulation_8h/#typedef-relevesneige","title":"typedef RelevesNeige","text":"<pre><code>typedef std::vector&lt;ReleveNeige&gt; RelevesNeige;\n</code></pre>"},{"location":"CEQUEAU/Simulation_8h/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/Simulation_8h/#function-sortbydistance","title":"function sortByDistance","text":"<pre><code>bool sortByDistance (\n    const ReleveNeige &amp; lhs,\n    const ReleveNeige &amp; rhs\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation.h</code></p>"},{"location":"CEQUEAU/SimulationQualite_8cpp/","title":"File SimulationQualite.cpp","text":"<p>FileList &gt; src &gt; SimulationQualite.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"SimulationQualite.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite.cpp</code></p>"},{"location":"CEQUEAU/SimulationQualite_8h/","title":"File SimulationQualite.h","text":"<p>FileList &gt; src &gt; SimulationQualite.h</p> <ul> <li><code>#include \"Simulation.h\"</code></li> <li><code>#include \"FonteCequeau.h\"</code></li> <li><code>#include \"FonteCemaNeige.h\"</code></li> <li><code>#include \"FonteUEB.h\"</code></li> <li><code>#include \"EvapoPriestleyTaylor.h\"</code></li> <li><code>#include \"EvapoCequeau.h\"</code></li> <li><code>#include \"ParametresQualite.h\"</code></li> <li><code>#include \"DLI.h\"</code></li> <li><code>#include \"DateChrono.h\"</code></li> </ul>"},{"location":"CEQUEAU/SimulationQualite_8h/#namespaces","title":"Namespaces","text":"Type Name namespace Qualite"},{"location":"CEQUEAU/SimulationQualite_8h/#classes","title":"Classes","text":"Type Name class PositionSolaire Class pour calcul des positions solaires. class EtatCarreauPartiel Etats de la qualite a chaque CP. class EtatCarreauPartielAssim Classe de donnees pour l'assimilation des etats d'un carreau partiel. struct spa_data class SimulationQualite Classe SimulationQualite . <p>The documentation for this class was generated from the following file <code>src/SimulationQualite.h</code></p>"},{"location":"CEQUEAU/SimulationQualite__IO_8cpp/","title":"File SimulationQualite_IO.cpp","text":"<p>FileList &gt; src &gt; SimulationQualite_IO.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"SimulationQualite.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite_IO.cpp</code></p>"},{"location":"CEQUEAU/SimulationQualite__Ombrage_8cpp/","title":"File SimulationQualite_Ombrage.cpp","text":"<p>FileList &gt; src &gt; SimulationQualite_Ombrage.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"SimulationQualite.h\"</code></li> <li><code>#include \"mex.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/SimulationQualite_Ombrage.cpp</code></p>"},{"location":"CEQUEAU/Simulation__Assimilation_8cpp/","title":"File Simulation_Assimilation.cpp","text":"<p>FileList &gt; src &gt; Simulation_Assimilation.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Simulation.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Simulation_Assimilation.cpp</code></p>"},{"location":"CEQUEAU/Simulation__IO_8cpp/","title":"File Simulation_IO.cpp","text":"<p>FileList &gt; src &gt; Simulation_IO.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Simulation.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Simulation_IO.cpp</code></p>"},{"location":"CEQUEAU/Simulation__Production_8cpp/","title":"File Simulation_Production.cpp","text":"<p>FileList &gt; src &gt; Simulation_Production.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Simulation.h\"</code></li> <li><code>#include \"FonteCequeau.h\"</code></li> </ul>"},{"location":"CEQUEAU/Simulation__Production_8cpp/#public-functions","title":"Public Functions","text":"Type Name bool sortByDistance (const ReleveNeige &amp; lhs, const ReleveNeige &amp; rhs)"},{"location":"CEQUEAU/Simulation__Production_8cpp/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/Simulation__Production_8cpp/#function-sortbydistance","title":"function sortByDistance","text":"<pre><code>bool sortByDistance (\n    const ReleveNeige &amp; lhs,\n    const ReleveNeige &amp; rhs\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/Simulation_Production.cpp</code></p>"},{"location":"CEQUEAU/Simulation__Transfert_8cpp/","title":"File Simulation_Transfert.cpp","text":"<p>FileList &gt; src &gt; Simulation_Transfert.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Simulation.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Simulation_Transfert.cpp</code></p>"},{"location":"CEQUEAU/SolarFunctions_8cpp/","title":"File SolarFunctions.cpp","text":"<p>FileList &gt; src &gt; SolarFunctions.cpp</p> <ul> <li><code>#include \"SolarFunctions.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/SolarFunctions.cpp</code></p>"},{"location":"CEQUEAU/SolarFunctions_8h/","title":"File SolarFunctions.h","text":"<p>FileList &gt; src &gt; SolarFunctions.h</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"CarreauEntier.h\"</code></li> </ul>"},{"location":"CEQUEAU/SolarFunctions_8h/#classes","title":"Classes","text":"Type Name class SolarFunctions"},{"location":"CEQUEAU/SolarFunctions_8h/#macros","title":"Macros","text":"Type Name define dAstronomicalUnit <code>149597890.0f</code> define dEarthMeanRadius <code>6371.01f</code> define pi <code>3.14159265358979323846f</code> define rad <code>(pi / 180.0f)</code> define twopi <code>(2.0f \\* pi)</code>"},{"location":"CEQUEAU/SolarFunctions_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"CEQUEAU/SolarFunctions_8h/#define-dastronomicalunit","title":"define dAstronomicalUnit","text":"<pre><code>#define dAstronomicalUnit `149597890.0f`\n</code></pre>"},{"location":"CEQUEAU/SolarFunctions_8h/#define-dearthmeanradius","title":"define dEarthMeanRadius","text":"<pre><code>#define dEarthMeanRadius `6371.01f`\n</code></pre>"},{"location":"CEQUEAU/SolarFunctions_8h/#define-pi","title":"define pi","text":"<pre><code>#define pi `3.14159265358979323846f`\n</code></pre>"},{"location":"CEQUEAU/SolarFunctions_8h/#define-rad","title":"define rad","text":"<pre><code>#define rad `(pi / 180.0f)`\n</code></pre>"},{"location":"CEQUEAU/SolarFunctions_8h/#define-twopi","title":"define twopi","text":"<pre><code>#define twopi `(2.0f * pi)`\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/SolarFunctions.h</code></p>"},{"location":"CEQUEAU/Station_8cpp/","title":"File Station.cpp","text":"<p>FileList &gt; src &gt; Station.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> <li><code>#include \"Station.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/Station.cpp</code></p>"},{"location":"CEQUEAU/Station_8h/","title":"File Station.h","text":"<p>FileList &gt; src &gt; Station.h</p> <ul> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"CEQUEAU/Station_8h/#classes","title":"Classes","text":"Type Name class Station Definition d'une station meteo. <p>The documentation for this class was generated from the following file <code>src/Station.h</code></p>"},{"location":"CEQUEAU/compileCequeauMat_8m/","title":"File compileCequeauMat.m","text":"<p>FileList &gt; src &gt; compileCequeauMat.m</p>"},{"location":"CEQUEAU/compileCequeauMat_8m/#public-attributes","title":"Public Attributes","text":"Type Name COMPFLAGS   = <code>\" COMPFLAGS='$COMPFLAGS \"</code> COMPILER_COMP_FLAGS   = <code>\" /std:c++14 \"</code> CXXFLAGS   = <code>\" CXXFLAGS=$CXXFLAGS \"</code> if debug DBG_FLAG   = <code>\"-g \"</code> LOG_FLAG   = <code>\"\"</code> OUTFILE   = <code>\"../mex/cequeauQuantiteMat\"</code> SOURCES   = <code>[SOURCES 'Barrage.cpp ']</code> command   = <code>strcat(\"mex -v -largeArrayDims -output \", OUTFILE, DBG\\_FLAG, CXXFLAGS, COMPFLAGS, SOURCES)</code> compiler   = <code>string(mex.getCompilerConfigurations('c++').Manufacturer)</code> dbg   = <code>\"\\_DBG \"</code>"},{"location":"CEQUEAU/compileCequeauMat_8m/#public-functions","title":"Public Functions","text":"Type Name function compileCequeauMat ()  eval (command)  virtual id false ()  if strcmp (compiler, 'Microsoft')  elseif strcmp (compiler, 'GNU')"},{"location":"CEQUEAU/compileCequeauMat_8m/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-compflags","title":"variable COMPFLAGS","text":"<pre><code>if ~log COMPFLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-compiler_comp_flags","title":"variable COMPILER_COMP_FLAGS","text":"<pre><code>COMPILER_COMP_FLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-cxxflags","title":"variable CXXFLAGS","text":"<pre><code>end CXXFLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-dbg_flag","title":"variable DBG_FLAG","text":"<pre><code>else DBG_FLAG;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-log_flag","title":"variable LOG_FLAG","text":"<pre><code>if ~log LOG_FLAG;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-outfile","title":"variable OUTFILE","text":"<pre><code>OUTFILE;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-sources","title":"variable SOURCES","text":"<pre><code>SOURCES;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-command","title":"variable command","text":"<pre><code>command;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-compiler","title":"variable compiler","text":"<pre><code>compiler;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#variable-dbg","title":"variable dbg","text":"<pre><code>dbg;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/compileCequeauMat_8m/#function-compilecequeaumat","title":"function compileCequeauMat","text":"<pre><code>function compileCequeauMat () \n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#function-eval","title":"function eval","text":"<pre><code>eval (\n    command\n) \n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#function-false","title":"function false","text":"<pre><code>virtual id false () \n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#function-strcmp","title":"function strcmp","text":"<pre><code>if strcmp (\n    compiler,\n    'Microsoft'\n) \n</code></pre>"},{"location":"CEQUEAU/compileCequeauMat_8m/#function-strcmp_1","title":"function strcmp","text":"<pre><code>elseif strcmp (\n    compiler,\n    'GNU'\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/compileCequeauMat.m</code></p>"},{"location":"CEQUEAU/compileCequeauOct_8m/","title":"File compileCequeauOct.m","text":"<p>FileList &gt; src &gt; compileCequeauOct.m</p>"},{"location":"CEQUEAU/compileCequeauOct_8m/#public-attributes","title":"Public Attributes","text":"Type Name COMPFLAGS   = <code>\" \"</code> CXXFLAGS   = <code>\" -std=c++14 \"</code> if debug DBG_FLAG   = <code>\"-g \"</code> FLAGS   = <code>\" -DENV\\_OCTAVE \"</code> end OUTFILE   = <code>\" ../mex/cequeauQuantiteOct\"</code> SOURCES   = <code>[SOURCES 'Barrage.cpp ']</code> command   = <code>strcat(\"mkoctfile --mex \", FLAGS, CXXFLAGS, DBG\\_FLAG, COMPFLAGS, \" -o \", OUTFILE, \" \", SOURCES)</code> dbg   = <code>\"\\_DBG \"</code> end debug   = <code>false</code> log   = <code>false</code>"},{"location":"CEQUEAU/compileCequeauOct_8m/#public-functions","title":"Public Functions","text":"Type Name function compileCequeauOct ()  eval (command)"},{"location":"CEQUEAU/compileCequeauOct_8m/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-compflags","title":"variable COMPFLAGS","text":"<pre><code>if ~log COMPFLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-cxxflags","title":"variable CXXFLAGS","text":"<pre><code>CXXFLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-dbg_flag","title":"variable DBG_FLAG","text":"<pre><code>else DBG_FLAG;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-flags","title":"variable FLAGS","text":"<pre><code>FLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-outfile","title":"variable OUTFILE","text":"<pre><code>OUTFILE;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-sources","title":"variable SOURCES","text":"<pre><code>SOURCES;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-command","title":"variable command","text":"<pre><code>command;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-dbg","title":"variable dbg","text":"<pre><code>dbg;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-debug","title":"variable debug","text":"<pre><code>end debug;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#variable-log","title":"variable log","text":"<pre><code>log;\n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/compileCequeauOct_8m/#function-compilecequeauoct","title":"function compileCequeauOct","text":"<pre><code>function compileCequeauOct () \n</code></pre>"},{"location":"CEQUEAU/compileCequeauOct_8m/#function-eval","title":"function eval","text":"<pre><code>eval (\n    command\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/compileCequeauOct.m</code></p>"},{"location":"CEQUEAU/compileInterpolationMat_8m/","title":"File compileInterpolationMat.m","text":"<p>FileList &gt; src &gt; compileInterpolationMat.m</p>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#public-attributes","title":"Public Attributes","text":"Type Name COMPFLAGS   = <code>\" COMPFLAGS='$COMPFLAGS \"</code> COMPILER_COMP_FLAGS   = <code>\" /std:c++14 \"</code> CXXFLAGS   = <code>\" CXXFLAGS=$CXXFLAGS \"</code> if debug DBG_FLAG   = <code>\"-g \"</code> LOG_FLAG   = <code>\"\"</code> OUTFILE   = <code>\"../mex/cequeauInterpolationMat\"</code> SOURCES   = <code>[SOURCES 'Interpolateur.cpp ']</code> command   = <code>strcat(\"mex -v -largeArrayDims -output \", OUTFILE, DBG\\_FLAG, CXXFLAGS, COMPFLAGS, SOURCES)</code> compiler   = <code>string(mex.getCompilerConfigurations('c++').Manufacturer)</code> dbg   = <code>\"\\_DBG \"</code>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#public-functions","title":"Public Functions","text":"Type Name function compileInterpolationMat ()  eval (command)  virtual id false ()  if strcmp (compiler, 'Microsoft')  elseif strcmp (compiler, 'GNU')"},{"location":"CEQUEAU/compileInterpolationMat_8m/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-compflags","title":"variable COMPFLAGS","text":"<pre><code>COMPFLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-compiler_comp_flags","title":"variable COMPILER_COMP_FLAGS","text":"<pre><code>COMPILER_COMP_FLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-cxxflags","title":"variable CXXFLAGS","text":"<pre><code>end CXXFLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-dbg_flag","title":"variable DBG_FLAG","text":"<pre><code>else DBG_FLAG;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-log_flag","title":"variable LOG_FLAG","text":"<pre><code>if ~log LOG_FLAG;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-outfile","title":"variable OUTFILE","text":"<pre><code>OUTFILE;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-sources","title":"variable SOURCES","text":"<pre><code>SOURCES;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-command","title":"variable command","text":"<pre><code>command;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-compiler","title":"variable compiler","text":"<pre><code>compiler;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#variable-dbg","title":"variable dbg","text":"<pre><code>dbg;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/compileInterpolationMat_8m/#function-compileinterpolationmat","title":"function compileInterpolationMat","text":"<pre><code>function compileInterpolationMat () \n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#function-eval","title":"function eval","text":"<pre><code>eval (\n    command\n) \n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#function-false","title":"function false","text":"<pre><code>virtual id false () \n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#function-strcmp","title":"function strcmp","text":"<pre><code>if strcmp (\n    compiler,\n    'Microsoft'\n) \n</code></pre>"},{"location":"CEQUEAU/compileInterpolationMat_8m/#function-strcmp_1","title":"function strcmp","text":"<pre><code>elseif strcmp (\n    compiler,\n    'GNU'\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/compileInterpolationMat.m</code></p>"},{"location":"CEQUEAU/compileInterpolationOct_8m/","title":"File compileInterpolationOct.m","text":"<p>FileList &gt; src &gt; compileInterpolationOct.m</p>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#public-attributes","title":"Public Attributes","text":"Type Name COMPFLAGS   = <code>\" \"</code> CXXFLAGS   = <code>\" -std=c++14 \"</code> if debug DBG_FLAG   = <code>\" -g \"</code> FLAGS   = <code>\" -DENV\\_OCTAVE \"</code> end OUTFILE   = <code>\" ../mex/cequeauInterpolationOct\"</code> SOURCES   = <code>[SOURCES 'Interpolateur.cpp ']</code> command   = <code>strcat(\"mkoctfile --mex \", FLAGS, CXXFLAGS, DBG\\_FLAG, COMPFLAGS, \" -o \", OUTFILE, \" \", SOURCES)</code> dbg   = <code>\"\\_DBG \"</code> end debug   = <code>false</code> log   = <code>false</code>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#public-functions","title":"Public Functions","text":"Type Name function compileInterpolationOct ()  disp (command)  eval (command)"},{"location":"CEQUEAU/compileInterpolationOct_8m/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-compflags","title":"variable COMPFLAGS","text":"<pre><code>if ~log COMPFLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-cxxflags","title":"variable CXXFLAGS","text":"<pre><code>CXXFLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-dbg_flag","title":"variable DBG_FLAG","text":"<pre><code>else DBG_FLAG;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-flags","title":"variable FLAGS","text":"<pre><code>FLAGS;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-outfile","title":"variable OUTFILE","text":"<pre><code>OUTFILE;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-sources","title":"variable SOURCES","text":"<pre><code>SOURCES;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-command","title":"variable command","text":"<pre><code>command;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-dbg","title":"variable dbg","text":"<pre><code>dbg;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-debug","title":"variable debug","text":"<pre><code>end debug;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#variable-log","title":"variable log","text":"<pre><code>log;\n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/compileInterpolationOct_8m/#function-compileinterpolationoct","title":"function compileInterpolationOct","text":"<pre><code>function compileInterpolationOct () \n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#function-disp","title":"function disp","text":"<pre><code>disp (\n    command\n) \n</code></pre>"},{"location":"CEQUEAU/compileInterpolationOct_8m/#function-eval","title":"function eval","text":"<pre><code>eval (\n    command\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/compileInterpolationOct.m</code></p>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/","title":"File conversionParametresV2-V4.m","text":"<p>FileList &gt; src &gt; conversionParametresV2-V4.m</p>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#public-attributes","title":"Public Attributes","text":"Type Name parametresWork fonte cequeau   = <code>paramIn.neige</code> parametresWork evapo cequeau evnap   = <code>paramIn.sol.evnap</code> parametresWork evapo cequeau joeva   = <code>paramIn.option.joeva</code> parametresWork fonte cequeau jonei   = <code>paramIn.option.jonei</code> parametresWork option moduleFonte   = <code>1</code> parametresWork option   = <code>rmfield(paramIn.option, {'calculFonteExterne', 'jonei', 'joeva'})</code> function paramconv   = <code>/* multi line expression */</code> parametresWork   = <code>rmfield(paramIn, 'neige')</code> parametresWork sol   = <code>rmfield(paramIn.sol, {'evnap', 'xaa', 'xit'})</code> parametresWork solInitial   = <code>rmfield(paramIn.solInitial, {'tmur', 'tstock'})</code> parametresWork fonte cequeau tmur   = <code>paramIn.solInitial.tmur</code> parametresWork fonte cequeau tstock   = <code>paramIn.solInitial.tstock</code> parametresWork evapo cequeau xaa   = <code>paramIn.sol.xaa</code> parametresWork evapo cequeau xit   = <code>paramIn.sol.xit</code>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#public-functions","title":"Public Functions","text":"Type Name catch err disp (getReport(err, 'extended'))  disp ('CONVERSION INCOMPLETE')"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-cequeau","title":"variable cequeau","text":"<pre><code>parametresWork fonte cequeau;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-evnap","title":"variable evnap","text":"<pre><code>parametresWork evapo cequeau evnap;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-joeva","title":"variable joeva","text":"<pre><code>parametresWork evapo cequeau joeva;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-jonei","title":"variable jonei","text":"<pre><code>parametresWork fonte cequeau jonei;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-modulefonte","title":"variable moduleFonte","text":"<pre><code>parametresWork option moduleFonte;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-option","title":"variable option","text":"<pre><code>parametresWork option;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-paramconv","title":"variable paramconv","text":"<pre><code>function paramconv;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-parametreswork","title":"variable parametresWork","text":"<pre><code>parametresWork;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-sol","title":"variable sol","text":"<pre><code>parametresWork sol;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-solinitial","title":"variable solInitial","text":"<pre><code>parametresWork solInitial;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-tmur","title":"variable tmur","text":"<pre><code>parametresWork fonte cequeau tmur;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-tstock","title":"variable tstock","text":"<pre><code>parametresWork fonte cequeau tstock;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-xaa","title":"variable xaa","text":"<pre><code>parametresWork evapo cequeau xaa;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#variable-xit","title":"variable xit","text":"<pre><code>parametresWork evapo cequeau xit;\n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#function-disp","title":"function disp","text":"<pre><code>catch err disp (\n    getReport(err, 'extended')\n) \n</code></pre>"},{"location":"CEQUEAU/conversionParametresV2-V4_8m/#function-disp_1","title":"function disp","text":"<pre><code>disp (\n    'CONVERSION INCOMPLETE'\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>src/conversionParametresV2-V4.m</code></p>"},{"location":"CEQUEAU/log_8h/","title":"File log.h","text":"<p>FileList &gt; src &gt; log.h</p> <ul> <li><code>#include &lt;sstream&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;stdio.h&gt;</code></li> <li><code>#include &lt;sys/time.h&gt;</code></li> </ul>"},{"location":"CEQUEAU/log_8h/#classes","title":"Classes","text":"Type Name class FILELog class Log &lt;typename T&gt; class Output2FILE"},{"location":"CEQUEAU/log_8h/#public-types","title":"Public Types","text":"Type Name enum TLogLevel"},{"location":"CEQUEAU/log_8h/#public-functions","title":"Public Functions","text":"Type Name std::string NowTime ()"},{"location":"CEQUEAU/log_8h/#macros","title":"Macros","text":"Type Name define FILELOG_DECLSPEC define FILELOG_MAX_LEVEL <code>logDEBUG4</code> define FILE_LOG (level) <code>/* multi line expression */</code>"},{"location":"CEQUEAU/log_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/log_8h/#enum-tloglevel","title":"enum TLogLevel","text":"<pre><code>enum TLogLevel {\n    logERROR,\n    logWARNING,\n    logINFO,\n    logDEBUG,\n    logDEBUG1,\n    logDEBUG2,\n    logDEBUG3,\n    logDEBUG4\n};\n</code></pre>"},{"location":"CEQUEAU/log_8h/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"CEQUEAU/log_8h/#function-nowtime","title":"function NowTime","text":"<pre><code>inline std::string NowTime () \n</code></pre>"},{"location":"CEQUEAU/log_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"CEQUEAU/log_8h/#define-filelog_declspec","title":"define FILELOG_DECLSPEC","text":"<pre><code>#define FILELOG_DECLSPEC \n</code></pre>"},{"location":"CEQUEAU/log_8h/#define-filelog_max_level","title":"define FILELOG_MAX_LEVEL","text":"<pre><code>#define FILELOG_MAX_LEVEL `logDEBUG4`\n</code></pre>"},{"location":"CEQUEAU/log_8h/#define-file_log","title":"define FILE_LOG","text":"<pre><code>#define FILE_LOG (\n    level\n) `/* multi line expression */`\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/log.h</code></p>"},{"location":"CEQUEAU/stdafx_8cpp/","title":"File stdafx.cpp","text":"<p>FileList &gt; src &gt; stdafx.cpp</p> <ul> <li><code>#include \"stdafx.h\"</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/stdafx.cpp</code></p>"},{"location":"CEQUEAU/stdafx_8h/","title":"File stdafx.h","text":"<p>FileList &gt; src &gt; stdafx.h</p> <ul> <li><code>#include \"targetver.h\"</code></li> <li><code>#include &lt;unistd.h&gt;</code></li> <li><code>#include &lt;algorithm&gt;</code></li> <li><code>#include &lt;cstring&gt;</code></li> <li><code>#include &lt;cmath&gt;</code></li> <li><code>#include &lt;fstream&gt;</code></li> <li><code>#include &lt;iomanip&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include &lt;climits&gt;</code></li> <li><code>#include &lt;map&gt;</code></li> <li><code>#include &lt;sstream&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include &lt;ctime&gt;</code></li> <li><code>#include &lt;chrono&gt;</code></li> <li><code>#include &lt;array&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"DateChrono.h\"</code></li> <li><code>#include \"log.h\"</code></li> <li><code>#include \"MexHelper.hpp\"</code></li> </ul>"},{"location":"CEQUEAU/stdafx_8h/#public-types","title":"Public Types","text":"Type Name typedef int matError"},{"location":"CEQUEAU/stdafx_8h/#public-attributes","title":"Public Attributes","text":"Type Name const float FUSEAU_HORAIRE   = <code>-4.0f</code> const float PI   = <code>3.1416f</code>"},{"location":"CEQUEAU/stdafx_8h/#macros","title":"Macros","text":"Type Name define GetCurrentDir <code>getcwd</code> define absf (float_a) <code>std::abs&amp;lt;float&amp;gt;(float\\_a)</code> define maxf (float_a, float_b) <code>std::max&amp;lt;float&amp;gt;(float\\_a,float\\_b)</code> define minf (float_a, float_b) <code>std::min&amp;lt;float&amp;gt;(float\\_a,float\\_b)</code>"},{"location":"CEQUEAU/stdafx_8h/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"CEQUEAU/stdafx_8h/#typedef-materror","title":"typedef matError","text":"<pre><code>typedef int matError;\n</code></pre>"},{"location":"CEQUEAU/stdafx_8h/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"CEQUEAU/stdafx_8h/#variable-fuseau_horaire","title":"variable FUSEAU_HORAIRE","text":"<pre><code>const float FUSEAU_HORAIRE;\n</code></pre>"},{"location":"CEQUEAU/stdafx_8h/#variable-pi","title":"variable PI","text":"<pre><code>const float PI;\n</code></pre>"},{"location":"CEQUEAU/stdafx_8h/#macro-definition-documentation","title":"Macro Definition Documentation","text":""},{"location":"CEQUEAU/stdafx_8h/#define-getcurrentdir","title":"define GetCurrentDir","text":"<pre><code>#define GetCurrentDir `getcwd`\n</code></pre>"},{"location":"CEQUEAU/stdafx_8h/#define-absf","title":"define absf","text":"<pre><code>#define absf (\n    float_a\n) `std::abs&lt;float&gt;(float_a)`\n</code></pre>"},{"location":"CEQUEAU/stdafx_8h/#define-maxf","title":"define maxf","text":"<pre><code>#define maxf (\n    float_a,\n    float_b\n) `std::max&lt;float&gt;(float_a,float_b)`\n</code></pre>"},{"location":"CEQUEAU/stdafx_8h/#define-minf","title":"define minf","text":"<pre><code>#define minf (\n    float_a,\n    float_b\n) `std::min&lt;float&gt;(float_a,float_b)`\n</code></pre> <p>The documentation for this class was generated from the following file <code>src/stdafx.h</code></p>"},{"location":"CEQUEAU/targetver_8h/","title":"File targetver.h","text":"<p>FileList &gt; src &gt; targetver.h</p> <ul> <li><code>#include &lt;SDKDDKVer.h&gt;</code></li> </ul> <p>The documentation for this class was generated from the following file <code>src/targetver.h</code></p>"},{"location":"CEQUEAU/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace AssimilationHelper Fonctions utilitaires pour l'assimilation. </li> <li>namespace MexHelper Fonctions utilitaires pour faciliter l'usage de l'API Matlab. </li> <li>namespace ModuleEvapo </li> <li>namespace ModuleFonte </li> <li>namespace Qualite </li> <li>namespace std STL namespace. </li> </ul>"},{"location":"CEQUEAU/classes/","title":"Class Index","text":""},{"location":"CEQUEAU/classes/#b","title":"b","text":"<ul> <li>Barrage</li> <li>BassinVersant</li> </ul>"},{"location":"CEQUEAU/classes/#c","title":"c","text":"<ul> <li>CarreauEntier</li> <li>CarreauPartiel</li> <li>cLocation</li> <li>constants</li> <li>cSunCoordinates</li> <li>cTime</li> </ul>"},{"location":"CEQUEAU/classes/#d","title":"d","text":"<ul> <li>DateChrono</li> <li>DLI</li> <li>DonneesInterpolation</li> <li>DonneesMeteo</li> </ul>"},{"location":"CEQUEAU/classes/#e","title":"e","text":"<ul> <li>EtatBarrage</li> <li>EtatBarrageAssim</li> <li>EtatCarreauEntier</li> <li>EtatCarreauEntierAssim</li> <li>EtatCarreauPartiel</li> <li>EtatCarreauPartiel (Qualite)</li> <li>EtatCarreauPartielAssim</li> <li>EtatCarreauPartielAssim (Qualite)</li> <li>EtatEvapoAssimCE</li> <li>EtatEvapoAssimCE</li> <li>EtatEvapoAssimCE</li> <li>EtatEvapoAssimCE</li> <li>EtatEvapoAssimCE</li> <li>EtatEvapoAssimCE</li> <li>EtatEvapoAssimCE</li> <li>EtatEvapoCE (EvapoCequeau)</li> <li>EtatEvapoCE</li> <li>EtatEvapoCE</li> <li>EtatEvapoCE</li> <li>EtatEvapoCE</li> <li>EtatEvapoCE (EvapoPriestleyTaylor)</li> <li>EtatEvapoCE</li> <li>EtatFonteAssimCE</li> <li>EtatFonteAssimCE</li> <li>EtatFonteAssimCE</li> <li>EtatFonteAssimCE</li> <li>EtatFonteCE (FonteCemaNeige)</li> <li>EtatFonteCE (FonteCequeau)</li> <li>EtatFonteCE</li> <li>EtatFonteCE (FonteUEB)</li> <li>Evapo</li> <li>EvapoCequeau</li> <li>EvapoKPenman</li> <li>EvapoMcGuinness</li> <li>EvapoMorton</li> <li>EvapoPenmanMont</li> <li>EvapoPriestleyTaylor</li> <li>EvapoTemplate</li> </ul>"},{"location":"CEQUEAU/classes/#f","title":"f","text":"<ul> <li>FILELog</li> <li>Fonte</li> <li>FonteCemaNeige</li> <li>FonteCequeau</li> <li>FonteTemplate</li> <li>FonteUEB</li> </ul>"},{"location":"CEQUEAU/classes/#i","title":"i","text":"<ul> <li>InfoEvacuationExt</li> <li>Interpolateur</li> <li>InterpolateurPolygoneThiessen</li> <li>InterpolateurPonderationStations</li> </ul>"},{"location":"CEQUEAU/classes/#l","title":"l","text":"<ul> <li>ListeStation</li> <li>Log</li> </ul>"},{"location":"CEQUEAU/classes/#m","title":"m","text":"<ul> <li>Meteo</li> <li>ModuleBase</li> </ul>"},{"location":"CEQUEAU/classes/#o","title":"o","text":"<ul> <li>Output2FILE</li> </ul>"},{"location":"CEQUEAU/classes/#p","title":"p","text":"<ul> <li>ParamCE</li> <li>parameters</li> <li>Parametres</li> <li>ParametresInterpolation</li> <li>ParametresQualite</li> <li>ParamFacultatifs</li> <li>ParamOption</li> <li>ParamPompage</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>Params</li> <li>ParamSol</li> <li>ParamSolInitial</li> <li>ParamTemperature</li> <li>ParamTransfert</li> <li>PositionSolaire</li> <li>Puits</li> </ul>"},{"location":"CEQUEAU/classes/#q","title":"q","text":"<ul> <li>Qualite (EtatCarreauEntier)</li> <li>Qualite (EtatCarreauPartiel)</li> </ul>"},{"location":"CEQUEAU/classes/#r","title":"r","text":"<ul> <li>ReleveNeige</li> </ul>"},{"location":"CEQUEAU/classes/#s","title":"s","text":"<ul> <li>Simulation</li> <li>SimulationQualite</li> <li>SolarFunctions</li> <li>spa_data (Qualite)</li> <li>Station</li> </ul>"},{"location":"CEQUEAU/classes/#t","title":"t","text":"<ul> <li>TrieurCEGrille</li> <li>TrieurMeteoId</li> </ul>"},{"location":"CEQUEAU/classes/#v","title":"v","text":"<ul> <li>ValeurZone</li> </ul>"},{"location":"CEQUEAU/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class Barrage Definition d'un barrage. </li> <li>class BassinVersant Definition du bassin versant. </li> <li>class CarreauEntier Definition d'un carreau entier. </li> <li>class CarreauPartiel Definition d'un carreau partiel. </li> <li>class ModuleBase Classe de base pour les modules de fonte et d'evapotranspiration. <ul> <li>class DLI </li> <li>class Evapo Interface module d'evapotranspiration. <ul> <li>class EvapoCequeau </li> <li>class EvapoKPenman </li> <li>class EvapoMcGuinness </li> <li>class EvapoMorton </li> <li>class EvapoPenmanMont </li> <li>class EvapoPriestleyTaylor </li> <li>class EvapoTemplate </li> </ul> </li> <li>class Fonte Interface module de fonte. <ul> <li>class FonteCemaNeige </li> <li>class FonteCequeau Definition d'une classe de calcul de la fonte. </li> <li>class FonteTemplate </li> <li>class FonteUEB Definition d'une classe de calcul de la fonte. </li> </ul> </li> </ul> </li> <li>class DLI::Params </li> <li>class DateChrono </li> <li>class DonneesInterpolation Donnees necessaires pour interpoler la meteo a chaque CE. </li> <li>class DonneesMeteo Ensemble des donnees meteo. </li> <li>class EtatBarrage Classe de donnees de l'etat d'un barrage. </li> <li>class EtatBarrageAssim Classe de donnees pour l'assimilation des etats d'un barrage. </li> <li>class EtatCarreauEntier Classe de donnees de l'etat d'un carreau entier. </li> <li>class EtatCarreauEntier::Qualite </li> <li>class EtatCarreauEntierAssim Classe de donnees pour l'assimilation des etats d'un carreau entier. </li> <li>class EtatCarreauPartiel Classe de donnees de l'etat d'un carreau partiel. </li> <li>class EtatCarreauPartiel::Qualite </li> <li>class EtatCarreauPartielAssim Classe de donnees pour l'assimilation des etats d'un carreau partiel. </li> <li>class EvapoCequeau::EtatEvapoCE </li> <li>class EvapoCequeau::EtatEvapoAssimCE </li> <li>class EvapoCequeau::Params </li> <li>class EvapoKPenman::EtatEvapoAssimCE </li> <li>class EvapoKPenman::EtatEvapoCE </li> <li>class EvapoKPenman::Params </li> <li>class EvapoMcGuinness::EtatEvapoAssimCE </li> <li>class EvapoMcGuinness::EtatEvapoCE </li> <li>class EvapoMcGuinness::Params </li> <li>class EvapoMorton::EtatEvapoAssimCE </li> <li>class EvapoMorton::EtatEvapoCE </li> <li>class EvapoMorton::Params </li> <li>class EvapoPenmanMont::EtatEvapoAssimCE </li> <li>class EvapoPenmanMont::EtatEvapoCE </li> <li>class EvapoPenmanMont::Params </li> <li>class EvapoPriestleyTaylor::EtatEvapoCE </li> <li>class EvapoPriestleyTaylor::EtatEvapoAssimCE </li> <li>class EvapoPriestleyTaylor::Params </li> <li>class EvapoTemplate::EtatEvapoAssimCE </li> <li>class EvapoTemplate::EtatEvapoCE </li> <li>class EvapoTemplate::Params </li> <li>class Log </li> <li>class FonteCemaNeige::EtatFonteCE </li> <li>class FonteCemaNeige::EtatFonteAssimCE </li> <li>class FonteCemaNeige::Params </li> <li>class FonteCequeau::EtatFonteCE </li> <li>class FonteCequeau::EtatFonteAssimCE </li> <li>class FonteCequeau::Params Parametres necessaires au module de fonte __</li> <li>class FonteTemplate::EtatFonteAssimCE </li> <li>class FonteTemplate::EtatFonteCE </li> <li>class FonteTemplate::Params </li> <li>class FonteUEB::EtatFonteCE </li> <li>class FonteUEB::EtatFonteAssimCE </li> <li>class FonteUEB::constants </li> <li>class FonteUEB::parameters </li> <li>class InfoEvacuationExt </li> <li>class Interpolateur Classe Interpolation. <ul> <li>class InterpolateurPolygoneThiessen </li> <li>class InterpolateurPonderationStations </li> </ul> </li> <li>class ListeStation Definition d'une liste de stations meteo. </li> <li>class Meteo Definition d'une donnee meteo. </li> <li>class Output2FILE </li> <li>class ParamCE Parametres spatialisables.</li> <li>class ParamFacultatifs Classe de donnees pour les parametres facultatifs. </li> <li>class ParamOption Classe de donnees pour les parametres optionnels. </li> <li>class ParamPompage </li> <li>class ParamSol Classe de donnees des parametres relatifs reservoirs SOL, NAPPE et MARAIS. </li> <li>class ParamSolInitial Classe de donnees pour les valeurs initiales des reservoirs. </li> <li>class ParamTemperature Classe de donnees des parametres qualite relatifs a la temperature de l'eau. </li> <li>class ParamTransfert Classe de donnees pour les parametres relatifs a la fonction de transfert. </li> <li>class Parametres Classe des parametres de la simulation. </li> <li>class ParametresInterpolation Classe des parametres de la simulation. </li> <li>class ParametresQualite Classe des parametres de la simulation. </li> <li>class PositionSolaire Class pour calcul des positions solaires. </li> <li>class Puits </li> <li>class Qualite::EtatCarreauPartiel Etats de la qualite a chaque CP. </li> <li>class Qualite::EtatCarreauPartielAssim Classe de donnees pour l'assimilation des etats d'un carreau partiel. </li> <li>class ReleveNeige </li> <li>class Simulation Classe simulation. </li> <li>class SimulationQualite Classe SimulationQualite .</li> <li>class SolarFunctions </li> <li>class Station Definition d'une station meteo. </li> <li>class TrieurCEGrille Classe utilitaire pour le tri des carreaux entiers. </li> <li>class TrieurMeteoId Classe utilitaire pour le tri des donnees meteo. </li> <li>class ValeurZone </li> <li>struct Qualite::spa_data </li> <li>struct SolarFunctions::cLocation </li> <li>struct SolarFunctions::cSunCoordinates </li> <li>struct SolarFunctions::cTime </li> </ul>"},{"location":"CEQUEAU/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"CEQUEAU/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"CEQUEAU/class_members/","title":"Class Members","text":""},{"location":"CEQUEAU/class_members/#a","title":"a","text":"<ul> <li>altitude (CarreauEntier, Qualite::spa_data, Station)</li> <li>altitude_ (CarreauEntier, Station)</li> <li>altitudeMoyenne (CarreauPartiel)</li> <li>altitudeMoyenne_ (CarreauPartiel)</li> <li>azimutCoursEau (CarreauPartiel)</li> <li>azimutCoursEau_ (CarreauPartiel)</li> <li>a (DLI::Params)</li> <li>apport (EtatCarreauPartiel, EtatCarreauPartielAssim)</li> <li>apportType (EtatCarreauPartielAssim)</li> <li>assimiler (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation, SimulationQualite)</li> <li>assimilationsCE_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation)</li> <li>avantAssimilationsCE_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation)</li> <li>AGESN (FonteUEB)</li> <li>albedo (FonteUEB::EtatFonteCE, FonteUEB, FonteUEB::parameters)</li> <li>A_bg (FonteUEB::constants)</li> <li>aep (FonteUEB::parameters)</li> <li>airo (FonteUEB::parameters)</li> <li>avo (FonteUEB::parameters)</li> <li>aberration_correction (PositionSolaire)</li> <li>anomalie_moyenne_du_soleil (PositionSolaire)</li> <li>apparent_sun_longitude (PositionSolaire)</li> <li>argument_latitude_moon (PositionSolaire)</li> <li>ascending_longitude_moon (PositionSolaire)</li> <li>active (Puits)</li> <li>azimuth (Qualite::spa_data)</li> <li>ajusterNeige3Releves (Simulation)</li> <li>ajusterNeigeZone (Simulation)</li> <li>assimilationsBarrages_ (Simulation)</li> <li>assimilationsCP_ (Simulation, SimulationQualite)</li> <li>avantAssimilationsBarrages_ (Simulation)</li> <li>avantAssimilationsCP_ (Simulation, SimulationQualite)</li> </ul>"},{"location":"CEQUEAU/class_members/#b","title":"b","text":"<ul> <li>Barrage (Barrage)</li> <li>BassinVersant (BassinVersant)</li> <li>barrages (BassinVersant)</li> <li>barrages_ (BassinVersant, Simulation)</li> <li>b (DLI::Params, FonteUEB::parameters)</li> <li>bassinVersant_ (Interpolateur, Simulation, SimulationQualite)</li> <li>bassol (ParamTemperature)</li> <li>B_TERMS (PositionSolaire)</li> <li>b_subcount (PositionSolaire)</li> <li>bilans_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_members/#c","title":"c","text":"<ul> <li>calculerDebitAvecVolume (Barrage)</li> <li>calculerDebitEvacue (Barrage)</li> <li>calculerNiveauAvecVolume (Barrage)</li> <li>calculerVolumeCpAval (Barrage)</li> <li>calculerVolumeEvacue (Barrage)</li> <li>carreauxEntiers (BassinVersant)</li> <li>carreauxEntiers_ (BassinVersant)</li> <li>carreauxPartiels (BassinVersant)</li> <li>carreauxPartiels_ (BassinVersant)</li> <li>CarreauEntier (CarreauEntier)</li> <li>calculerCoeffPonderation (CarreauEntier)</li> <li>CarreauPartiel (CarreauPartiel)</li> <li>calculerCorrectionDebit (CarreauPartiel)</li> <li>codeCarreauPartiel (CarreauPartiel)</li> <li>codeCarreauPartiel_ (CarreauPartiel)</li> <li>coeffTransfert (CarreauPartiel)</li> <li>coeffTransfert_ (CarreauPartiel)</li> <li>cumulPctSuperficieCPAmont (CarreauPartiel)</li> <li>cumulPctSuperficieCPAmont_ (CarreauPartiel)</li> <li>cumulPctSuperficieForetAmont (CarreauPartiel)</li> <li>cumulPctSuperficieForetAmont_ (CarreauPartiel)</li> <li>cumulPctSuperficieLacsAmont (CarreauPartiel)</li> <li>cumulPctSuperficieLacsAmont_ (CarreauPartiel)</li> <li>cumulPctSuperficieMaraisAmont (CarreauPartiel)</li> <li>cumulPctSuperficieMaraisAmont_ (CarreauPartiel)</li> <li>custom_1 (CarreauPartiel)</li> <li>custom_1_ (CarreauPartiel)</li> <li>custom_2 (CarreauPartiel)</li> <li>custom_2_ (CarreauPartiel)</li> <li>calculeM1 (DLI)</li> <li>calculeM2 (DLI)</li> <li>calculeM3 (DLI)</li> <li>calculeM4 (DLI)</li> <li>calculeM5 (DLI)</li> <li>calculeM6 (DLI)</li> <li>calculeM7 (DLI)</li> <li>calculeM8 (DLI)</li> <li>calculeM9 (DLI)</li> <li>calculeRadiation (DLI)</li> <li>c (DLI::Params)</li> <li>CE (DonneesInterpolation)</li> <li>calculerAltitudeMoyStation (DonneesInterpolation)</li> <li>calculerSommePrecipitaionStation (DonneesInterpolation)</li> <li>correction (DonneesInterpolation, ReleveNeige)</li> <li>calculerEvapo (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>calculerEthorn (EvapoCequeau)</li> <li>calculerFacteurModulationSoleil (EvapoCequeau, FonteCequeau)</li> <li>constModulationSoleil_ (EvapoCequeau, FonteCequeau)</li> <li>calculerKPenman (EvapoKPenman)</li> <li>calculerPsychometricConstant (EvapoKPenman, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor)</li> <li>calculerSlopeSatVapPressure (EvapoKPenman, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor)</li> <li>calculerMcGuinness (EvapoMcGuinness)</li> <li>calculerMorton (EvapoMorton)</li> <li>calculerPenmanMont (EvapoPenmanMont)</li> <li>calculerFonctionVent (EvapoPriestleyTaylor)</li> <li>calculerPriestleyTaylor (EvapoPriestleyTaylor)</li> <li>calculerFonte (Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation)</li> <li>CTg (FonteCemaNeige::Params)</li> <li>coeffDeficitCalorique (FonteCequeau::Params)</li> <li>const_ (FonteUEB)</li> <li>C_g (FonteUEB::constants)</li> <li>C_p (FonteUEB::constants)</li> <li>C_s (FonteUEB::constants)</li> <li>C_w (FonteUEB::constants)</li> <li>calculerCorrections (Interpolateur, InterpolateurPolygoneThiessen, InterpolateurPonderationStations)</li> <li>calculerTempMoy (Meteo)</li> <li>coeffEmmagasinement (ParamCE, ParamPompage)</li> <li>coeffInfiltrationNappe (ParamCE, ParamSol)</li> <li>coeffVidangeBasseNappe (ParamCE, ParamSol)</li> <li>coeffVidangeHauteNappe (ParamCE, ParamSol)</li> <li>coeffVidangeIntermediaireSol (ParamCE, ParamSol)</li> <li>conductiviteHydraulique (ParamCE, ParamPompage)</li> <li>coeffTxParticuliers (ParamFacultatifs)</li> <li>calculQualite (ParamOption)</li> <li>coeffPompage (ParamPompage)</li> <li>coeffCorrectionPluieAnAltitude (ParamSol)</li> <li>coeffVidangeBasseSol (ParamSol)</li> <li>coeffVidangeLacsMarais (ParamSol)</li> <li>correctionTempAltitude (ParamSol)</li> <li>ccanope (ParamTemperature)</li> <li>cconve (ParamTemperature)</li> <li>cevapo (ParamTemperature)</li> <li>corsol (ParamTemperature)</li> <li>crayin (ParamTemperature)</li> <li>crayso (ParamTemperature)</li> <li>crigel (ParamTemperature)</li> <li>coep (ParametresInterpolation)</li> <li>coep_ (ParametresInterpolation)</li> <li>coet (ParametresInterpolation)</li> <li>coet_ (ParametresInterpolation)</li> <li>colarg (ParametresQualite)</li> <li>colarg_ (ParametresQualite)</li> <li>coprom (ParametresQualite)</li> <li>coprom_ (ParametresQualite)</li> <li>calcul_altitude_et_azimut_du_soleil (PositionSolaire)</li> <li>calculerBilanReservoirs (Simulation)</li> <li>calculerIndexMeteo (Simulation)</li> <li>calculerIndexPompage (Simulation)</li> <li>calculerTemperatureEau (Simulation, SimulationQualite)</li> <li>chargerEtatsBarrages (Simulation)</li> <li>chargerEtatsCE (Simulation)</li> <li>chargerEtatsCP (Simulation, SimulationQualite)</li> <li>convertirMetreCubeEnHauteur (Simulation)</li> <li>calculerCanopeLAI (SimulationQualite)</li> <li>calculerCanopeTypeArbre (SimulationQualite)</li> <li>calculerIndexPasDeTemps (SimulationQualite)</li> <li>calculerRatioOmbre (SimulationQualite)</li> <li>computeZenithAngle (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_members/#d","title":"d","text":"<ul> <li>debitsMesures (Barrage)</li> <li>debitsMesures_ (Barrage)</li> <li>DLI (DLI)</li> <li>d (DLI::Params)</li> <li>DateChrono (DateChrono)</li> <li>display (DateChrono)</li> <li>distancesCE (DonneesInterpolation)</li> <li>DonneesMeteo (DonneesMeteo)</li> <li>debitEntrant (EtatBarrage)</li> <li>debitsSortants (EtatBarrage)</li> <li>debit (EtatCarreauPartiel, EtatCarreauPartielAssim)</li> <li>debitType (EtatCarreauPartielAssim)</li> <li>Delta (FonteUEB)</li> <li>D_e (FonteUEB::constants)</li> <li>D (FonteUEB::parameters)</li> <li>dF (FonteUEB::parameters)</li> <li>de (FonteUEB::parameters)</li> <li>dateDebut (InfoEvacuationExt, Parametres)</li> <li>dateFin (InfoEvacuationExt, Parametres)</li> <li>donneesCarreauxTemps_ (Interpolateur)</li> <li>delai (ParamPompage)</li> <li>debitInitialExutoire (ParamSolInitial)</li> <li>dateDebut_ (Parametres)</li> <li>dateFin_ (Parametres)</li> <li>dureeHeuresPasSimulation (Parametres)</li> <li>dureeHeuresPasSimulation_ (Parametres)</li> <li>deg2rad (PositionSolaire, SolarFunctions)</li> <li>debitPompage (Puits)</li> <li>distanceRiviere (Puits)</li> <li>distance (ReleveNeige)</li> <li>debits_ (Simulation)</li> <li>donneesMeteo_ (Simulation, SimulationQualite)</li> <li>dli_ (SimulationQualite)</li> <li>dLatitude (SolarFunctions::cLocation)</li> <li>dLongitude (SolarFunctions::cLocation)</li> <li>dAzimuth (SolarFunctions::cSunCoordinates)</li> <li>dZenithAngle (SolarFunctions::cSunCoordinates)</li> <li>dHours (SolarFunctions::cTime)</li> <li>dMinutes (SolarFunctions::cTime)</li> <li>dSeconds (SolarFunctions::cTime)</li> </ul>"},{"location":"CEQUEAU/class_members/#e","title":"e","text":"<ul> <li>estPtot (DonneesMeteo)</li> <li>estPtot_ (DonneesMeteo)</li> <li>ETRLAC (EtatCarreauEntier::Qualite)</li> <li>ETRNAP (EtatCarreauEntier::Qualite)</li> <li>ETRSOL (EtatCarreauEntier::Qualite)</li> <li>evapoPotJour (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>evapoPotJourType (EtatCarreauEntierAssim)</li> <li>Evapo (Evapo)</li> <li>EvapoCequeau (EvapoCequeau)</li> <li>etatEvapoCE_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>etatsEvapo (EvapoCequeau, EvapoPriestleyTaylor)</li> <li>etatsEvapoCE_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>etatsEvapo_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>exposantThornthwaite (EvapoCequeau::Params)</li> <li>EvapoKPenman (EvapoKPenman)</li> <li>EvapoMcGuinness (EvapoMcGuinness)</li> <li>EvapoMorton (EvapoMorton)</li> <li>EvapoPenmanMont (EvapoPenmanMont)</li> <li>EvapoPriestleyTaylor (EvapoPriestleyTaylor)</li> <li>EvapoTemplate (EvapoTemplate)</li> <li>eTg (FonteCemaNeige::EtatFonteCE, FonteCemaNeige::Params)</li> <li>etatFonteCE_ (FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>etatsFonte (FonteCemaNeige, FonteCequeau, FonteUEB)</li> <li>etatsFonteCE_ (FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>etatsFonte_ (FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>eauDisponible (FonteCequeau::EtatFonteCE)</li> <li>E (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>emc (FonteUEB::parameters)</li> <li>ems (FonteUEB::parameters)</li> <li>executer (Interpolateur, InterpolateurPolygoneThiessen, InterpolateurPonderationStations, Simulation, SimulationQualite)</li> <li>earth_heliocentric_latitude (PositionSolaire)</li> <li>earth_heliocentric_longitude (PositionSolaire)</li> <li>earth_periodic_term_summation (PositionSolaire)</li> <li>earth_radius_vector (PositionSolaire)</li> <li>earth_values (PositionSolaire)</li> <li>ecliptic_mean_obliquity (PositionSolaire)</li> <li>ecliptic_true_obliquity (PositionSolaire)</li> <li>EtatCarreauPartiel (Qualite::EtatCarreauPartiel)</li> <li>eneram (Qualite::EtatCarreauPartiel)</li> <li>eneres (Qualite::EtatCarreauPartiel)</li> <li>enerlo (Qualite::EtatCarreauPartiel)</li> <li>elevation (Qualite::spa_data)</li> <li>ecrireResultats (Simulation)</li> <li>etatsPrecedents_ (Simulation, SimulationQualite)</li> <li>evapo_ (Simulation)</li> <li>executerProduction (Simulation)</li> <li>executerTransfert (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_members/#f","title":"f","text":"<ul> <li>fromMatlabDatenum (DateChrono)</li> <li>facteurPonderationCE (DonneesInterpolation)</li> <li>fractionEvapoNappe (EvapoCequeau::Params, EvapoKPenman::Params, EvapoMcGuinness::Params, EvapoMorton::Params, EvapoPenmanMont::Params, EvapoPriestleyTaylor::Params)</li> <li>Fonte (Fonte)</li> <li>FonteCemaNeige (FonteCemaNeige)</li> <li>fonte_reel (FonteCemaNeige::EtatFonteCE)</li> <li>FonteCequeau (FonteCequeau)</li> <li>FonteTemplate (FonteTemplate)</li> <li>FMELT (FonteUEB)</li> <li>FonteUEB (FonteUEB)</li> <li>Fm (FonteUEB::EtatFonteCE)</li> <li>fstab (FonteUEB::parameters)</li> <li>FromString (Log)</li> <li>fractionImpermeableCE (ParamCE, ParamSol)</li> <li>facultatifs (Parametres)</li> <li>facultatifs_ (Parametres)</li> <li>fuseauHoraire (Qualite::spa_data)</li> <li>fichierResultats_ (Simulation)</li> <li>fonte_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_members/#g","title":"g","text":"<ul> <li>getDay (DateChrono)</li> <li>getDayNumber (DateChrono)</li> <li>getDayOfYear (DateChrono)</li> <li>getJulianDay (DateChrono)</li> <li>getMonth (DateChrono)</li> <li>getTimePoint (DateChrono)</li> <li>getYear (DateChrono)</li> <li>G (FonteCemaNeige::EtatFonteCE, FonteCemaNeige::Params)</li> <li>Gseuil (FonteCemaNeige::Params)</li> <li>g (FonteUEB::constants)</li> <li>Get (Log)</li> <li>geocentric_declination (PositionSolaire)</li> <li>geocentric_right_ascension (PositionSolaire)</li> <li>greenwich_mean_sidereal_time (PositionSolaire)</li> <li>greenwich_sidereal_time (PositionSolaire)</li> <li>getActive (Puits)</li> <li>getDebitPompage (Puits)</li> <li>getDebitPompageParIndex (Puits)</li> <li>getDistanceRiviere (Puits)</li> <li>getIdCE (Puits)</li> <li>getNiveauInitial (Puits)</li> <li>getNiveauPuitsParIndex (Puits)</li> <li>getNiveauxPuits (Puits)</li> <li>getRayonP (Puits)</li> <li>getZenithAngle (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_members/#h","title":"h","text":"<ul> <li>hautMoyenneArbre (CarreauPartiel)</li> <li>hautMoyenneArbre_ (CarreauPartiel)</li> <li>H_f (FonteUEB::constants)</li> <li>Hne_u (FonteUEB::constants)</li> <li>h (FonteUEB::constants)</li> <li>hours (FonteUEB::parameters)</li> <li>hauteurReservoirSol (ParamCE, ParamSol)</li> <li>hombre (ParamTemperature)</li> <li>heureLocal (Qualite::spa_data)</li> <li>hasNeigeAjustee (Simulation)</li> <li>hasNeigeAjustee_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_members/#i","title":"i","text":"<ul> <li>idCP (Barrage)</li> <li>idCPAval (Barrage)</li> <li>idCPAval_ (Barrage)</li> <li>idCP_ (Barrage)</li> <li>initialiser (BassinVersant, DLI, DonneesMeteo, ListeStation, Parametres, ParametresInterpolation, ParametresQualite)</li> <li>initialiserBarrage (BassinVersant)</li> <li>initialiserCarreauxEntiers (BassinVersant)</li> <li>initialiserCarreauxPartiels (BassinVersant)</li> <li>initialiserFichier (BassinVersant, DonneesMeteo, Parametres)</li> <li>i (CarreauEntier, ReleveNeige, Station)</li> <li>i_ (CarreauEntier, Station)</li> <li>id (CarreauEntier, CarreauPartiel, Station)</li> <li>id_ (CarreauEntier, CarreauPartiel, Station)</li> <li>iCarreauEntier (CarreauPartiel, EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>iCarreauEntier_ (CarreauPartiel)</li> <li>idCarreauEntier (CarreauPartiel, EtatCarreauEntier, EtatCarreauEntierAssim, EvapoCequeau::EtatEvapoAssimCE, EvapoKPenman::EtatEvapoAssimCE, EvapoMcGuinness::EtatEvapoAssimCE, EvapoMorton::EtatEvapoAssimCE, EvapoPenmanMont::EtatEvapoAssimCE, EvapoPriestleyTaylor::EtatEvapoAssimCE, EvapoTemplate::EtatEvapoAssimCE, FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteAssimCE, FonteTemplate::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE, Meteo)</li> <li>idCarreauEntier_ (CarreauPartiel, Meteo)</li> <li>idCarreauPartielAval (CarreauPartiel)</li> <li>idCarreauPartielAval_ (CarreauPartiel)</li> <li>idCarreauxPartielsAmont (CarreauPartiel)</li> <li>idCarreauxPartielsAmont_ (CarreauPartiel)</li> <li>indiceFoliaire (CarreauPartiel)</li> <li>indiceFoliaire_ (CarreauPartiel)</li> <li>idCarreauPartiel (EtatBarrage, EtatBarrageAssim, EtatCarreauPartiel, EtatCarreauPartielAssim, Qualite::EtatCarreauPartiel, Qualite::EtatCarreauPartielAssim)</li> <li>initialiserAssimilations (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation, SimulationQualite)</li> <li>initialiserEtats (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation, SimulationQualite)</li> <li>indexThermiqueThornthwaite (EvapoCequeau::Params)</li> <li>indexMurissementNeigeIni (FonteCequeau::Params)</li> <li>indexTempNeigeIni (FonteCequeau::Params)</li> <li>Interpolateur (Interpolateur)</li> <li>initialiserListeCE (Interpolateur)</li> <li>interpoler (Interpolateur, InterpolateurPolygoneThiessen, InterpolateurPonderationStations)</li> <li>InterpolateurPolygoneThiessen (InterpolateurPolygoneThiessen)</li> <li>InterpolateurPonderationStations (InterpolateurPonderationStations)</li> <li>initialiserEtatsHelper (ModuleBase)</li> <li>infiltrationMax (ParamSol)</li> <li>initialiserOmbrage (ParametresQualite)</li> <li>idCE (Puits, ReleveNeige)</li> <li>initialiserCoeffTransfertCP (Simulation)</li> <li>iDay (SolarFunctions::cTime)</li> <li>iMonth (SolarFunctions::cTime)</li> <li>iYear (SolarFunctions::cTime)</li> <li>iMax (ValeurZone)</li> <li>iMin (ValeurZone)</li> </ul>"},{"location":"CEQUEAU/class_members/#j","title":"j","text":"<ul> <li>j (CarreauEntier, ReleveNeige, Station)</li> <li>j_ (CarreauEntier, Station)</li> <li>jCarreauEntier (CarreauPartiel, EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>jCarreauEntier_ (CarreauPartiel)</li> <li>jourSoleilMaxEvapo (EvapoCequeau::Params)</li> <li>jourSoleilMaxFonteNeige (FonteCequeau::Params)</li> <li>jce (Qualite::spa_data)</li> <li>jd (Qualite::spa_data)</li> <li>jj (Qualite::spa_data)</li> <li>jme (Qualite::spa_data)</li> <li>jMax (ValeurZone)</li> <li>jMin (ValeurZone)</li> </ul>"},{"location":"CEQUEAU/class_members/#k","title":"k","text":"<ul> <li>Kf (FonteCemaNeige::Params)</li> <li>K_s (FonteUEB::constants, FonteUEB::parameters)</li> <li>K_vc (FonteUEB::constants)</li> <li>K_sat (FonteUEB::parameters)</li> </ul>"},{"location":"CEQUEAU/class_members/#l","title":"l","text":"<ul> <li>listeCpBarrage_ (BassinVersant)</li> <li>latitude (CarreauEntier, CarreauPartiel, Qualite::spa_data)</li> <li>latitude_ (CarreauEntier, CarreauPartiel)</li> <li>longitude (CarreauEntier, CarreauPartiel, Qualite::spa_data)</li> <li>longitude_ (CarreauEntier, CarreauPartiel, SolarFunctions)</li> <li>largeurCoursEauPrincipal (CarreauPartiel)</li> <li>largeurCoursEauPrincipal_ (CarreauPartiel)</li> <li>longueurCoursEauPrincipal (CarreauPartiel)</li> <li>longueurCoursEauPrincipal_ (CarreauPartiel)</li> <li>lireParametres (DLI, Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>L_c (FonteUEB::constants)</li> <li>Lc (FonteUEB::parameters)</li> <li>ListeStation (ListeStation)</li> <li>Log (Log)</li> <li>lireParametresHelper (ModuleBase)</li> <li>lameEauDebutRuisellement (ParamCE, ParamSol)</li> <li>lacExutoire (ParamFacultatifs)</li> <li>lacs (ParamFacultatifs)</li> <li>logNeigeAjustee (ParamOption)</li> <li>latitudeMoyenneBV (ParamSol)</li> <li>L_TERMS (PositionSolaire)</li> <li>l_subcount (PositionSolaire)</li> <li>limit_degrees (PositionSolaire)</li> <li>latitute_ (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_members/#m","title":"m","text":"<ul> <li>meanSlope (CarreauEntier)</li> <li>meanSlope_ (CarreauEntier)</li> <li>moduleDLI (DLI, ParamOption)</li> <li>moduleDLI_ (DLI)</li> <li>Mr (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>mu (FonteUEB::constants)</li> <li>melt_frac (FonteUEB::parameters)</li> <li>meteoInterpolee_ (Interpolateur)</li> <li>meteoStations_ (Interpolateur)</li> <li>Meteo (Meteo)</li> <li>meteoAutre (Meteo)</li> <li>meteoAutre_ (Meteo)</li> <li>meteoEvapo (Meteo)</li> <li>meteoEvapo_ (Meteo)</li> <li>meteoFonte (Meteo)</li> <li>meteoFonte_ (Meteo)</li> <li>ModuleBase (ModuleBase)</li> <li>moduleEvapo (ParamOption)</li> <li>moduleFonte (ParamOption)</li> <li>moduleOmbrage (ParamOption)</li> <li>modulePompage (ParamOption)</li> <li>mean_anomaly_moon (PositionSolaire)</li> <li>mean_anomaly_sun (PositionSolaire)</li> <li>mean_elongation_moon_sun (PositionSolaire)</li> <li>moyAnPrecipitation (Station)</li> <li>moyAnPrecipitation_ (Station)</li> </ul>"},{"location":"CEQUEAU/class_members/#n","title":"n","text":"<ul> <li>nbBarrages (BassinVersant)</li> <li>nbCarreauxEntiers (BassinVersant, DonneesMeteo)</li> <li>nbCarreauxEntiers_ (BassinVersant, DonneesMeteo)</li> <li>nbCarreauxPartiels (BassinVersant)</li> <li>nbCarreauxPartielsCheminLong (BassinVersant)</li> <li>nbCarreauxPartielsCheminLong_ (BassinVersant)</li> <li>nbCarreauxPartiels_ (BassinVersant)</li> <li>nomBassinVersant (BassinVersant)</li> <li>nomBassinVersant_ (BassinVersant)</li> <li>nbPasDeTemps (DonneesMeteo)</li> <li>nbPasDeTemps_ (DonneesMeteo)</li> <li>niveau (EtatBarrage, EtatBarrageAssim)</li> <li>niveauType (EtatBarrageAssim)</li> <li>niveauEauLacsMarais (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>niveauEauNappe (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>niveauEauSol (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>niveauEauLacsMaraisType (EtatCarreauEntierAssim)</li> <li>niveauEauNappeType (EtatCarreauEntierAssim)</li> <li>niveauEauSolType (EtatCarreauEntierAssim)</li> <li>nomChamps_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>nu (FonteUEB::constants)</li> <li>nbStation_ (Interpolateur)</li> <li>nomsAutresMeteo_ (Interpolateur)</li> <li>neige (Meteo)</li> <li>neige_ (Meteo)</li> <li>nbCE_ (ModuleBase)</li> <li>nomModele (ModuleBase)</li> <li>nomModele_ (ModuleBase)</li> <li>nomsChampsMeteo (ModuleBase)</li> <li>nomsChampsMeteo_ (ModuleBase)</li> <li>niveauInitialLacsMarais (ParamSolInitial)</li> <li>niveauInitialNappe (ParamSolInitial)</li> <li>niveauInitialSol (ParamSolInitial)</li> <li>nbJoursSimulation (Parametres)</li> <li>nbPasParJourSimulation (Parametres)</li> <li>nbPasSimulation (Parametres)</li> <li>nutation_longitude_and_obliquity (PositionSolaire)</li> <li>niveauInitial (Puits)</li> <li>niveauxPuits (Puits)</li> <li>no (ReleveNeige)</li> <li>no_ (Station)</li> <li>nom_ (Station)</li> </ul>"},{"location":"CEQUEAU/class_members/#o","title":"o","text":"<ul> <li>operator!= (DateChrono)</li> <li>operator+ (DateChrono)</li> <li>operator+= (DateChrono)</li> <li>operator- (DateChrono)</li> <li>operator&lt; (DateChrono)</li> <li>operator&lt;= (DateChrono)</li> <li>operator== (DateChrono)</li> <li>operator&gt; (DateChrono)</li> <li>operator&gt;= (DateChrono)</li> <li>obtenirEtats (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>obtenirEtatsAvantAssimilations (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation, SimulationQualite)</li> <li>obtenirMeteoInterpolee (Interpolateur)</li> <li>obtenirNombreAutreMeteo (Interpolateur)</li> <li>operator= (Log)</li> <li>os (Log)</li> <li>obtenirEtatsAvantAssimHelper (ModuleBase)</li> <li>obtenirEtatsHelper (ModuleBase)</li> <li>Output (Output2FILE)</li> <li>option (Parametres)</li> <li>option_ (Parametres)</li> <li>observer_hour_angle (PositionSolaire)</li> <li>obtenirEtatsBarrage (Simulation)</li> <li>obtenirEtatsCE (Simulation)</li> <li>obtenirEtatsCP (Simulation, SimulationQualite)</li> <li>obtenirPasDeTemps (Simulation)</li> <li>operator() (TrieurCEGrille, TrieurMeteoId)</li> </ul>"},{"location":"CEQUEAU/class_members/#p","title":"p","text":"<ul> <li>paramDebitEvacuationExt_ (Barrage)</li> <li>paramDebitEvacuationInt_ (Barrage)</li> <li>paramDebit_ (Barrage)</li> <li>paramNiveau_ (Barrage)</li> <li>paramVolume_ (Barrage)</li> <li>possedeBarrage (BassinVersant)</li> <li>puits (BassinVersant)</li> <li>puitsParIdCE (BassinVersant)</li> <li>puits_ (BassinVersant)</li> <li>param (CarreauEntier)</li> <li>param_ (CarreauEntier)</li> <li>pctEau (CarreauEntier, CarreauPartiel)</li> <li>pctForet (CarreauEntier, CarreauPartiel)</li> <li>pctForet_ (CarreauEntier, CarreauPartiel)</li> <li>pctLacExutoire (CarreauEntier)</li> <li>pctLacExutoire_ (CarreauEntier)</li> <li>pctLacRiviere (CarreauEntier)</li> <li>pctLacRiviere_ (CarreauEntier)</li> <li>pctMarais (CarreauEntier, CarreauPartiel)</li> <li>pctMarais_ (CarreauEntier, CarreauPartiel)</li> <li>pctSol (CarreauEntier)</li> <li>pctConifer (CarreauPartiel)</li> <li>pctConifer_ (CarreauPartiel)</li> <li>pctEau_ (CarreauPartiel)</li> <li>pctFermetureFutaie (CarreauPartiel)</li> <li>pctFermetureFutaie_ (CarreauPartiel)</li> <li>pctFeuillu (CarreauPartiel)</li> <li>pctFeuillu_ (CarreauPartiel)</li> <li>pctSolNu (CarreauPartiel)</li> <li>pctSolNu_ (CarreauPartiel)</li> <li>pctSurface (CarreauPartiel)</li> <li>pctSurface_ (CarreauPartiel)</li> <li>penteRiviere (CarreauPartiel)</li> <li>penteRiviere_ (CarreauPartiel)</li> <li>profondeurMinimum (CarreauPartiel)</li> <li>profondeurMinimum_ (CarreauPartiel)</li> <li>params_ (DLI, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>PPTTOT (EtatCarreauEntier::Qualite)</li> <li>production (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>productionType (EtatCarreauEntierAssim)</li> <li>preserverEtatsPasDeTemps (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>pasParJour_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>paramALPHA (EvapoMorton::Params, EvapoPenmanMont::Params, EvapoPriestleyTaylor::Params)</li> <li>PREDICORR (FonteUEB)</li> <li>PREHELP (FonteUEB)</li> <li>paramDebit (InfoEvacuationExt)</li> <li>paramInterpolation_ (Interpolateur)</li> <li>parametres_ (Interpolateur, Simulation)</li> <li>pluie (Meteo)</li> <li>pluie_ (Meteo)</li> <li>ParamCE (ParamCE)</li> <li>panap (ParamTemperature)</li> <li>paramCalculCoeffTransfertCP (ParamTransfert)</li> <li>Parametres (Parametres)</li> <li>pompage (Parametres)</li> <li>pompage_ (Parametres)</li> <li>ParametresInterpolation (ParametresInterpolation)</li> <li>ParametresQualite (ParametresQualite)</li> <li>PE_TERMS (PositionSolaire)</li> <li>PI (PositionSolaire)</li> <li>PositionSolaire (PositionSolaire)</li> <li>Puits (Puits)</li> <li>pasDeTemps (Qualite::spa_data)</li> <li>parametresQualite_ (SimulationQualite)</li> <li>pasTemp_ (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_members/#q","title":"q","text":"<ul> <li>Qualite (EtatCarreauEntier, EtatCarreauPartiel)</li> <li>QNUI3_indexMurissementNeige (FonteCequeau::EtatFonteCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>QNUI4_indexTempNeige (FonteCequeau::EtatFonteCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>QNUI3_indexMurissementNeigeType (FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>QNUI4_indexTempNeigeType (FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>Q (FonteUEB::EtatFonteCE)</li> <li>Qe (FonteUEB::EtatFonteCE)</li> <li>Qh (FonteUEB::EtatFonteCE)</li> <li>Qm (FonteUEB::EtatFonteCE)</li> <li>QFM (FonteUEB)</li> <li>QPF (FonteUEB)</li> <li>quantiteStations (ListeStation)</li> <li>qconv (Qualite::EtatCarreauPartiel)</li> <li>qevap (Qualite::EtatCarreauPartiel)</li> <li>qhypo (Qualite::EtatCarreauPartiel)</li> <li>qlacma (Qualite::EtatCarreauPartiel)</li> <li>qnappe (Qualite::EtatCarreauPartiel)</li> <li>qradin (Qualite::EtatCarreauPartiel)</li> <li>qradso (Qualite::EtatCarreauPartiel)</li> <li>qruiss (Qualite::EtatCarreauPartiel)</li> <li>qualite_ (SimulationQualite)</li> </ul>"},{"location":"CEQUEAU/class_members/#r","title":"r","text":"<ul> <li>resoudreGoodrich (Barrage)</li> <li>RUISST (EtatCarreauEntier::Qualite)</li> <li>recharge (EtatCarreauEntier)</li> <li>RKINST (FonteUEB)</li> <li>Ra_g (FonteUEB::constants)</li> <li>rho_g (FonteUEB::constants, FonteUEB::parameters)</li> <li>rho_i (FonteUEB::constants)</li> <li>rho_s (FonteUEB::constants, FonteUEB::parameters)</li> <li>rho_w (FonteUEB::constants)</li> <li>ReportingLevel (Log)</li> <li>relevesNeige (ParamFacultatifs)</li> <li>resultatsIdCE (Parametres)</li> <li>resultatsIdCE_ (Parametres)</li> <li>resultatsIdCP (Parametres)</li> <li>resultatsIdCP_ (Parametres)</li> <li>R_TERMS (PositionSolaire)</li> <li>r_subcount (PositionSolaire)</li> <li>rad2deg (PositionSolaire, SolarFunctions)</li> <li>right_ascension_parallax_and_topocentric_dec (PositionSolaire)</li> <li>rayonP (Puits)</li> <li>repertoireOut_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_members/#s","title":"s","text":"<ul> <li>superficieCarreauEntier (BassinVersant)</li> <li>superficieCarreauEntier_ (BassinVersant)</li> <li>superficieCPAmontCorrige (CarreauPartiel)</li> <li>superficieCPAmontCorrige_ (CarreauPartiel)</li> <li>superficieCPAmont_ (CarreauPartiel)</li> <li>stations (DonneesInterpolation, ListeStation)</li> <li>SLAMAT (EtatCarreauEntier::Qualite)</li> <li>SOLT (EtatCarreauEntier::Qualite)</li> <li>SONAPT (EtatCarreauEntier::Qualite)</li> <li>stateEauLibre (EvapoCequeau::EtatEvapoCE, EvapoPriestleyTaylor::EtatEvapoCE)</li> <li>stateNappe (EvapoCequeau::EtatEvapoCE, EvapoPriestleyTaylor::EtatEvapoCE)</li> <li>statePot (EvapoCequeau::EtatEvapoCE, EvapoPriestleyTaylor::EtatEvapoCE)</li> <li>stateSol (EvapoCequeau::EtatEvapoCE, EvapoPriestleyTaylor::EtatEvapoCE)</li> <li>SNC_stockNeigeForet (FonteCemaNeige::EtatFonteCE, FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteCE, FonteUEB::EtatFonteAssimCE)</li> <li>SND_stockNeigeClairiere (FonteCemaNeige::EtatFonteCE, FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteCE, FonteUEB::EtatFonteAssimCE)</li> <li>split_precip_cequeau (FonteCemaNeige, FonteUEB)</li> <li>SNC_stockNeigeForetType (FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>SND_stockNeigeClairiereType (FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>seuilTranformationPluieNeige (FonteCemaNeige::Params, FonteCequeau::Params, FonteUEB::parameters, ParamCE)</li> <li>seuilTempFonteClairiere (FonteCequeau::Params, ParamCE)</li> <li>seuilTempFonteForet (FonteCequeau::Params, ParamCE)</li> <li>SNOTMP (FonteUEB)</li> <li>SRFTMP (FonteUEB)</li> <li>SRFTMPO (FonteUEB)</li> <li>surfeb (FonteUEB)</li> <li>svp (FonteUEB)</li> <li>svpi (FonteUEB)</li> <li>svpw (FonteUEB)</li> <li>stefanBoltzman (FonteUEB::constants)</li> <li>snow_temp_method (FonteUEB::parameters)</li> <li>stations_ (Interpolateur, ListeStation)</li> <li>Stream (Output2FILE)</li> <li>seuilInfiltrationSolVersNappe (ParamCE, ParamSol)</li> <li>seuilPrelevementEauTauxPotentiel (ParamCE, ParamSol)</li> <li>seuilVidangeHauteNappe (ParamCE, ParamSol)</li> <li>seuilVidangeIntermediaireSol (ParamCE, ParamSol)</li> <li>superficieCPAmontCorriges (ParamFacultatifs)</li> <li>surfacesImper (ParamFacultatifs)</li> <li>seuilVidangeLacsMarais (ParamSol)</li> <li>sol (Parametres)</li> <li>solInitial (Parametres)</li> <li>solInitial_ (Parametres)</li> <li>sol_ (Parametres)</li> <li>sun_equatorial_horizontal_parallax (PositionSolaire)</li> <li>Simulation (Simulation)</li> <li>SimulationQualite (SimulationQualite)</li> <li>simulation_ (SimulationQualite)</li> <li>SolarFunctions (SolarFunctions)</li> <li>sunpos_1950 (SolarFunctions)</li> <li>sunpos_2010 (SolarFunctions)</li> <li>Station (Station)</li> </ul>"},{"location":"CEQUEAU/class_members/#t","title":"t","text":"<ul> <li>trouverParamDebitExt (Barrage)</li> <li>typeBarrage (Barrage)</li> <li>typeBarrage_ (Barrage)</li> <li>trouverBarrageParIdCP (BassinVersant)</li> <li>trouverBarrageParIdCpAval (BassinVersant)</li> <li>trouverCarreauEntierParId (BassinVersant)</li> <li>timePoint (DateChrono)</li> <li>toMatlabDatenum (DateChrono)</li> <li>trierParId (DonneesMeteo)</li> <li>Tf (FonteCemaNeige::Params)</li> <li>theta (FonteCemaNeige::Params)</li> <li>tauxPotentielFonteClairiere (FonteCequeau::Params, ParamCE)</li> <li>tauxPotentielFonteForet (FonteCequeau::Params, ParamCE)</li> <li>tempMurissementNeige (FonteCequeau::Params, ParamCE)</li> <li>tausn (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>tave (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>tsurf (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>TAVG (FonteUEB)</li> <li>TURBFLUX (FonteUEB)</li> <li>t0 (FonteUEB::constants)</li> <li>tf (FonteUEB::constants)</li> <li>tk (FonteUEB::constants)</li> <li>T0 (FonteUEB::parameters)</li> <li>Tk (FonteUEB::parameters)</li> <li>trouverStationPlusPres (Interpolateur)</li> <li>trouverStation (ListeStation)</li> <li>ToString (Log)</li> <li>tMax (Meteo)</li> <li>tMax_ (Meteo)</li> <li>tMin (Meteo)</li> <li>tMin_ (Meteo)</li> <li>typeAjustementNeige (ParamFacultatifs)</li> <li>tinit (ParamTemperature)</li> <li>tnap (ParamTemperature)</li> <li>tempsConcentrationBV (ParamTransfert)</li> <li>transfert (Parametres)</li> <li>transfert_ (Parametres)</li> <li>type (ParametresInterpolation)</li> <li>type_ (ParametresInterpolation)</li> <li>temperature (ParametresQualite, Qualite::EtatCarreauPartiel, Qualite::EtatCarreauPartielAssim)</li> <li>temperature_ (ParametresQualite)</li> <li>third_order_polynomial (PositionSolaire)</li> <li>topocentric_azimuth_angle (PositionSolaire)</li> <li>topocentric_azimuth_angle_astro (PositionSolaire)</li> <li>topocentric_elevation_angle (PositionSolaire)</li> <li>topocentric_local_hour_angle (PositionSolaire)</li> <li>topocentric_right_ascension (PositionSolaire)</li> <li>topocentric_zenith_angle (PositionSolaire)</li> <li>temperatureType (Qualite::EtatCarreauPartielAssim)</li> <li>traiterParamFacultatifs (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_members/#u","title":"u","text":"<ul> <li>u (DLI::Params)</li> <li>ub (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>udtLocation_ (SolarFunctions)</li> <li>udtSunCoordinates_ (SolarFunctions)</li> <li>udtTime_ (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_members/#v","title":"v","text":"<ul> <li>volume (Barrage, EtatBarrage, EtatBarrageAssim, EtatCarreauPartiel, EtatCarreauPartielAssim)</li> <li>volume_ (Barrage)</li> <li>volumeInitial (CarreauPartiel)</li> <li>volumeInitial_ (CarreauPartiel)</li> <li>v (DLI::Params)</li> <li>valeurs (DonneesMeteo)</li> <li>valeurs_ (DonneesMeteo)</li> <li>validerDonneesMeteo (DonneesMeteo)</li> <li>volumeType (EtatBarrageAssim, EtatCarreauPartielAssim)</li> <li>volumeSortant (EtatCarreauPartiel::Qualite)</li> <li>Vmin (FonteCemaNeige::Params)</li> <li>validerParametreSpatial (ModuleBase)</li> <li>validerNombreValeurs (Parametres)</li> <li>valeur (ReleveNeige, ValeurZone)</li> </ul>"},{"location":"CEQUEAU/class_members/#w","title":"w","text":"<ul> <li>w (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>Wcoeff (FonteUEB::parameters)</li> </ul>"},{"location":"CEQUEAU/class_members/#x","title":"x","text":"<ul> <li>xy_term_summation (PositionSolaire)</li> </ul>"},{"location":"CEQUEAU/class_members/#y","title":"y","text":"<ul> <li>Y_TERMS (PositionSolaire)</li> </ul>"},{"location":"CEQUEAU/class_members/#z","title":"z","text":"<ul> <li>Zmed (FonteCemaNeige::Params)</li> <li>zenitAngle_ (FonteUEB)</li> <li>z (FonteUEB::constants, FonteUEB::parameters)</li> <li>z0 (FonteUEB::parameters)</li> <li>zenithAngle_ (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_members/#_1","title":"~","text":"<ul> <li>~Barrage (Barrage)</li> <li>~BassinVersant (BassinVersant)</li> <li>~CarreauEntier (CarreauEntier)</li> <li>~CarreauPartiel (CarreauPartiel)</li> <li>~DonneesMeteo (DonneesMeteo)</li> <li>~Evapo (Evapo)</li> <li>~EvapoCequeau (EvapoCequeau)</li> <li>~EvapoKPenman (EvapoKPenman)</li> <li>~EvapoMcGuinness (EvapoMcGuinness)</li> <li>~EvapoMorton (EvapoMorton)</li> <li>~EvapoPenmanMont (EvapoPenmanMont)</li> <li>~EvapoPriestleyTaylor (EvapoPriestleyTaylor)</li> <li>~EvapoTemplate (EvapoTemplate)</li> <li>~Fonte (Fonte)</li> <li>~FonteCemaNeige (FonteCemaNeige)</li> <li>~FonteCequeau (FonteCequeau)</li> <li>~FonteTemplate (FonteTemplate)</li> <li>~FonteUEB (FonteUEB)</li> <li>~Interpolateur (Interpolateur)</li> <li>~InterpolateurPolygoneThiessen (InterpolateurPolygoneThiessen)</li> <li>~InterpolateurPonderationStations (InterpolateurPonderationStations)</li> <li>~ListeStation (ListeStation)</li> <li>~Log (Log)</li> <li>~Meteo (Meteo)</li> <li>~ModuleBase (ModuleBase)</li> <li>~Parametres (Parametres)</li> <li>~ParametresInterpolation (ParametresInterpolation)</li> <li>~ParametresQualite (ParametresQualite)</li> <li>~PositionSolaire (PositionSolaire)</li> <li>~Simulation (Simulation)</li> <li>~SimulationQualite (SimulationQualite)</li> <li>~SolarFunctions (SolarFunctions)</li> <li>~Station (Station)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/","title":"Class Member Functions","text":""},{"location":"CEQUEAU/class_member_functions/#a","title":"a","text":"<ul> <li>altitude (CarreauEntier, Station)</li> <li>altitudeMoyenne (CarreauPartiel)</li> <li>azimutCoursEau (CarreauPartiel)</li> <li>assimiler (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation, SimulationQualite)</li> <li>AGESN (FonteUEB)</li> <li>albedo (FonteUEB)</li> <li>aberration_correction (PositionSolaire)</li> <li>anomalie_moyenne_du_soleil (PositionSolaire)</li> <li>apparent_sun_longitude (PositionSolaire)</li> <li>argument_latitude_moon (PositionSolaire)</li> <li>ascending_longitude_moon (PositionSolaire)</li> <li>ajusterNeige3Releves (Simulation)</li> <li>ajusterNeigeZone (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#b","title":"b","text":"<ul> <li>Barrage (Barrage)</li> <li>BassinVersant (BassinVersant)</li> <li>barrages (BassinVersant)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#c","title":"c","text":"<ul> <li>calculerDebitAvecVolume (Barrage)</li> <li>calculerDebitEvacue (Barrage)</li> <li>calculerNiveauAvecVolume (Barrage)</li> <li>calculerVolumeCpAval (Barrage)</li> <li>calculerVolumeEvacue (Barrage)</li> <li>carreauxEntiers (BassinVersant)</li> <li>carreauxPartiels (BassinVersant)</li> <li>CarreauEntier (CarreauEntier)</li> <li>calculerCoeffPonderation (CarreauEntier)</li> <li>CarreauPartiel (CarreauPartiel)</li> <li>calculerCorrectionDebit (CarreauPartiel)</li> <li>codeCarreauPartiel (CarreauPartiel)</li> <li>coeffTransfert (CarreauPartiel)</li> <li>cumulPctSuperficieCPAmont (CarreauPartiel)</li> <li>cumulPctSuperficieForetAmont (CarreauPartiel)</li> <li>cumulPctSuperficieLacsAmont (CarreauPartiel)</li> <li>cumulPctSuperficieMaraisAmont (CarreauPartiel)</li> <li>custom_1 (CarreauPartiel)</li> <li>custom_2 (CarreauPartiel)</li> <li>calculeM1 (DLI)</li> <li>calculeM2 (DLI)</li> <li>calculeM3 (DLI)</li> <li>calculeM4 (DLI)</li> <li>calculeM5 (DLI)</li> <li>calculeM6 (DLI)</li> <li>calculeM7 (DLI)</li> <li>calculeM8 (DLI)</li> <li>calculeM9 (DLI)</li> <li>calculeRadiation (DLI)</li> <li>calculerAltitudeMoyStation (DonneesInterpolation)</li> <li>calculerSommePrecipitaionStation (DonneesInterpolation)</li> <li>calculerEvapo (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>calculerEthorn (EvapoCequeau)</li> <li>calculerFacteurModulationSoleil (EvapoCequeau, FonteCequeau)</li> <li>calculerKPenman (EvapoKPenman)</li> <li>calculerPsychometricConstant (EvapoKPenman, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor)</li> <li>calculerSlopeSatVapPressure (EvapoKPenman, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor)</li> <li>calculerMcGuinness (EvapoMcGuinness)</li> <li>calculerMorton (EvapoMorton)</li> <li>calculerPenmanMont (EvapoPenmanMont)</li> <li>calculerFonctionVent (EvapoPriestleyTaylor)</li> <li>calculerPriestleyTaylor (EvapoPriestleyTaylor)</li> <li>calculerFonte (Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation)</li> <li>calculerCorrections (Interpolateur, InterpolateurPolygoneThiessen, InterpolateurPonderationStations)</li> <li>calculerTempMoy (Meteo)</li> <li>coep (ParametresInterpolation)</li> <li>coet (ParametresInterpolation)</li> <li>colarg (ParametresQualite)</li> <li>coprom (ParametresQualite)</li> <li>calcul_altitude_et_azimut_du_soleil (PositionSolaire)</li> <li>calculerBilanReservoirs (Simulation)</li> <li>calculerIndexMeteo (Simulation)</li> <li>calculerIndexPompage (Simulation)</li> <li>calculerTemperatureEau (Simulation, SimulationQualite)</li> <li>chargerEtatsBarrages (Simulation)</li> <li>chargerEtatsCE (Simulation)</li> <li>chargerEtatsCP (Simulation, SimulationQualite)</li> <li>convertirMetreCubeEnHauteur (Simulation)</li> <li>calculerCanopeLAI (SimulationQualite)</li> <li>calculerCanopeTypeArbre (SimulationQualite)</li> <li>calculerIndexPasDeTemps (SimulationQualite)</li> <li>calculerRatioOmbre (SimulationQualite)</li> <li>computeZenithAngle (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#d","title":"d","text":"<ul> <li>debitsMesures (Barrage)</li> <li>DLI (DLI)</li> <li>DateChrono (DateChrono)</li> <li>display (DateChrono)</li> <li>DonneesMeteo (DonneesMeteo)</li> <li>Delta (FonteUEB)</li> <li>dateDebut (Parametres)</li> <li>dateFin (Parametres)</li> <li>dureeHeuresPasSimulation (Parametres)</li> <li>deg2rad (PositionSolaire, SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#e","title":"e","text":"<ul> <li>estPtot (DonneesMeteo)</li> <li>Evapo (Evapo)</li> <li>EvapoCequeau (EvapoCequeau)</li> <li>etatsEvapo (EvapoCequeau, EvapoPriestleyTaylor)</li> <li>EvapoKPenman (EvapoKPenman)</li> <li>EvapoMcGuinness (EvapoMcGuinness)</li> <li>EvapoMorton (EvapoMorton)</li> <li>EvapoPenmanMont (EvapoPenmanMont)</li> <li>EvapoPriestleyTaylor (EvapoPriestleyTaylor)</li> <li>EvapoTemplate (EvapoTemplate)</li> <li>etatsFonte (FonteCemaNeige, FonteCequeau, FonteUEB)</li> <li>executer (Interpolateur, InterpolateurPolygoneThiessen, InterpolateurPonderationStations, Simulation, SimulationQualite)</li> <li>earth_heliocentric_latitude (PositionSolaire)</li> <li>earth_heliocentric_longitude (PositionSolaire)</li> <li>earth_periodic_term_summation (PositionSolaire)</li> <li>earth_radius_vector (PositionSolaire)</li> <li>earth_values (PositionSolaire)</li> <li>ecliptic_mean_obliquity (PositionSolaire)</li> <li>ecliptic_true_obliquity (PositionSolaire)</li> <li>EtatCarreauPartiel (Qualite::EtatCarreauPartiel)</li> <li>ecrireResultats (Simulation)</li> <li>executerProduction (Simulation)</li> <li>executerTransfert (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#f","title":"f","text":"<ul> <li>fromMatlabDatenum (DateChrono)</li> <li>Fonte (Fonte)</li> <li>FonteCemaNeige (FonteCemaNeige)</li> <li>FonteCequeau (FonteCequeau)</li> <li>FonteTemplate (FonteTemplate)</li> <li>FMELT (FonteUEB)</li> <li>FonteUEB (FonteUEB)</li> <li>FromString (Log)</li> <li>facultatifs (Parametres)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#g","title":"g","text":"<ul> <li>getDay (DateChrono)</li> <li>getDayNumber (DateChrono)</li> <li>getDayOfYear (DateChrono)</li> <li>getJulianDay (DateChrono)</li> <li>getMonth (DateChrono)</li> <li>getTimePoint (DateChrono)</li> <li>getYear (DateChrono)</li> <li>Get (Log)</li> <li>geocentric_declination (PositionSolaire)</li> <li>geocentric_right_ascension (PositionSolaire)</li> <li>greenwich_mean_sidereal_time (PositionSolaire)</li> <li>greenwich_sidereal_time (PositionSolaire)</li> <li>getActive (Puits)</li> <li>getDebitPompage (Puits)</li> <li>getDebitPompageParIndex (Puits)</li> <li>getDistanceRiviere (Puits)</li> <li>getIdCE (Puits)</li> <li>getNiveauInitial (Puits)</li> <li>getNiveauPuitsParIndex (Puits)</li> <li>getNiveauxPuits (Puits)</li> <li>getRayonP (Puits)</li> <li>getZenithAngle (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#h","title":"h","text":"<ul> <li>hautMoyenneArbre (CarreauPartiel)</li> <li>hasNeigeAjustee (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#i","title":"i","text":"<ul> <li>idCP (Barrage)</li> <li>idCPAval (Barrage)</li> <li>initialiser (BassinVersant, DLI, DonneesMeteo, ListeStation, Parametres, ParametresInterpolation, ParametresQualite)</li> <li>initialiserBarrage (BassinVersant)</li> <li>initialiserCarreauxEntiers (BassinVersant)</li> <li>initialiserCarreauxPartiels (BassinVersant)</li> <li>initialiserFichier (BassinVersant, DonneesMeteo, Parametres)</li> <li>i (CarreauEntier, Station)</li> <li>id (CarreauEntier, CarreauPartiel, Station)</li> <li>iCarreauEntier (CarreauPartiel)</li> <li>idCarreauEntier (CarreauPartiel, Meteo)</li> <li>idCarreauPartielAval (CarreauPartiel)</li> <li>idCarreauxPartielsAmont (CarreauPartiel)</li> <li>indiceFoliaire (CarreauPartiel)</li> <li>initialiserAssimilations (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation, SimulationQualite)</li> <li>initialiserEtats (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation, SimulationQualite)</li> <li>Interpolateur (Interpolateur)</li> <li>initialiserListeCE (Interpolateur)</li> <li>interpoler (Interpolateur, InterpolateurPolygoneThiessen, InterpolateurPonderationStations)</li> <li>InterpolateurPolygoneThiessen (InterpolateurPolygoneThiessen)</li> <li>InterpolateurPonderationStations (InterpolateurPonderationStations)</li> <li>initialiserEtatsHelper (ModuleBase)</li> <li>initialiserOmbrage (ParametresQualite)</li> <li>initialiserCoeffTransfertCP (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#j","title":"j","text":"<ul> <li>j (CarreauEntier, Station)</li> <li>jCarreauEntier (CarreauPartiel)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#l","title":"l","text":"<ul> <li>latitude (CarreauEntier, CarreauPartiel)</li> <li>longitude (CarreauEntier, CarreauPartiel)</li> <li>largeurCoursEauPrincipal (CarreauPartiel)</li> <li>longueurCoursEauPrincipal (CarreauPartiel)</li> <li>lireParametres (DLI, Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>ListeStation (ListeStation)</li> <li>Log (Log)</li> <li>lireParametresHelper (ModuleBase)</li> <li>limit_degrees (PositionSolaire)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#m","title":"m","text":"<ul> <li>meanSlope (CarreauEntier)</li> <li>moduleDLI (DLI)</li> <li>Meteo (Meteo)</li> <li>meteoAutre (Meteo)</li> <li>meteoEvapo (Meteo)</li> <li>meteoFonte (Meteo)</li> <li>ModuleBase (ModuleBase)</li> <li>mean_anomaly_moon (PositionSolaire)</li> <li>mean_anomaly_sun (PositionSolaire)</li> <li>mean_elongation_moon_sun (PositionSolaire)</li> <li>moyAnPrecipitation (Station)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#n","title":"n","text":"<ul> <li>nbBarrages (BassinVersant)</li> <li>nbCarreauxEntiers (BassinVersant, DonneesMeteo)</li> <li>nbCarreauxPartiels (BassinVersant)</li> <li>nbCarreauxPartielsCheminLong (BassinVersant)</li> <li>nomBassinVersant (BassinVersant)</li> <li>nbPasDeTemps (DonneesMeteo)</li> <li>neige (Meteo)</li> <li>nomModele (ModuleBase)</li> <li>nomsChampsMeteo (ModuleBase)</li> <li>nbJoursSimulation (Parametres)</li> <li>nbPasParJourSimulation (Parametres)</li> <li>nbPasSimulation (Parametres)</li> <li>nutation_longitude_and_obliquity (PositionSolaire)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#o","title":"o","text":"<ul> <li>operator!= (DateChrono)</li> <li>operator+ (DateChrono)</li> <li>operator+= (DateChrono)</li> <li>operator- (DateChrono)</li> <li>operator&lt; (DateChrono)</li> <li>operator&lt;= (DateChrono)</li> <li>operator== (DateChrono)</li> <li>operator&gt; (DateChrono)</li> <li>operator&gt;= (DateChrono)</li> <li>obtenirEtats (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>obtenirEtatsAvantAssimilations (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation, SimulationQualite)</li> <li>obtenirMeteoInterpolee (Interpolateur)</li> <li>obtenirNombreAutreMeteo (Interpolateur)</li> <li>operator= (Log)</li> <li>obtenirEtatsAvantAssimHelper (ModuleBase)</li> <li>obtenirEtatsHelper (ModuleBase)</li> <li>Output (Output2FILE)</li> <li>option (Parametres)</li> <li>observer_hour_angle (PositionSolaire)</li> <li>obtenirEtatsBarrage (Simulation)</li> <li>obtenirEtatsCE (Simulation)</li> <li>obtenirEtatsCP (Simulation, SimulationQualite)</li> <li>obtenirPasDeTemps (Simulation)</li> <li>operator() (TrieurCEGrille, TrieurMeteoId)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#p","title":"p","text":"<ul> <li>possedeBarrage (BassinVersant)</li> <li>puits (BassinVersant)</li> <li>puitsParIdCE (BassinVersant)</li> <li>param (CarreauEntier)</li> <li>pctEau (CarreauEntier, CarreauPartiel)</li> <li>pctForet (CarreauEntier, CarreauPartiel)</li> <li>pctLacExutoire (CarreauEntier)</li> <li>pctLacRiviere (CarreauEntier)</li> <li>pctMarais (CarreauEntier, CarreauPartiel)</li> <li>pctSol (CarreauEntier)</li> <li>pctConifer (CarreauPartiel)</li> <li>pctFermetureFutaie (CarreauPartiel)</li> <li>pctFeuillu (CarreauPartiel)</li> <li>pctSolNu (CarreauPartiel)</li> <li>pctSurface (CarreauPartiel)</li> <li>penteRiviere (CarreauPartiel)</li> <li>profondeurMinimum (CarreauPartiel)</li> <li>preserverEtatsPasDeTemps (Evapo, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, Fonte, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>PREDICORR (FonteUEB)</li> <li>PREHELP (FonteUEB)</li> <li>pluie (Meteo)</li> <li>ParamCE (ParamCE)</li> <li>Parametres (Parametres)</li> <li>pompage (Parametres)</li> <li>ParametresInterpolation (ParametresInterpolation)</li> <li>ParametresQualite (ParametresQualite)</li> <li>PositionSolaire (PositionSolaire)</li> <li>Puits (Puits)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#q","title":"q","text":"<ul> <li>QFM (FonteUEB)</li> <li>QPF (FonteUEB)</li> <li>quantiteStations (ListeStation)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#r","title":"r","text":"<ul> <li>resoudreGoodrich (Barrage)</li> <li>RKINST (FonteUEB)</li> <li>ReportingLevel (Log)</li> <li>resultatsIdCE (Parametres)</li> <li>resultatsIdCP (Parametres)</li> <li>rad2deg (PositionSolaire, SolarFunctions)</li> <li>right_ascension_parallax_and_topocentric_dec (PositionSolaire)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#s","title":"s","text":"<ul> <li>superficieCarreauEntier (BassinVersant)</li> <li>superficieCPAmontCorrige (CarreauPartiel)</li> <li>split_precip_cequeau (FonteCemaNeige, FonteUEB)</li> <li>SNOTMP (FonteUEB)</li> <li>SRFTMP (FonteUEB)</li> <li>SRFTMPO (FonteUEB)</li> <li>surfeb (FonteUEB)</li> <li>svp (FonteUEB)</li> <li>svpi (FonteUEB)</li> <li>svpw (FonteUEB)</li> <li>stations (ListeStation)</li> <li>Stream (Output2FILE)</li> <li>sol (Parametres)</li> <li>solInitial (Parametres)</li> <li>sun_equatorial_horizontal_parallax (PositionSolaire)</li> <li>Simulation (Simulation)</li> <li>SimulationQualite (SimulationQualite)</li> <li>SolarFunctions (SolarFunctions)</li> <li>sunpos_1950 (SolarFunctions)</li> <li>sunpos_2010 (SolarFunctions)</li> <li>Station (Station)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#t","title":"t","text":"<ul> <li>trouverParamDebitExt (Barrage)</li> <li>typeBarrage (Barrage)</li> <li>trouverBarrageParIdCP (BassinVersant)</li> <li>trouverBarrageParIdCpAval (BassinVersant)</li> <li>trouverCarreauEntierParId (BassinVersant)</li> <li>toMatlabDatenum (DateChrono)</li> <li>trierParId (DonneesMeteo)</li> <li>TAVG (FonteUEB)</li> <li>TURBFLUX (FonteUEB)</li> <li>trouverStationPlusPres (Interpolateur)</li> <li>trouverStation (ListeStation)</li> <li>ToString (Log)</li> <li>tMax (Meteo)</li> <li>tMin (Meteo)</li> <li>transfert (Parametres)</li> <li>type (ParametresInterpolation)</li> <li>temperature (ParametresQualite)</li> <li>third_order_polynomial (PositionSolaire)</li> <li>topocentric_azimuth_angle (PositionSolaire)</li> <li>topocentric_azimuth_angle_astro (PositionSolaire)</li> <li>topocentric_elevation_angle (PositionSolaire)</li> <li>topocentric_local_hour_angle (PositionSolaire)</li> <li>topocentric_right_ascension (PositionSolaire)</li> <li>topocentric_zenith_angle (PositionSolaire)</li> <li>traiterParamFacultatifs (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#v","title":"v","text":"<ul> <li>volume (Barrage)</li> <li>volumeInitial (CarreauPartiel)</li> <li>valeurs (DonneesMeteo)</li> <li>validerDonneesMeteo (DonneesMeteo)</li> <li>validerParametreSpatial (ModuleBase)</li> <li>validerNombreValeurs (Parametres)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#x","title":"x","text":"<ul> <li>xy_term_summation (PositionSolaire)</li> </ul>"},{"location":"CEQUEAU/class_member_functions/#_1","title":"~","text":"<ul> <li>~Barrage (Barrage)</li> <li>~BassinVersant (BassinVersant)</li> <li>~CarreauEntier (CarreauEntier)</li> <li>~CarreauPartiel (CarreauPartiel)</li> <li>~DonneesMeteo (DonneesMeteo)</li> <li>~Evapo (Evapo)</li> <li>~EvapoCequeau (EvapoCequeau)</li> <li>~EvapoKPenman (EvapoKPenman)</li> <li>~EvapoMcGuinness (EvapoMcGuinness)</li> <li>~EvapoMorton (EvapoMorton)</li> <li>~EvapoPenmanMont (EvapoPenmanMont)</li> <li>~EvapoPriestleyTaylor (EvapoPriestleyTaylor)</li> <li>~EvapoTemplate (EvapoTemplate)</li> <li>~Fonte (Fonte)</li> <li>~FonteCemaNeige (FonteCemaNeige)</li> <li>~FonteCequeau (FonteCequeau)</li> <li>~FonteTemplate (FonteTemplate)</li> <li>~FonteUEB (FonteUEB)</li> <li>~Interpolateur (Interpolateur)</li> <li>~InterpolateurPolygoneThiessen (InterpolateurPolygoneThiessen)</li> <li>~InterpolateurPonderationStations (InterpolateurPonderationStations)</li> <li>~ListeStation (ListeStation)</li> <li>~Log (Log)</li> <li>~Meteo (Meteo)</li> <li>~ModuleBase (ModuleBase)</li> <li>~Parametres (Parametres)</li> <li>~ParametresInterpolation (ParametresInterpolation)</li> <li>~ParametresQualite (ParametresQualite)</li> <li>~PositionSolaire (PositionSolaire)</li> <li>~Simulation (Simulation)</li> <li>~SimulationQualite (SimulationQualite)</li> <li>~SolarFunctions (SolarFunctions)</li> <li>~Station (Station)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/","title":"Class Member Variables","text":""},{"location":"CEQUEAU/class_member_variables/#a","title":"a","text":"<ul> <li>altitude_ (CarreauEntier, Station)</li> <li>altitudeMoyenne_ (CarreauPartiel)</li> <li>azimutCoursEau_ (CarreauPartiel)</li> <li>a (DLI::Params)</li> <li>apport (EtatCarreauPartiel, EtatCarreauPartielAssim)</li> <li>apportType (EtatCarreauPartielAssim)</li> <li>assimilationsCE_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation)</li> <li>avantAssimilationsCE_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB, Simulation)</li> <li>albedo (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>A_bg (FonteUEB::constants)</li> <li>aep (FonteUEB::parameters)</li> <li>airo (FonteUEB::parameters)</li> <li>avo (FonteUEB::parameters)</li> <li>active (Puits)</li> <li>altitude (Qualite::spa_data)</li> <li>azimuth (Qualite::spa_data)</li> <li>assimilationsBarrages_ (Simulation)</li> <li>assimilationsCP_ (Simulation, SimulationQualite)</li> <li>avantAssimilationsBarrages_ (Simulation)</li> <li>avantAssimilationsCP_ (Simulation, SimulationQualite)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#b","title":"b","text":"<ul> <li>barrages_ (BassinVersant, Simulation)</li> <li>b (DLI::Params, FonteUEB::parameters)</li> <li>bassinVersant_ (Interpolateur, Simulation, SimulationQualite)</li> <li>bassol (ParamTemperature)</li> <li>B_TERMS (PositionSolaire)</li> <li>b_subcount (PositionSolaire)</li> <li>bilans_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#c","title":"c","text":"<ul> <li>carreauxEntiers_ (BassinVersant)</li> <li>carreauxPartiels_ (BassinVersant)</li> <li>codeCarreauPartiel_ (CarreauPartiel)</li> <li>coeffTransfert_ (CarreauPartiel)</li> <li>cumulPctSuperficieCPAmont_ (CarreauPartiel)</li> <li>cumulPctSuperficieForetAmont_ (CarreauPartiel)</li> <li>cumulPctSuperficieLacsAmont_ (CarreauPartiel)</li> <li>cumulPctSuperficieMaraisAmont_ (CarreauPartiel)</li> <li>custom_1_ (CarreauPartiel)</li> <li>custom_2_ (CarreauPartiel)</li> <li>c (DLI::Params)</li> <li>CE (DonneesInterpolation)</li> <li>correction (DonneesInterpolation, ReleveNeige)</li> <li>constModulationSoleil_ (EvapoCequeau, FonteCequeau)</li> <li>CTg (FonteCemaNeige::Params)</li> <li>coeffDeficitCalorique (FonteCequeau::Params)</li> <li>const_ (FonteUEB)</li> <li>C_g (FonteUEB::constants)</li> <li>C_p (FonteUEB::constants)</li> <li>C_s (FonteUEB::constants)</li> <li>C_w (FonteUEB::constants)</li> <li>coeffEmmagasinement (ParamCE, ParamPompage)</li> <li>coeffInfiltrationNappe (ParamCE, ParamSol)</li> <li>coeffVidangeBasseNappe (ParamCE, ParamSol)</li> <li>coeffVidangeHauteNappe (ParamCE, ParamSol)</li> <li>coeffVidangeIntermediaireSol (ParamCE, ParamSol)</li> <li>conductiviteHydraulique (ParamCE, ParamPompage)</li> <li>coeffTxParticuliers (ParamFacultatifs)</li> <li>calculQualite (ParamOption)</li> <li>coeffPompage (ParamPompage)</li> <li>coeffCorrectionPluieAnAltitude (ParamSol)</li> <li>coeffVidangeBasseSol (ParamSol)</li> <li>coeffVidangeLacsMarais (ParamSol)</li> <li>correctionTempAltitude (ParamSol)</li> <li>ccanope (ParamTemperature)</li> <li>cconve (ParamTemperature)</li> <li>cevapo (ParamTemperature)</li> <li>corsol (ParamTemperature)</li> <li>crayin (ParamTemperature)</li> <li>crayso (ParamTemperature)</li> <li>crigel (ParamTemperature)</li> <li>coep_ (ParametresInterpolation)</li> <li>coet_ (ParametresInterpolation)</li> <li>colarg_ (ParametresQualite)</li> <li>coprom_ (ParametresQualite)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#d","title":"d","text":"<ul> <li>debitsMesures_ (Barrage)</li> <li>d (DLI::Params)</li> <li>distancesCE (DonneesInterpolation)</li> <li>debitEntrant (EtatBarrage)</li> <li>debitsSortants (EtatBarrage)</li> <li>debit (EtatCarreauPartiel, EtatCarreauPartielAssim)</li> <li>debitType (EtatCarreauPartielAssim)</li> <li>D_e (FonteUEB::constants)</li> <li>D (FonteUEB::parameters)</li> <li>dF (FonteUEB::parameters)</li> <li>de (FonteUEB::parameters)</li> <li>dateDebut (InfoEvacuationExt)</li> <li>dateFin (InfoEvacuationExt)</li> <li>donneesCarreauxTemps_ (Interpolateur)</li> <li>delai (ParamPompage)</li> <li>debitInitialExutoire (ParamSolInitial)</li> <li>dateDebut_ (Parametres)</li> <li>dateFin_ (Parametres)</li> <li>dureeHeuresPasSimulation_ (Parametres)</li> <li>debitPompage (Puits)</li> <li>distanceRiviere (Puits)</li> <li>distance (ReleveNeige)</li> <li>debits_ (Simulation)</li> <li>donneesMeteo_ (Simulation, SimulationQualite)</li> <li>dli_ (SimulationQualite)</li> <li>dLatitude (SolarFunctions::cLocation)</li> <li>dLongitude (SolarFunctions::cLocation)</li> <li>dAzimuth (SolarFunctions::cSunCoordinates)</li> <li>dZenithAngle (SolarFunctions::cSunCoordinates)</li> <li>dHours (SolarFunctions::cTime)</li> <li>dMinutes (SolarFunctions::cTime)</li> <li>dSeconds (SolarFunctions::cTime)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#e","title":"e","text":"<ul> <li>estPtot_ (DonneesMeteo)</li> <li>ETRLAC (EtatCarreauEntier::Qualite)</li> <li>ETRNAP (EtatCarreauEntier::Qualite)</li> <li>ETRSOL (EtatCarreauEntier::Qualite)</li> <li>evapoPotJour (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>evapoPotJourType (EtatCarreauEntierAssim)</li> <li>etatEvapoCE_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>etatsEvapoCE_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>etatsEvapo_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>exposantThornthwaite (EvapoCequeau::Params)</li> <li>eTg (FonteCemaNeige::EtatFonteCE, FonteCemaNeige::Params)</li> <li>etatFonteCE_ (FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>etatsFonteCE_ (FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>etatsFonte_ (FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>eauDisponible (FonteCequeau::EtatFonteCE)</li> <li>E (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>emc (FonteUEB::parameters)</li> <li>ems (FonteUEB::parameters)</li> <li>eneram (Qualite::EtatCarreauPartiel)</li> <li>eneres (Qualite::EtatCarreauPartiel)</li> <li>enerlo (Qualite::EtatCarreauPartiel)</li> <li>elevation (Qualite::spa_data)</li> <li>etatsPrecedents_ (Simulation, SimulationQualite)</li> <li>evapo_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#f","title":"f","text":"<ul> <li>facteurPonderationCE (DonneesInterpolation)</li> <li>fractionEvapoNappe (EvapoCequeau::Params, EvapoKPenman::Params, EvapoMcGuinness::Params, EvapoMorton::Params, EvapoPenmanMont::Params, EvapoPriestleyTaylor::Params)</li> <li>fonte_reel (FonteCemaNeige::EtatFonteCE)</li> <li>Fm (FonteUEB::EtatFonteCE)</li> <li>fstab (FonteUEB::parameters)</li> <li>fractionImpermeableCE (ParamCE, ParamSol)</li> <li>facultatifs_ (Parametres)</li> <li>fuseauHoraire (Qualite::spa_data)</li> <li>fichierResultats_ (Simulation)</li> <li>fonte_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#g","title":"g","text":"<ul> <li>G (FonteCemaNeige::EtatFonteCE, FonteCemaNeige::Params)</li> <li>Gseuil (FonteCemaNeige::Params)</li> <li>g (FonteUEB::constants)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#h","title":"h","text":"<ul> <li>hautMoyenneArbre_ (CarreauPartiel)</li> <li>H_f (FonteUEB::constants)</li> <li>Hne_u (FonteUEB::constants)</li> <li>h (FonteUEB::constants)</li> <li>hours (FonteUEB::parameters)</li> <li>hauteurReservoirSol (ParamCE, ParamSol)</li> <li>hombre (ParamTemperature)</li> <li>heureLocal (Qualite::spa_data)</li> <li>hasNeigeAjustee_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#i","title":"i","text":"<ul> <li>idCPAval_ (Barrage)</li> <li>idCP_ (Barrage)</li> <li>i_ (CarreauEntier, Station)</li> <li>id_ (CarreauEntier, CarreauPartiel, Station)</li> <li>iCarreauEntier_ (CarreauPartiel)</li> <li>idCarreauEntier_ (CarreauPartiel, Meteo)</li> <li>idCarreauPartielAval_ (CarreauPartiel)</li> <li>idCarreauxPartielsAmont_ (CarreauPartiel)</li> <li>indiceFoliaire_ (CarreauPartiel)</li> <li>idCarreauPartiel (EtatBarrage, EtatBarrageAssim, EtatCarreauPartiel, EtatCarreauPartielAssim, Qualite::EtatCarreauPartiel, Qualite::EtatCarreauPartielAssim)</li> <li>iCarreauEntier (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>idCarreauEntier (EtatCarreauEntier, EtatCarreauEntierAssim, EvapoCequeau::EtatEvapoAssimCE, EvapoKPenman::EtatEvapoAssimCE, EvapoMcGuinness::EtatEvapoAssimCE, EvapoMorton::EtatEvapoAssimCE, EvapoPenmanMont::EtatEvapoAssimCE, EvapoPriestleyTaylor::EtatEvapoAssimCE, EvapoTemplate::EtatEvapoAssimCE, FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteAssimCE, FonteTemplate::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>indexThermiqueThornthwaite (EvapoCequeau::Params)</li> <li>indexMurissementNeigeIni (FonteCequeau::Params)</li> <li>indexTempNeigeIni (FonteCequeau::Params)</li> <li>infiltrationMax (ParamSol)</li> <li>idCE (Puits, ReleveNeige)</li> <li>i (ReleveNeige)</li> <li>iDay (SolarFunctions::cTime)</li> <li>iMonth (SolarFunctions::cTime)</li> <li>iYear (SolarFunctions::cTime)</li> <li>iMax (ValeurZone)</li> <li>iMin (ValeurZone)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#j","title":"j","text":"<ul> <li>j_ (CarreauEntier, Station)</li> <li>jCarreauEntier_ (CarreauPartiel)</li> <li>jCarreauEntier (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>jourSoleilMaxEvapo (EvapoCequeau::Params)</li> <li>jourSoleilMaxFonteNeige (FonteCequeau::Params)</li> <li>jce (Qualite::spa_data)</li> <li>jd (Qualite::spa_data)</li> <li>jj (Qualite::spa_data)</li> <li>jme (Qualite::spa_data)</li> <li>j (ReleveNeige)</li> <li>jMax (ValeurZone)</li> <li>jMin (ValeurZone)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#k","title":"k","text":"<ul> <li>Kf (FonteCemaNeige::Params)</li> <li>K_s (FonteUEB::constants, FonteUEB::parameters)</li> <li>K_vc (FonteUEB::constants)</li> <li>K_sat (FonteUEB::parameters)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#l","title":"l","text":"<ul> <li>listeCpBarrage_ (BassinVersant)</li> <li>latitude_ (CarreauEntier, CarreauPartiel)</li> <li>longitude_ (CarreauEntier, CarreauPartiel, SolarFunctions)</li> <li>largeurCoursEauPrincipal_ (CarreauPartiel)</li> <li>longueurCoursEauPrincipal_ (CarreauPartiel)</li> <li>L_c (FonteUEB::constants)</li> <li>Lc (FonteUEB::parameters)</li> <li>lameEauDebutRuisellement (ParamCE, ParamSol)</li> <li>lacExutoire (ParamFacultatifs)</li> <li>lacs (ParamFacultatifs)</li> <li>logNeigeAjustee (ParamOption)</li> <li>latitudeMoyenneBV (ParamSol)</li> <li>L_TERMS (PositionSolaire)</li> <li>l_subcount (PositionSolaire)</li> <li>latitude (Qualite::spa_data)</li> <li>longitude (Qualite::spa_data)</li> <li>latitute_ (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#m","title":"m","text":"<ul> <li>meanSlope_ (CarreauEntier)</li> <li>moduleDLI_ (DLI)</li> <li>Mr (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>mu (FonteUEB::constants)</li> <li>melt_frac (FonteUEB::parameters)</li> <li>meteoInterpolee_ (Interpolateur)</li> <li>meteoStations_ (Interpolateur)</li> <li>meteoAutre_ (Meteo)</li> <li>meteoEvapo_ (Meteo)</li> <li>meteoFonte_ (Meteo)</li> <li>moduleDLI (ParamOption)</li> <li>moduleEvapo (ParamOption)</li> <li>moduleFonte (ParamOption)</li> <li>moduleOmbrage (ParamOption)</li> <li>modulePompage (ParamOption)</li> <li>moyAnPrecipitation_ (Station)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#n","title":"n","text":"<ul> <li>nbCarreauxEntiers_ (BassinVersant, DonneesMeteo)</li> <li>nbCarreauxPartielsCheminLong_ (BassinVersant)</li> <li>nbCarreauxPartiels_ (BassinVersant)</li> <li>nomBassinVersant_ (BassinVersant)</li> <li>nbPasDeTemps_ (DonneesMeteo)</li> <li>niveau (EtatBarrage, EtatBarrageAssim)</li> <li>niveauType (EtatBarrageAssim)</li> <li>niveauEauLacsMarais (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>niveauEauNappe (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>niveauEauSol (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>niveauEauLacsMaraisType (EtatCarreauEntierAssim)</li> <li>niveauEauNappeType (EtatCarreauEntierAssim)</li> <li>niveauEauSolType (EtatCarreauEntierAssim)</li> <li>nomChamps_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>nu (FonteUEB::constants)</li> <li>nbStation_ (Interpolateur)</li> <li>nomsAutresMeteo_ (Interpolateur)</li> <li>neige_ (Meteo)</li> <li>nbCE_ (ModuleBase)</li> <li>nomModele_ (ModuleBase)</li> <li>nomsChampsMeteo_ (ModuleBase)</li> <li>niveauInitialLacsMarais (ParamSolInitial)</li> <li>niveauInitialNappe (ParamSolInitial)</li> <li>niveauInitialSol (ParamSolInitial)</li> <li>niveauInitial (Puits)</li> <li>niveauxPuits (Puits)</li> <li>no (ReleveNeige)</li> <li>no_ (Station)</li> <li>nom_ (Station)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#o","title":"o","text":"<ul> <li>os (Log)</li> <li>option_ (Parametres)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#p","title":"p","text":"<ul> <li>paramDebitEvacuationExt_ (Barrage)</li> <li>paramDebitEvacuationInt_ (Barrage)</li> <li>paramDebit_ (Barrage)</li> <li>paramNiveau_ (Barrage)</li> <li>paramVolume_ (Barrage)</li> <li>puits_ (BassinVersant)</li> <li>param_ (CarreauEntier)</li> <li>pctForet_ (CarreauEntier, CarreauPartiel)</li> <li>pctLacExutoire_ (CarreauEntier)</li> <li>pctLacRiviere_ (CarreauEntier)</li> <li>pctMarais_ (CarreauEntier, CarreauPartiel)</li> <li>pctConifer_ (CarreauPartiel)</li> <li>pctEau_ (CarreauPartiel)</li> <li>pctFermetureFutaie_ (CarreauPartiel)</li> <li>pctFeuillu_ (CarreauPartiel)</li> <li>pctSolNu_ (CarreauPartiel)</li> <li>pctSurface_ (CarreauPartiel)</li> <li>penteRiviere_ (CarreauPartiel)</li> <li>profondeurMinimum_ (CarreauPartiel)</li> <li>params_ (DLI, EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate, FonteCemaNeige, FonteCequeau, FonteTemplate, FonteUEB)</li> <li>PPTTOT (EtatCarreauEntier::Qualite)</li> <li>production (EtatCarreauEntier, EtatCarreauEntierAssim)</li> <li>productionType (EtatCarreauEntierAssim)</li> <li>pasParJour_ (EvapoCequeau, EvapoKPenman, EvapoMcGuinness, EvapoMorton, EvapoPenmanMont, EvapoPriestleyTaylor, EvapoTemplate)</li> <li>paramALPHA (EvapoMorton::Params, EvapoPenmanMont::Params, EvapoPriestleyTaylor::Params)</li> <li>paramDebit (InfoEvacuationExt)</li> <li>paramInterpolation_ (Interpolateur)</li> <li>parametres_ (Interpolateur, Simulation)</li> <li>pluie_ (Meteo)</li> <li>panap (ParamTemperature)</li> <li>paramCalculCoeffTransfertCP (ParamTransfert)</li> <li>pompage_ (Parametres)</li> <li>PE_TERMS (PositionSolaire)</li> <li>PI (PositionSolaire)</li> <li>pasDeTemps (Qualite::spa_data)</li> <li>parametresQualite_ (SimulationQualite)</li> <li>pasTemp_ (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#q","title":"q","text":"<ul> <li>Qualite (EtatCarreauEntier, EtatCarreauPartiel)</li> <li>QNUI3_indexMurissementNeige (FonteCequeau::EtatFonteCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>QNUI4_indexTempNeige (FonteCequeau::EtatFonteCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>QNUI3_indexMurissementNeigeType (FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>QNUI4_indexTempNeigeType (FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>Q (FonteUEB::EtatFonteCE)</li> <li>Qe (FonteUEB::EtatFonteCE)</li> <li>Qh (FonteUEB::EtatFonteCE)</li> <li>Qm (FonteUEB::EtatFonteCE)</li> <li>qconv (Qualite::EtatCarreauPartiel)</li> <li>qevap (Qualite::EtatCarreauPartiel)</li> <li>qhypo (Qualite::EtatCarreauPartiel)</li> <li>qlacma (Qualite::EtatCarreauPartiel)</li> <li>qnappe (Qualite::EtatCarreauPartiel)</li> <li>qradin (Qualite::EtatCarreauPartiel)</li> <li>qradso (Qualite::EtatCarreauPartiel)</li> <li>qruiss (Qualite::EtatCarreauPartiel)</li> <li>qualite_ (SimulationQualite)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#r","title":"r","text":"<ul> <li>RUISST (EtatCarreauEntier::Qualite)</li> <li>recharge (EtatCarreauEntier)</li> <li>Ra_g (FonteUEB::constants)</li> <li>rho_g (FonteUEB::constants, FonteUEB::parameters)</li> <li>rho_i (FonteUEB::constants)</li> <li>rho_s (FonteUEB::constants, FonteUEB::parameters)</li> <li>rho_w (FonteUEB::constants)</li> <li>relevesNeige (ParamFacultatifs)</li> <li>resultatsIdCE_ (Parametres)</li> <li>resultatsIdCP_ (Parametres)</li> <li>R_TERMS (PositionSolaire)</li> <li>r_subcount (PositionSolaire)</li> <li>rayonP (Puits)</li> <li>repertoireOut_ (Simulation)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#s","title":"s","text":"<ul> <li>superficieCarreauEntier_ (BassinVersant)</li> <li>superficieCPAmontCorrige_ (CarreauPartiel)</li> <li>superficieCPAmont_ (CarreauPartiel)</li> <li>stations (DonneesInterpolation)</li> <li>SLAMAT (EtatCarreauEntier::Qualite)</li> <li>SOLT (EtatCarreauEntier::Qualite)</li> <li>SONAPT (EtatCarreauEntier::Qualite)</li> <li>stateEauLibre (EvapoCequeau::EtatEvapoCE, EvapoPriestleyTaylor::EtatEvapoCE)</li> <li>stateNappe (EvapoCequeau::EtatEvapoCE, EvapoPriestleyTaylor::EtatEvapoCE)</li> <li>statePot (EvapoCequeau::EtatEvapoCE, EvapoPriestleyTaylor::EtatEvapoCE)</li> <li>stateSol (EvapoCequeau::EtatEvapoCE, EvapoPriestleyTaylor::EtatEvapoCE)</li> <li>SNC_stockNeigeForet (FonteCemaNeige::EtatFonteCE, FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteCE, FonteUEB::EtatFonteAssimCE)</li> <li>SND_stockNeigeClairiere (FonteCemaNeige::EtatFonteCE, FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteCE, FonteUEB::EtatFonteAssimCE)</li> <li>SNC_stockNeigeForetType (FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>SND_stockNeigeClairiereType (FonteCemaNeige::EtatFonteAssimCE, FonteCequeau::EtatFonteAssimCE, FonteUEB::EtatFonteAssimCE)</li> <li>seuilTranformationPluieNeige (FonteCemaNeige::Params, FonteCequeau::Params, FonteUEB::parameters, ParamCE)</li> <li>seuilTempFonteClairiere (FonteCequeau::Params, ParamCE)</li> <li>seuilTempFonteForet (FonteCequeau::Params, ParamCE)</li> <li>stefanBoltzman (FonteUEB::constants)</li> <li>snow_temp_method (FonteUEB::parameters)</li> <li>stations_ (Interpolateur, ListeStation)</li> <li>seuilInfiltrationSolVersNappe (ParamCE, ParamSol)</li> <li>seuilPrelevementEauTauxPotentiel (ParamCE, ParamSol)</li> <li>seuilVidangeHauteNappe (ParamCE, ParamSol)</li> <li>seuilVidangeIntermediaireSol (ParamCE, ParamSol)</li> <li>superficieCPAmontCorriges (ParamFacultatifs)</li> <li>surfacesImper (ParamFacultatifs)</li> <li>seuilVidangeLacsMarais (ParamSol)</li> <li>solInitial_ (Parametres)</li> <li>sol_ (Parametres)</li> <li>simulation_ (SimulationQualite)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#t","title":"t","text":"<ul> <li>typeBarrage_ (Barrage)</li> <li>timePoint (DateChrono)</li> <li>Tf (FonteCemaNeige::Params)</li> <li>theta (FonteCemaNeige::Params)</li> <li>tauxPotentielFonteClairiere (FonteCequeau::Params, ParamCE)</li> <li>tauxPotentielFonteForet (FonteCequeau::Params, ParamCE)</li> <li>tempMurissementNeige (FonteCequeau::Params, ParamCE)</li> <li>tausn (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>tave (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>tsurf (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>t0 (FonteUEB::constants)</li> <li>tf (FonteUEB::constants)</li> <li>tk (FonteUEB::constants)</li> <li>T0 (FonteUEB::parameters)</li> <li>Tk (FonteUEB::parameters)</li> <li>tMax_ (Meteo)</li> <li>tMin_ (Meteo)</li> <li>typeAjustementNeige (ParamFacultatifs)</li> <li>tinit (ParamTemperature)</li> <li>tnap (ParamTemperature)</li> <li>tempsConcentrationBV (ParamTransfert)</li> <li>transfert_ (Parametres)</li> <li>type_ (ParametresInterpolation)</li> <li>temperature_ (ParametresQualite)</li> <li>temperature (Qualite::EtatCarreauPartiel, Qualite::EtatCarreauPartielAssim)</li> <li>temperatureType (Qualite::EtatCarreauPartielAssim)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#u","title":"u","text":"<ul> <li>u (DLI::Params)</li> <li>ub (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>udtLocation_ (SolarFunctions)</li> <li>udtSunCoordinates_ (SolarFunctions)</li> <li>udtTime_ (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#v","title":"v","text":"<ul> <li>volume_ (Barrage)</li> <li>volumeInitial_ (CarreauPartiel)</li> <li>v (DLI::Params)</li> <li>valeurs_ (DonneesMeteo)</li> <li>volume (EtatBarrage, EtatBarrageAssim, EtatCarreauPartiel, EtatCarreauPartielAssim)</li> <li>volumeType (EtatBarrageAssim, EtatCarreauPartielAssim)</li> <li>volumeSortant (EtatCarreauPartiel::Qualite)</li> <li>Vmin (FonteCemaNeige::Params)</li> <li>valeur (ReleveNeige, ValeurZone)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#w","title":"w","text":"<ul> <li>w (FonteUEB::EtatFonteCE, FonteUEB::parameters)</li> <li>Wcoeff (FonteUEB::parameters)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#y","title":"y","text":"<ul> <li>Y_TERMS (PositionSolaire)</li> </ul>"},{"location":"CEQUEAU/class_member_variables/#z","title":"z","text":"<ul> <li>Zmed (FonteCemaNeige::Params)</li> <li>zenitAngle_ (FonteUEB)</li> <li>z (FonteUEB::constants, FonteUEB::parameters)</li> <li>z0 (FonteUEB::parameters)</li> <li>zenithAngle_ (SolarFunctions)</li> </ul>"},{"location":"CEQUEAU/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"CEQUEAU/class_member_enums/","title":"Class Member Enums","text":""},{"location":"CEQUEAU/class_member_enums/#p","title":"p","text":"<ul> <li>PositionSolaire (PositionSolaire)</li> </ul>"},{"location":"CEQUEAU/namespace_members/","title":"Namespace Members","text":""},{"location":"CEQUEAU/namespace_members/#a","title":"a","text":"<ul> <li>assimilerValeur (AssimilationHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_members/#c","title":"c","text":"<ul> <li>chargerValeurs (MexHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_members/#d","title":"d","text":"<ul> <li>dateToDatenum (MexHelper)</li> <li>datenumToDate (MexHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_members/#e","title":"e","text":"<ul> <li>EtatsCarreauxPartiels (Qualite)</li> <li>EtatsCarreauxPartielsAssim (Qualite)</li> </ul>"},{"location":"CEQUEAU/namespace_members/#h","title":"h","text":"<ul> <li>hasField (MexHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_members/#m","title":"m","text":"<ul> <li>mhMxGetData (MexHelper)</li> <li>mhMxGetField (MexHelper)</li> <li>mhMxGetPr (MexHelper)</li> <li>ModuleEvapo (ModuleEvapo)</li> <li>ModuleFonte (ModuleFonte)</li> </ul>"},{"location":"CEQUEAU/namespace_members/#o","title":"o","text":"<ul> <li>obtenirTypeAssim (AssimilationHelper)</li> <li>obtenirValeursAssim (AssimilationHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_member_functions/","title":"Namespace Member Functions","text":""},{"location":"CEQUEAU/namespace_member_functions/#a","title":"a","text":"<ul> <li>assimilerValeur (AssimilationHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_member_functions/#c","title":"c","text":"<ul> <li>chargerValeurs (MexHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_member_functions/#d","title":"d","text":"<ul> <li>dateToDatenum (MexHelper)</li> <li>datenumToDate (MexHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_member_functions/#h","title":"h","text":"<ul> <li>hasField (MexHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_member_functions/#m","title":"m","text":"<ul> <li>mhMxGetData (MexHelper)</li> <li>mhMxGetField (MexHelper)</li> <li>mhMxGetPr (MexHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_member_functions/#o","title":"o","text":"<ul> <li>obtenirTypeAssim (AssimilationHelper)</li> <li>obtenirValeursAssim (AssimilationHelper)</li> </ul>"},{"location":"CEQUEAU/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"CEQUEAU/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":""},{"location":"CEQUEAU/namespace_member_typedefs/#e","title":"e","text":"<ul> <li>EtatsCarreauxPartiels (Qualite)</li> <li>EtatsCarreauxPartielsAssim (Qualite)</li> </ul>"},{"location":"CEQUEAU/namespace_member_enums/","title":"Namespace Member Enums","text":""},{"location":"CEQUEAU/namespace_member_enums/#m","title":"m","text":"<ul> <li>ModuleEvapo (ModuleEvapo)</li> <li>ModuleFonte (ModuleFonte)</li> </ul>"},{"location":"CEQUEAU/functions/","title":"Functions","text":""},{"location":"CEQUEAU/functions/#c","title":"c","text":"<ul> <li>compileCequeauMat (compileCequeauMat.m)</li> <li>compileCequeauOct (compileCequeauOct.m)</li> <li>compileInterpolationMat (compileInterpolationMat.m)</li> <li>compileInterpolationOct (compileInterpolationOct.m)</li> </ul>"},{"location":"CEQUEAU/functions/#d","title":"d","text":"<ul> <li>disp (compileInterpolationOct.m, conversionParametresV2-V4.m)</li> </ul>"},{"location":"CEQUEAU/functions/#e","title":"e","text":"<ul> <li>eval (compileCequeauMat.m, compileCequeauOct.m, compileInterpolationMat.m, compileInterpolationOct.m)</li> </ul>"},{"location":"CEQUEAU/functions/#f","title":"f","text":"<ul> <li>false (compileCequeauMat.m, compileInterpolationMat.m)</li> </ul>"},{"location":"CEQUEAU/functions/#m","title":"m","text":"<ul> <li>mexFunction (CequeauQuantiteMex.cpp, InterpolationMex.cpp)</li> </ul>"},{"location":"CEQUEAU/functions/#n","title":"n","text":"<ul> <li>NowTime (log.h)</li> </ul>"},{"location":"CEQUEAU/functions/#o","title":"o","text":"<ul> <li>operator&lt;&lt; (DateChrono.cpp)</li> </ul>"},{"location":"CEQUEAU/functions/#s","title":"s","text":"<ul> <li>sortByDistance (Simulation.h, Simulation_Production.cpp)</li> <li>strcmp (compileCequeauMat.m, compileInterpolationMat.m)</li> </ul>"},{"location":"CEQUEAU/macros/","title":"Macros","text":""},{"location":"CEQUEAU/macros/#a","title":"a","text":"<ul> <li>absf (stdafx.h)</li> </ul>"},{"location":"CEQUEAU/macros/#d","title":"d","text":"<ul> <li>dAstronomicalUnit (SolarFunctions.h)</li> <li>dEarthMeanRadius (SolarFunctions.h)</li> </ul>"},{"location":"CEQUEAU/macros/#f","title":"f","text":"<ul> <li>FILELOG_DECLSPEC (log.h)</li> <li>FILELOG_MAX_LEVEL (log.h)</li> <li>FILE_LOG (log.h)</li> </ul>"},{"location":"CEQUEAU/macros/#g","title":"g","text":"<ul> <li>GetCurrentDir (stdafx.h)</li> </ul>"},{"location":"CEQUEAU/macros/#m","title":"m","text":"<ul> <li>maxf (stdafx.h)</li> <li>minf (stdafx.h)</li> </ul>"},{"location":"CEQUEAU/macros/#p","title":"p","text":"<ul> <li>PI (EvapoMcGuinness.cpp)</li> <li>pi (SolarFunctions.h)</li> </ul>"},{"location":"CEQUEAU/macros/#r","title":"r","text":"<ul> <li>rad (SolarFunctions.h)</li> </ul>"},{"location":"CEQUEAU/macros/#t","title":"t","text":"<ul> <li>twopi (SolarFunctions.h)</li> </ul>"},{"location":"CEQUEAU/variables/","title":"Variables","text":""},{"location":"CEQUEAU/variables/#a","title":"a","text":"<ul> <li>ASSIMILATION_NO_DATA (AssimilationHelper.hpp)</li> </ul>"},{"location":"CEQUEAU/variables/#b","title":"b","text":"<ul> <li>BarragePtr (BassinVersant.h)</li> </ul>"},{"location":"CEQUEAU/variables/#c","title":"c","text":"<ul> <li>CarreauEntierPtr (BassinVersant.h)</li> <li>CarreauPartielPtr (BassinVersant.h)</li> <li>COMPFLAGS (compileCequeauMat.m, compileCequeauOct.m, compileInterpolationMat.m, compileInterpolationOct.m)</li> <li>COMPILER_COMP_FLAGS (compileCequeauMat.m, compileInterpolationMat.m)</li> <li>CXXFLAGS (compileCequeauMat.m, compileCequeauOct.m, compileInterpolationMat.m, compileInterpolationOct.m)</li> <li>command (compileCequeauMat.m, compileCequeauOct.m, compileInterpolationMat.m, compileInterpolationOct.m)</li> <li>compiler (compileCequeauMat.m, compileInterpolationMat.m)</li> <li>cequeau (conversionParametresV2-V4.m)</li> </ul>"},{"location":"CEQUEAU/variables/#d","title":"d","text":"<ul> <li>DonneesCarreaux (Interpolateur.h)</li> <li>DBG_FLAG (compileCequeauMat.m, compileCequeauOct.m, compileInterpolationMat.m, compileInterpolationOct.m)</li> <li>dbg (compileCequeauMat.m, compileCequeauOct.m, compileInterpolationMat.m, compileInterpolationOct.m)</li> <li>debug (compileCequeauOct.m, compileInterpolationOct.m)</li> </ul>"},{"location":"CEQUEAU/variables/#e","title":"e","text":"<ul> <li>EtatsBarrages (Simulation.h)</li> <li>EtatsBarragesAssim (Simulation.h)</li> <li>EtatsCarreauxEntiers (Simulation.h)</li> <li>EtatsCarreauxEntiersAssim (Simulation.h)</li> <li>EtatsCarreauxPartiels (Simulation.h)</li> <li>EtatsCarreauxPartielsAssim (Simulation.h)</li> <li>EvapoPtr (Simulation.h)</li> <li>evnap (conversionParametresV2-V4.m)</li> </ul>"},{"location":"CEQUEAU/variables/#f","title":"f","text":"<ul> <li>FontePtr (Simulation.h)</li> <li>FLAGS (compileCequeauOct.m, compileInterpolationOct.m)</li> <li>FUSEAU_HORAIRE (stdafx.h)</li> </ul>"},{"location":"CEQUEAU/variables/#i","title":"i","text":"<ul> <li>InterpolateurPtr (CequeauQuantiteMex.cpp, InterpolationMex.cpp)</li> <li>idMex (CequeauQuantiteMex.cpp, InterpolationMex.cpp)</li> <li>IDX_PRECIPITATION (Interpolateur.h)</li> <li>IDX_TEMPERATURE (Interpolateur.h)</li> </ul>"},{"location":"CEQUEAU/variables/#j","title":"j","text":"<ul> <li>joeva (conversionParametresV2-V4.m)</li> <li>jonei (conversionParametresV2-V4.m)</li> </ul>"},{"location":"CEQUEAU/variables/#l","title":"l","text":"<ul> <li>LOG_FLAG (compileCequeauMat.m, compileInterpolationMat.m)</li> <li>log (compileCequeauOct.m, compileInterpolationOct.m)</li> </ul>"},{"location":"CEQUEAU/variables/#m","title":"m","text":"<ul> <li>MoyenneMois (Defs.h, ParametresQualite.h)</li> <li>MeteoGrille (DonneesMeteo.h)</li> <li>MeteoPtr (DonneesMeteo.h)</li> <li>moduleFonte (conversionParametresV2-V4.m)</li> <li>matError (stdafx.h)</li> </ul>"},{"location":"CEQUEAU/variables/#n","title":"n","text":"<ul> <li>NB_CP_AMONT (CarreauPartiel.h)</li> <li>NB_MAX_PARAM_EQUATION (Defs.h)</li> <li>NB_TYPE_STATION (Interpolateur.h)</li> </ul>"},{"location":"CEQUEAU/variables/#o","title":"o","text":"<ul> <li>OFFSET_DATENUM (DateChrono.cpp)</li> <li>OUTFILE (compileCequeauMat.m, compileCequeauOct.m, compileInterpolationMat.m, compileInterpolationOct.m)</li> <li>option (conversionParametresV2-V4.m)</li> </ul>"},{"location":"CEQUEAU/variables/#p","title":"p","text":"<ul> <li>PuitsPtr (BassinVersant.h)</li> <li>ParamEquation (Defs.h)</li> <li>paramconv (conversionParametresV2-V4.m)</li> <li>parametresWork (conversionParametresV2-V4.m)</li> <li>PI (stdafx.h)</li> </ul>"},{"location":"CEQUEAU/variables/#r","title":"r","text":"<ul> <li>RelevesNeigeIter (Parametres.h)</li> <li>RelevesNeige (Simulation.h)</li> </ul>"},{"location":"CEQUEAU/variables/#s","title":"s","text":"<ul> <li>StationPtr (ListeStation.h)</li> <li>Stations (ListeStation.h)</li> <li>SECONDES (MexHelper.hpp)</li> <li>SOURCES (compileCequeauMat.m, compileCequeauOct.m, compileInterpolationMat.m, compileInterpolationOct.m)</li> <li>sol (conversionParametresV2-V4.m)</li> <li>solInitial (conversionParametresV2-V4.m)</li> </ul>"},{"location":"CEQUEAU/variables/#t","title":"t","text":"<ul> <li>TypeAssim (AssimilationHelper.hpp)</li> <li>TypeBarrage (Barrage.h)</li> <li>TypeAjustementNeige (Parametres.h)</li> <li>tmur (conversionParametresV2-V4.m)</li> <li>tstock (conversionParametresV2-V4.m)</li> <li>TLogLevel (log.h)</li> </ul>"},{"location":"CEQUEAU/variables/#x","title":"x","text":"<ul> <li>xaa (conversionParametresV2-V4.m)</li> <li>xit (conversionParametresV2-V4.m)</li> </ul>"},{"location":"CEQUEAU/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}